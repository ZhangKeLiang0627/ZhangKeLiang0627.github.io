<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【树莓派】树莓派使用HomeAssistant连接ESPHome</title>
    <link href="/2025/01/14/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/README/"/>
    <url>/2025/01/14/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/README/</url>
    
    <content type="html"><![CDATA[<h3 id="【树莓派】树莓派使用HomeAssistant连接ESPHome"><a href="#【树莓派】树莓派使用HomeAssistant连接ESPHome" class="headerlink" title="【树莓派】树莓派使用HomeAssistant连接ESPHome"></a>【树莓派】树莓派使用HomeAssistant连接ESPHome</h3><h3 id="【Raspberry-Raspberry-Pi-use-HomeAssistant-to-connect-ESPHome"><a href="#【Raspberry-Raspberry-Pi-use-HomeAssistant-to-connect-ESPHome" class="headerlink" title="【Raspberry Raspberry Pi use HomeAssistant to connect ESPHome"></a>【Raspberry Raspberry Pi use HomeAssistant to connect ESPHome</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><div class="note note-warning">            <p>多图警告！请流量党抓紧连上WiFi，捂好钱包，我们，出发！</p>          </div><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image.png" alt="HomeAssistant logo"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-3.png" alt="ESPHome logo"></div></div></div><p><code>HomeAssistant</code>是一个开源的智能家居自动化平台，它允许用户通过一个中心化的系统来控制和管理家中的各种智能设备。它的设计理念是为用户提供一个无需依赖特定制造商的解决方案，因此，它可以集成来自不同品牌的智能设备（如Xiaomi），为用户提供一个开放且可定制的智能家居体验。</p><p><code>ESPHome</code> is a system to control your microcontrollers by simple yet powerful configuration files and control them remotely through Home Automation systems.</p><blockquote><p>HomeAssistant官网：<a href="https://www.home-assistant.io/">https://www.home-assistant.io</a><br>ESPHome官网：<a href="https://esphome.io/">https://esphome.io</a></p></blockquote><p>今天咱们使用<code>HomeAssistant</code>接入<code>ESPHome</code>，事不宜迟，趁热打铁，我们开始！</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>硬件：Raspberry Pi 4B</li><li>镜像版本：<code>HA-OS</code>版本 HomeAssistant</li></ul><h4 id="HomeAssistant-版本"><a href="#HomeAssistant-版本" class="headerlink" title="HomeAssistant 版本"></a>HomeAssistant 版本</h4><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-5.png"></p><p><code>HomeAssistant</code>一共推出了4种版本：HA-OS, Docker, Core, Supervised.</p><p>优先推荐安装<code>HA-OS</code>版本<a href="https://www.home-assistant.io/installation/raspberrypi">官方详细教程戳这里:)</a>，因为该版本安装简易，同时有<code>Add-on</code>和<code>Superviser</code>，拥有加载项商店，可以方便地下载插件！</p><p><strong><em>本篇文章将简述使用树莓派 HomeAssistant 的<code>HA-OS</code>版本连接<code>ESPHome</code>。</em></strong></p><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="下载ESPHome插件"><a href="#下载ESPHome插件" class="headerlink" title="下载ESPHome插件"></a>下载ESPHome插件</h4><p>So easy!!! Please just follow the pictures below:</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-4.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-21.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-6.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-7.png"></div></div></div><h4 id="添加新的Device"><a href="#添加新的Device" class="headerlink" title="添加新的Device"></a>添加新的Device</h4><div class="note note-info">            <p>这里以ESP32S3为例：</p>          </div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-8.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-9.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-10.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-11.png"></div></div></div><h4 id="烧录ESPHome固件"><a href="#烧录ESPHome固件" class="headerlink" title="烧录ESPHome固件"></a>烧录ESPHome固件</h4><ol><li>生成在线烧录的bin文件：</li></ol><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-12.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-13.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-18.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-19.png"></div></div></div><p>以下为<code>YAML</code>文件的模板，此文件将用于设置所有板配置。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>YAML文件的模板（ESP32S3      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">esphome:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-esp32s3</span><br>  <span class="hljs-attr">friendly name:</span> <span class="hljs-string">my-esp32s3</span><br>  <span class="hljs-attr">platformio_options:</span><br>    <span class="hljs-attr">build_flags:</span> <span class="hljs-string">-DBOARD_HAS_PSRAM</span><br>    <span class="hljs-attr">board_build.arduino.memory_type:</span> <span class="hljs-string">qio_opi</span><br>    <span class="hljs-attr">board_build.f_flash:</span> <span class="hljs-string">80000000L</span><br>    <span class="hljs-attr">board_build.flash_mode:</span> <span class="hljs-string">qio</span> <br><br><span class="hljs-attr">esp32:</span><br>  <span class="hljs-attr">board:</span> <span class="hljs-string">esp32-s3-devkitc-1</span><br>  <span class="hljs-attr">framework:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">arduino</span><br><br><span class="hljs-comment"># Enable logging</span><br><span class="hljs-attr">logger:</span><br><br><span class="hljs-comment"># Enable Home Assistant API</span><br><span class="hljs-attr">api:</span><br>  <span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;gbDi6S+wV/rr890ytxP1aD+lgdJOk/Wi52Q5RcK1BGc=&quot;</span><br><span class="hljs-attr">ota:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">esphome</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;1e7a2bdcdbcac1e989f1890679d09122&quot;</span><br><br><span class="hljs-attr">wifi:</span><br>  <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;your wifi name&quot;</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;your wifi password&quot;</span><br><br>  <span class="hljs-comment"># Enable fallback hotspot (captive portal) in case wifi connection fails</span><br>  <span class="hljs-attr">ap:</span><br>    <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;My-Esp32s3 Fallback Hotspot&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;MoLTqZUvHwWI&quot;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><ol start="2"><li>使用ESP32在线烧录工具：<a href="https://web.esphome.io/">https://web.esphome.io/</a> ，将bin文件烧录到MCU当中：</li></ol><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-14.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-15.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-16.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-17.png"></div></div></div><p>烧录成功页面如下：<br><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-20.png"></p><h4 id="HomeAssistant连接Device"><a href="#HomeAssistant连接Device" class="headerlink" title="HomeAssistant连接Device"></a>HomeAssistant连接Device</h4><div class="note note-warning">            <p>注意：Device连接的WiFi必须要与HomeAssistant在同一局域网之下！如果路由器WiFi分为2.4G和5G，最好都连接使用2.4G的（2.4G的WiFi对ESP32兼容，5G可能不行，不要一个使用2.4G，一个使用5G！</p>          </div><div class="note note-warning">            <p>Plus：如果遇到以下错误，请检查：</p><ol><li>HA和Device是否在同一局域网下，检查Device的ip地址是否填写正确；</li><li>确保已经在同一局域网下，ip地址无误，可能是网络信号差，连续多点几次<code>提交</code>就能连接成功。</li></ol><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-22.png"></p>          </div><div class="note note-success">            <p>提示：最好使用 2.4GHz Wi-Fi！</p>          </div><p>跟随以下图片分解步骤即可完成 HomeAssistant 连接新的 Device：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-23.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-24.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-25.png"></div><div class="group-image-wrap"><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8HomeAssistant%E8%BF%9E%E6%8E%A5ESPHome/image-26.png"></div></div></div><p>…</p><h4 id="ESPHome的yaml文件编写（根据不同传感器需求"><a href="#ESPHome的yaml文件编写（根据不同传感器需求" class="headerlink" title="ESPHome的yaml文件编写（根据不同传感器需求"></a>ESPHome的yaml文件编写（根据不同传感器需求</h4><ul><li>Binary LED + SPG30 + DHT11 (ESP32S3)</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>YAML文件的模板（ESP32S3      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">esphome:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-esp32s3</span><br>  <span class="hljs-attr">friendly_name:</span> <span class="hljs-string">my-esp32s3</span><br><br><br><span class="hljs-attr">esp32:</span><br>  <span class="hljs-attr">board:</span> <span class="hljs-string">esp32-s3-devkitc-1</span><br>  <span class="hljs-attr">framework:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">arduino</span><br><br><span class="hljs-comment"># Enable logging</span><br><span class="hljs-attr">logger:</span><br><br><span class="hljs-comment"># Enable Home Assistant API</span><br><span class="hljs-attr">api:</span><br>  <span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;gbDi6S+wV/rr890ytxP1aD+lgdJOk/Wi52Q5RcK1BGc=&quot;</span><br><br><span class="hljs-attr">ota:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">esphome</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;1e7a2bdcdbcac1e989f1890679d09122&quot;</span><br><br><span class="hljs-attr">wifi:</span><br>  <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;HUGO&quot;</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;12345678&quot;</span><br><br>  <span class="hljs-comment"># Enable fallback hotspot (captive portal) in case wifi connection fails</span><br>  <span class="hljs-attr">ap:</span><br>    <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;My-Esp32S3 Fallback Hotspot&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;LakYDi3jZIKg&quot;</span><br><br><span class="hljs-comment"># I2C configuration for i2c sensor</span><br><span class="hljs-attr">i2c:</span><br>  <span class="hljs-attr">sda:</span> <span class="hljs-string">GPIO5</span><br>  <span class="hljs-attr">scl:</span> <span class="hljs-string">GPIO6</span><br>  <span class="hljs-attr">scan:</span> <span class="hljs-literal">True</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-string">bus_a</span><br>  <span class="hljs-attr">frequency:</span> <span class="hljs-string">400kHz</span><br><br><span class="hljs-comment"># Example configuration entry</span><br><span class="hljs-attr">switch:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">gpio</span><br>    <span class="hljs-attr">pin:</span> <span class="hljs-string">GPIO1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Living Room light&quot;</span><br><br><span class="hljs-attr">captive_portal:</span><br><br><span class="hljs-attr">sensor:</span>       <br>  <span class="hljs-comment"># Sensor configuration for dht11</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">dht</span><br>    <span class="hljs-attr">pin:</span> <span class="hljs-string">GPIO44</span><br>    <span class="hljs-attr">temperature:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Temperature&quot;</span><br>    <span class="hljs-attr">humidity:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Humidity&quot;</span><br>    <span class="hljs-attr">update_interval:</span> <span class="hljs-string">5s</span> <span class="hljs-comment"># 数据每5s监测一次</span><br>    <span class="hljs-attr">model:</span> <span class="hljs-string">&quot;DHT11&quot;</span>  <br><br>  <span class="hljs-comment"># Sensor configuration for SGP30</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">sgp30</span><br>    <span class="hljs-attr">eco2:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Workshop eCO2&quot;</span><br>      <span class="hljs-attr">accuracy_decimals:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 数据精确到小数点后1位</span><br>    <span class="hljs-attr">tvoc:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Workshop TVOC&quot;</span><br>      <span class="hljs-attr">accuracy_decimals:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 数据精确到小数点后1位</span><br>    <span class="hljs-attr">store_baseline:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-number">0x58</span><br>    <span class="hljs-attr">update_interval:</span> <span class="hljs-string">5s</span> <span class="hljs-comment"># 数据每5s监测一次</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><ul><li>ESP-Camera (XIAO-ESP32S3)</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>YAML文件的模板（XIAO-ESP32S3      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">esphome:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-esp32s3-camera</span><br>  <span class="hljs-attr">friendly_name:</span> <span class="hljs-string">my-esp32s3-camera</span><br><br>  <span class="hljs-comment"># PlatformIO build options</span><br>  <span class="hljs-attr">platformio_options:</span><br>    <span class="hljs-attr">build_flags:</span> <span class="hljs-string">-DBOARD_HAS_PSRAM</span><br>    <span class="hljs-attr">board_build.arduino.memory_type:</span> <span class="hljs-string">qio_opi</span><br>    <span class="hljs-attr">board_build.f_flash:</span> <span class="hljs-string">80000000L</span><br>    <span class="hljs-attr">board_build.flash_mode:</span> <span class="hljs-string">qio</span> <br><br><span class="hljs-comment"># Configuration for ESP32</span><br><span class="hljs-attr">esp32:</span><br>  <span class="hljs-attr">board:</span> <span class="hljs-string">esp32-s3-devkitc-1</span><br>  <span class="hljs-attr">framework:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">arduino</span><br><br><span class="hljs-comment"># Enable logging</span><br><span class="hljs-attr">logger:</span><br><br><span class="hljs-comment"># Enable Home Assistant API</span><br><span class="hljs-attr">api:</span><br>  <span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;0VVmbx1JdrIWI8sw+TneEf0oEi0vkQnNLuP3Vl6EvMQ=&quot;</span><br><br><span class="hljs-attr">ota:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">esphome</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;0237fcf68dea46990481fb72466c2cdc&quot;</span><br><br><span class="hljs-attr">wifi:</span><br>  <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;HUGO&quot;</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;12345678&quot;</span><br><br>  <span class="hljs-comment"># Enable fallback hotspot (captive portal) in case wifi connection fails</span><br>  <span class="hljs-attr">ap:</span><br>    <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;My-Esp32S3-Camera&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;gqgYC1lZTiFD&quot;</span><br><br><span class="hljs-attr">captive_portal:</span><br><br><span class="hljs-comment"># Configuration for the ESP32 Camera</span><br><span class="hljs-attr">esp32_camera:</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-string">espcam</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">My</span> <span class="hljs-string">Camera</span><br>  <span class="hljs-attr">external_clock:</span><br>    <span class="hljs-attr">pin:</span> <span class="hljs-string">GPIO10</span><br>    <span class="hljs-attr">frequency:</span> <span class="hljs-string">20MHz</span><br>  <span class="hljs-attr">i2c_pins:</span><br>    <span class="hljs-attr">sda:</span> <span class="hljs-string">GPIO40</span><br>    <span class="hljs-attr">scl:</span> <span class="hljs-string">GPIO39</span><br>  <span class="hljs-attr">data_pins:</span> [<span class="hljs-string">GPIO15</span>, <span class="hljs-string">GPIO17</span>, <span class="hljs-string">GPIO18</span>, <span class="hljs-string">GPIO16</span>, <span class="hljs-string">GPIO14</span>, <span class="hljs-string">GPIO12</span>, <span class="hljs-string">GPIO11</span>, <span class="hljs-string">GPIO48</span>]<br>  <span class="hljs-attr">vsync_pin:</span> <span class="hljs-string">GPIO38</span><br>  <span class="hljs-attr">href_pin:</span> <span class="hljs-string">GPIO47</span><br>  <span class="hljs-attr">pixel_clock_pin:</span> <span class="hljs-string">GPIO13</span><br>  <span class="hljs-attr">resolution:</span> <span class="hljs-string">800x600</span><br>  <br><span class="hljs-comment"># Configuration for the ESP32 Camera Web Server</span><br><span class="hljs-attr">esp32_camera_web_server:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">stream</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">snapshot</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><ul><li>WS2812 (ESP32C3)</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>YAML文件的模板（ESP32C3      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">esphome:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-esp32c3</span><br>  <span class="hljs-attr">friendly_name:</span> <span class="hljs-string">my-esp32c3</span><br><br><span class="hljs-attr">esp32:</span><br>  <span class="hljs-attr">board:</span> <span class="hljs-string">esp32-c3-devkitm-1</span><br>  <span class="hljs-attr">framework:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">arduino</span><br><br><span class="hljs-comment"># Enable logging</span><br><span class="hljs-attr">logger:</span><br><br><span class="hljs-comment"># Enable Home Assistant API</span><br><span class="hljs-attr">api:</span><br>  <span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;giFi9MI6pdcoc+WdXm84dSaRFIbc8cn/TifIG6/V/Js=&quot;</span><br><br><span class="hljs-attr">ota:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">esphome</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;c73e533495a8ca7f3fcc39fd47a3182b&quot;</span><br><br><span class="hljs-attr">wifi:</span><br>  <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;HUGO&quot;</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;12345678&quot;</span><br>  <span class="hljs-comment"># Enable fallback hotspot (captive portal) in case wifi connection fails</span><br>  <span class="hljs-attr">ap:</span><br>    <span class="hljs-attr">ssid:</span> <span class="hljs-string">&quot;My-Esp32C3 Fallback Hotspot&quot;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;uV72qROO5gCX&quot;</span><br><br><span class="hljs-attr">captive_portal:</span><br>    <br><span class="hljs-attr">light:</span><br><span class="hljs-comment">#WS2812_RGB</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">neopixelbus</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">GRB</span><br>    <span class="hljs-attr">variant:</span> <span class="hljs-string">WS2812</span><br>    <span class="hljs-attr">pin:</span> <span class="hljs-string">GPIO2</span><br>    <span class="hljs-attr">num_leds:</span> <span class="hljs-number">60</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;RGB_LED&quot;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-4.png" alt="HomeAssistant logo"></p><p>鸣谢：</p><ul><li><a href="https://blog.csdn.net/vor234/article/details/135843695">https://blog.csdn.net/vor234/article/details/135843695</a></li><li><a href="https://blog.csdn.net/m0_57530281/article/details/125693037">https://blog.csdn.net/m0_57530281/article/details/125693037</a></li><li><a href="https://blog.csdn.net/nowboy4/article/details/123804170">https://blog.csdn.net/nowboy4/article/details/123804170</a></li><li><a href="https://blog.csdn.net/qq_42250136/article/details/137674700">https://blog.csdn.net/qq_42250136/article/details/137674700</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>RaspberryPi</tag>
      
      <tag>HomeAssistant</tag>
      
      <tag>ESPHome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【树莓派】在树莓派部署HomeAssistant</title>
    <link href="/2025/01/09/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/README/"/>
    <url>/2025/01/09/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/README/</url>
    
    <content type="html"><![CDATA[<h3 id="【树莓派】在树莓派部署HomeAssistant"><a href="#【树莓派】在树莓派部署HomeAssistant" class="headerlink" title="【树莓派】在树莓派部署HomeAssistant"></a>【树莓派】在树莓派部署HomeAssistant</h3><h3 id="【Raspberry-PI】Deploy-HomeAssistant-on-Raspberry-Pi"><a href="#【Raspberry-PI】Deploy-HomeAssistant-on-Raspberry-Pi" class="headerlink" title="【Raspberry PI】Deploy HomeAssistant on Raspberry Pi"></a>【Raspberry PI】Deploy HomeAssistant on Raspberry Pi</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><!-- ![HomeAssistant logo](images/MyRaspberryPiLearningGuide/树莓派部署HomeAssistant/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image.png" alt="HomeAssistant logo"></p><p><code>HomeAssistant</code>是一个开源的智能家居自动化平台，它允许用户通过一个中心化的系统来控制和管理家中的各种智能设备。它的设计理念是为用户提供一个无需依赖特定制造商的解决方案，因此，它可以集成来自不同品牌的智能设备（如Xiaomi），为用户提供一个开放且可定制的智能家居体验。</p><blockquote><p>HomeAssistant官网：<a href="https://www.home-assistant.io/">https://www.home-assistant.io</a></p></blockquote><p>学习需要用到<code>HomeAssistant</code>啦，这个词其实对我来说并不陌生，但是从前都只是只听其名不见闻其声，如今终于要上手啦！拯救落灰树莓派行动！出发！</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>硬件：Raspberry Pi 4B</li><li>镜像版本：<strong>HA-OS版本 HomeAssistant</strong> or <strong>2022-09-22-raspios-bullseye-arm64.img</strong>：<a href="https://mirror.sjtu.edu.cn/raspberry-pi-os-images/raspios_arm64/images/raspios_arm64-2022-09-26/">-&gt; 上交的镜像源</a></li><li>Python版本：<code>3.9.2</code></li></ul><h4 id="HomeAssistant-版本"><a href="#HomeAssistant-版本" class="headerlink" title="HomeAssistant 版本"></a>HomeAssistant 版本</h4><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-5.png"></p><p><code>HomeAssistant</code>一共推出了4种版本：HA-OS, Docker, Core, Supervised.</p><p>优先推荐安装<code>HA-OS</code>版本，因为该版本安装简易，同时有<code>Add-on</code>和<code>Superviser</code>，拥有加载项商店，可以方便地下载插件！</p><p><strong><em>本篇文章将简述如何迅速地在树莓派部署 HomeAssistant（<code>HA-OS</code>和<code>Core</code>）。</em></strong></p><hr><h3 id="安装HA-OS版本的HA"><a href="#安装HA-OS版本的HA" class="headerlink" title="安装HA-OS版本的HA"></a>安装<code>HA-OS</code>版本的HA</h3><p>直接使用<code>Raspberry Pi Imager</code>对tf卡进行<code>HA-OS</code>系统烧录即可，具体操作官网写得很详细：<a href="https://www.home-assistant.io/installation/raspberrypi">戳这里:)</a></p><p>值得注意的是，烧录好tf卡后将tf卡插入树莓派，此时树莓派处于无网络状态，你可以使用网线连接树莓派给其提供网络环境，也可以用让树莓派连接WiFi的方式连接网络，用HDMI线将树莓派连接屏幕，屏幕会显示树莓派输出的命令行信息 (Home Assistant CLI)，接下来，将示范如何使用<code>HomeAssistant</code>首次使用配置连接无线网：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在首次使用Home Assistant操作系统时，有网线方式可以直接联网；没网线时就需要配置好WiFi，就是在ha提示符下输入以下联网命令：</span><br>network update wlan0 --wifi-ssid &quot;你的WiFi名称&quot; --wifi-psk 你的WiFi密码 --wifi-auth wpa-psk --wifi-mode infrastructure --ipv4-method auto<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络信息（包括ip地址等</span><br>network info<br></code></pre></td></tr></table></figure><blockquote><p><strong>Q：</strong><code>homeassistant.local:8123</code>无法访问但是<code>homeassistant.local:4357</code>的<code>Observer</code>可访问？<br><strong>A：</strong>如果是<code>404 not found</code>就全部推倒重来；如果是提示暂时无法访问，其实是<code>Supervisor</code>在更新，得等待几分钟至几个小时。</p></blockquote><h3 id="安装Core版本的HA"><a href="#安装Core版本的HA" class="headerlink" title="安装Core版本的HA"></a>安装<code>Core</code>版本的HA</h3><h4 id="a-更新源"><a href="#a-更新源" class="headerlink" title="a. 更新源"></a>a. 更新源</h4><p>首先，拿到落灰的小树莓派，先更新源，确保系统能够获取到最新的软件和安全更新，稍微等待，完成即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><h4 id="b-安装-HomeAssistant"><a href="#b-安装-HomeAssistant" class="headerlink" title="b. 安装 HomeAssistant"></a>b. 安装 HomeAssistant</h4><ol><li>先安装一下依赖：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install -y python3 python3-dev python3-venv python3-pip libffi-dev libssl-dev libjpeg-dev zlib1g-dev autoconf build-essential libopenjp2-7 libtiff5 --fix-missing<br></code></pre></td></tr></table></figure><ol start="2"><li>创建虚拟环境</li></ol><ul><li>创建安装<code>Home Assistant</code>的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/hass<br></code></pre></td></tr></table></figure><ul><li>创建并激活用于<code>Home Assistant</code>的虚拟环境</li></ul><p>先<code>cd ~/hass</code>，进入hass文件夹内，这就是以后要安装homeassistant的位置.</p><p>然后，输入以下命令创建虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m venv /home/pi/hass<br></code></pre></td></tr></table></figure><p>执行完成后，在hass文件夹内<code>ls</code>一下，可以看见多了很多文件，说明虚拟环境已经创建成功了…(</p><ul><li>接下来，激活虚拟环境：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source bin/activate<br></code></pre></td></tr></table></figure><p>看到命令行前多加了一个<code>(hass)</code>，就代表环境激活成功啦！</p><ol start="3"><li>安装HomeAssistant</li></ol><ul><li>这里国内的下载速度可能会很慢，导致数据丢包报错，我们可以尝试为pip3下载源换源：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先为换源前的文件做备份</span><br>sudo cp /etc/pip.conf /etc/pip.conf.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">为pip.conf加入aliyun的下载源</span><br>sudo vi /etc/pip.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将内容修改成以下内容，然后保存退出</span><br>[global]<br>index-url=https://mirrors.aliyun.com/pypi/simple/<br>extra-index-url=https://www.piwheels.org/simple<br></code></pre></td></tr></table></figure><ul><li>换源后，在虚拟环境中，安装Python package.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m pip install wheel<br></code></pre></td></tr></table></figure><ul><li>安装 Home Assistant Core.</li></ul><p>安装时会稍微有些爆警告，但是不要紧的，静待下载完成，看到绿色的<span class="label label-success">success</span>字样说明安装成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install homeassistant<br></code></pre></td></tr></table></figure><h4 id="b-启动-HomeAssistant"><a href="#b-启动-HomeAssistant" class="headerlink" title="b. 启动 HomeAssistant"></a>b. 启动 HomeAssistant</h4><ol><li>执行以下命令启动 HomeAssistant：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hass<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">or启动成功会帮我我们自动打开web</span><br>hass --open-ui<br></code></pre></td></tr></table></figure><p>首次启动 Home Assistant 时，系统会创建<code>~/.homeassistant</code>目录用于承载配置文件，并安装所需的基础依赖，这个过程会花费一定时间，请耐心等待（大约十分钟左右，可以去泡杯咖啡活动活动身体…</p><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-1.png" alt="首次启动HA"></p><ol start="2"><li>使用局域网内其他设备，通过浏览器访问HA页面</li></ol><p>就算过了很久，命令行也没有动静没有输出任何东西的话也不要紧，打开浏览器如<code>Edge</code>，输入<code>树莓派的ip地址:8123</code>，例如<code>192.168.137.88:8123</code>，查看是否初始化完成。</p><p>初始化完成后会进入以下页面：</p><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-2.png" alt="HA注册界面"></p><p>接下来只要按步骤注册账号填写个人信息即可进入HA界面啦！</p><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-3.png" alt="HA用户界面"></p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p><img src="/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%83%A8%E7%BD%B2HomeAssistant/image-4.png" alt="HomeAssistant logo"></p><p>鸣谢：</p><ul><li><a href="https://blog.csdn.net/qq_41793286/article/details/129041488">https://blog.csdn.net/qq_41793286/article/details/129041488</a></li><li><a href="https://blog.csdn.net/weixin_44614230/article/details/127593587">https://blog.csdn.net/weixin_44614230/article/details/127593587</a></li><li><a href="https://blog.csdn.net/ajianlee/article/details/129956339">https://blog.csdn.net/ajianlee/article/details/129956339</a></li><li><a href="https://blog.csdn.net/q1uTruth/article/details/121625560">https://blog.csdn.net/q1uTruth/article/details/121625560</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>RaspberryPi</tag>
      
      <tag>HomeAssistant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在ESP32-Arduino中使用低功耗蓝牙BLE</title>
    <link href="/2025/01/04/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99BLE/README/"/>
    <url>/2025/01/04/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99BLE/README/</url>
    
    <content type="html"><![CDATA[<h3 id="在ESP32-Arduino中使用低功耗蓝牙BLE"><a href="#在ESP32-Arduino中使用低功耗蓝牙BLE" class="headerlink" title="在ESP32-Arduino中使用低功耗蓝牙BLE"></a>在ESP32-Arduino中使用低功耗蓝牙BLE</h3><h3 id="蓝牙蓝牙！Bluetooth🟦🦷！"><a href="#蓝牙蓝牙！Bluetooth🟦🦷！" class="headerlink" title="蓝牙蓝牙！Bluetooth🟦🦷！"></a>蓝牙蓝牙！Bluetooth🟦🦷！</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以往项目中使用的蓝牙相关的例程都是一些鸡毛蒜皮的拼接，终于有空闲的时间可以来专门学习一下ESP32-Arduino中低功耗蓝牙BLE的使用方法啦，同时了解了解BLE的工作原理。</p><p><strong><em>本篇文章将简述如何迅速地学会在ESP32-Arduino中使用BLE的API。</em></strong></p><h4 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h4><ul><li>开发板：ESP32S3N16R8</li><li>开发平台：Arduino + PlatformIO + Vscode</li></ul><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99BLE/image-0.png" alt="BLE服务框图"></p><blockquote><p>BLE蓝牙服务端编程的流程：<br><strong>蓝牙设备初始化 -&gt; 创建Server -&gt; 创建Service -&gt; 创建Characteristic -&gt; 创建广播对象 -&gt; 将服务加入到广播中 -&gt; 开始广播提供服务</strong></p></blockquote><p>…</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>…</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>BLE服务端例程 - 最简      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  例2 添加自动再次广播</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *  同时只能处理一个或多个客户端</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEDevice.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEUtils.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEServer.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVICE_UUID        <span class="hljs-string">&quot;b0afd88d-5807-4533-b27b-a48cc3a32e30&quot;</span>   <span class="hljs-comment">// 服务UUID</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHARACTERISTIC_UUID <span class="hljs-string">&quot;7057310c-1e37-4a0a-9ae1-6ed8ccb995b1&quot;</span>   <span class="hljs-comment">// 特征UUID</span></span><br><br><span class="hljs-type">bool</span> isAdvertising = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 是否在广播</span><br><span class="hljs-type">int</span> clientCount = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 目前已有客户端数量</span><br><br><span class="hljs-comment">//服务器连接与断开连接回调类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServerCallbacks</span>: <span class="hljs-keyword">public</span> BLEServerCallbacks &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onConnect</span><span class="hljs-params">(BLEServer* pServer)</span> </span>&#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;client connected...&quot;</span>);<br>      clientCount++;<br>      isAdvertising = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 因为只要有客户端连上来，就会关闭广播</span><br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDisconnect</span><span class="hljs-params">(BLEServer* pServer)</span> </span>&#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;client disconnected...&quot;</span>);<br>      clientCount--;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Starting BLE work!&quot;</span>);<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>  BLEDevice::<span class="hljs-built_in">init</span>(<span class="hljs-string">&quot;Fish Fish&quot;</span>);                                         <span class="hljs-comment">// 1.初始化蓝牙设备</span><br>  BLEServer *pServer = BLEDevice::<span class="hljs-built_in">createServer</span>();                       <span class="hljs-comment">// 2.创建一个服务器</span><br>  pServer-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyServerCallbacks</span>());                       <span class="hljs-comment">// 为服务器添加回调函数</span><br><br>  BLEService *pService = pServer-&gt;<span class="hljs-built_in">createService</span>(SERVICE_UUID);          <span class="hljs-comment">// 3.创建一个服务</span><br>  BLECharacteristic *pCharacteristic = pService-&gt;<span class="hljs-built_in">createCharacteristic</span>(  <span class="hljs-comment">// 4.在服务里创建一个特征</span><br>                                         CHARACTERISTIC_UUID,<br>                                         BLECharacteristic::PROPERTY_READ |<br>                                         BLECharacteristic::PROPERTY_WRITE                                         <br>                                       );<br>  pCharacteristic-&gt;<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;Hello World.&quot;</span>);                            <span class="hljs-comment">// 给特征赋值</span><br><br><br>  pService-&gt;<span class="hljs-built_in">start</span>();                                                    <span class="hljs-comment">// 5.Service开始提供服务</span><br>  BLEAdvertising *pAdvertising = BLEDevice::<span class="hljs-built_in">getAdvertising</span>();           <span class="hljs-comment">// 获取广播器</span><br>  pAdvertising-&gt;<span class="hljs-built_in">addServiceUUID</span>(SERVICE_UUID);                           <span class="hljs-comment">// 将Service加入广播</span><br>  pAdvertising-&gt;<span class="hljs-built_in">setScanResponse</span>(<span class="hljs-literal">true</span>);                                  <span class="hljs-comment">// 允许扫描回复</span><br>  pAdvertising-&gt;<span class="hljs-built_in">setMinPreferred</span>(<span class="hljs-number">0x12</span>);<br>  BLEDevice::<span class="hljs-built_in">startAdvertising</span>();                                        <span class="hljs-comment">// 6.开始广播</span><br><br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Characteristic defined! Now you can read it in your phone!&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(BLEDevice::<span class="hljs-built_in">getInitialized</span>() &amp;&amp; !isAdvertising &amp;&amp; clientCount&lt;<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);                     <span class="hljs-comment">// 让蓝牙设备留一段处理的时间</span><br>    BLEDevice::<span class="hljs-built_in">startAdvertising</span>();  <span class="hljs-comment">// 重新开始广播</span><br>    isAdvertising = <span class="hljs-literal">true</span>;<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;start advertising&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>BLE服务端例程 - 类对象      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEDevice.h&gt;</span> <span class="hljs-comment">// 包含BLEDevice库，用于蓝牙低功耗设备的控制</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEServer.h&gt;</span> <span class="hljs-comment">// 包含BLEServer库，用于创建和管理蓝牙服务器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEUtils.h&gt;</span>  <span class="hljs-comment">// 包含BLEUtils库，提供蓝牙相关的实用工具函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLE2902.h&gt;</span>   <span class="hljs-comment">// 包含BLE2902库，用于处理蓝牙特性描述符</span></span><br><br><span class="hljs-comment">// 定义收发服务的UUID（唯一标识）</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVICE_UUID <span class="hljs-string">&quot;7F7C610C-7A86-4892-94BA-88B70DC790F5&quot;</span></span><br><span class="hljs-comment">// RX串口标识</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHARACTERISTIC_UUID_RX <span class="hljs-string">&quot;C02E69C2-E503-43F8-A74D-B95C1F5AF088&quot;</span></span><br><span class="hljs-comment">// TX串口标识</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHARACTERISTIC_UUID_TX <span class="hljs-string">&quot;D914E6B6-509C-4803-9FB5-9454782478A6&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Define the way to format logout</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LOG(format, args...) printf(format, ##args)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HugoBLE</span> : <span class="hljs-keyword">public</span> BLEServerCallbacks, <span class="hljs-keyword">public</span> BLECharacteristicCallbacks<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">bool</span> _isConnected = <span class="hljs-literal">false</span>;                      <span class="hljs-comment">// 标记蓝牙设备是否已连接</span><br>    <span class="hljs-type">bool</span> _isInitialized = <span class="hljs-literal">false</span>;                    <span class="hljs-comment">// 标记蓝牙设备是否已初始化</span><br>    BLEServer *pServer = <span class="hljs-literal">nullptr</span>;                   <span class="hljs-comment">// 创建全局BLE服务器指针</span><br>    BLECharacteristic *pTxCharacteristic = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 创建全局传输特性指针，用于数据传输</span><br>    std::string deviceName = <span class="hljs-string">&quot;HugoBLE&quot;</span>;             <span class="hljs-comment">// 蓝牙设备的名称</span><br>    std::string rxBle;                              <span class="hljs-comment">// 接收到的蓝牙数据</span><br>    std::string txBle;                              <span class="hljs-comment">// 要发送的蓝牙数据</span><br>    std::queue&lt;std::string&gt; dataQueue;              <span class="hljs-comment">// 字符串队列，用于存储接收到的数据</span><br><br>    <span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">HugoBLE</span>(std::string deviceName = <span class="hljs-string">&quot;hugoBleDevice&quot;</span>);<br>    ~<span class="hljs-built_in">HugoBLE</span>() &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">begin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">end</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(std::string deviceName)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;deviceName = deviceName; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onConnect</span><span class="hljs-params">(BLEServer *pServer)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDisconnect</span><span class="hljs-params">(BLEServer *pServer)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onWrite</span><span class="hljs-params">(BLECharacteristic *pCharacteristic)</span></span>;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><br>HugoBLE::<span class="hljs-built_in">HugoBLE</span>(std::string deviceName) : <span class="hljs-built_in">deviceName</span>(std::<span class="hljs-built_in">string</span>(deviceName).<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>))<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::begin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!_isInitialized)<br>    &#123;<br>        _LOG(<span class="hljs-string">&quot;[BLE] BLE init begin!\n&quot;</span>);<br><br>        <span class="hljs-comment">// 初始化BLE设备，设置设备名称为&quot;HugoBLE&quot;</span><br>        BLEDevice::<span class="hljs-built_in">init</span>(<span class="hljs-string">&quot;HugoBLE&quot;</span>);<br>        <span class="hljs-comment">// 创建BLE服务实例</span><br>        pServer = BLEDevice::<span class="hljs-built_in">createServer</span>();<br>        <span class="hljs-comment">// 设置服务器的回调函数（onConnect(), onDisconnect()）</span><br>        pServer-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 创建指定UUID的服务</span><br>        BLEService *pService = pServer-&gt;<span class="hljs-built_in">createService</span>(SERVICE_UUID);<br>        <span class="hljs-comment">// 创建具有通知属性的传输特征</span><br>        pTxCharacteristic = pService-&gt;<span class="hljs-built_in">createCharacteristic</span>(CHARACTERISTIC_UUID_TX, BLECharacteristic::PROPERTY_NOTIFY);<br>        <span class="hljs-comment">// 为传输特征添加2902描述符，告诉客户端启用Notify服务</span><br>        pTxCharacteristic-&gt;<span class="hljs-built_in">addDescriptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">BLE2902</span>());<br>        <span class="hljs-comment">// 创建具有写属性的接收特征</span><br>        BLECharacteristic *pRxCharacteristic = pService-&gt;<span class="hljs-built_in">createCharacteristic</span>(CHARACTERISTIC_UUID_RX, BLECharacteristic::PROPERTY_WRITE);<br>        <span class="hljs-comment">// 设置接收特征的回调函数（onWrite()）</span><br>        pRxCharacteristic-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">this</span>);<br><br>        pService-&gt;<span class="hljs-built_in">start</span>();                  <span class="hljs-comment">// 启动服务</span><br>        pServer-&gt;<span class="hljs-built_in">getAdvertising</span>()-&gt;<span class="hljs-built_in">start</span>(); <span class="hljs-comment">// 开始广播</span><br><br>        _isInitialized = <span class="hljs-literal">true</span>;<br><br>        _LOG(<span class="hljs-string">&quot;[BLE] BLE init successed!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        _LOG(<span class="hljs-string">&quot;[BLE] BLE has been init!\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::end</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::loop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 检查队列是否有数据</span><br>    <span class="hljs-keyword">while</span> (!dataQueue.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-comment">// 获取队列中的数据</span><br>        std::string data = dataQueue.<span class="hljs-built_in">front</span>();<br>        <span class="hljs-comment">// 移除队列中的数据</span><br>        dataQueue.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// 将写入的值赋给私有变量rxBle</span><br>        rxBle = data;<br>        <span class="hljs-comment">// 对数据进行处理</span><br>        <span class="hljs-built_in">process</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 蓝牙事件处理</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::process</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 当设备与服务器连接时调用的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::onConnect</span><span class="hljs-params">(BLEServer *pServer)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_isConnected = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 设置蓝牙设备连接状态为已连接</span><br>&#125;<br><br><span class="hljs-comment">// 当设备与服务器断开连接时调用的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::onDisconnect</span><span class="hljs-params">(BLEServer *pServer)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_isConnected = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 设置蓝牙设备连接状态为断开连接</span><br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">300</span>);                  <span class="hljs-comment">// 延迟一段时间，以便蓝牙控制器处理缓冲区</span><br>    pServer-&gt;<span class="hljs-built_in">startAdvertising</span>(); <span class="hljs-comment">// 启动蓝牙广播，以便其他设备可以重新发现并连接</span><br>&#125;<br><br><span class="hljs-comment">// 当接收到蓝牙写入请求时调用的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HugoBLE::onWrite</span><span class="hljs-params">(BLECharacteristic *pCharacteristic)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::string rxStr = pCharacteristic-&gt;<span class="hljs-built_in">getValue</span>(); <span class="hljs-comment">// 获取写入的值</span><br><br>    <span class="hljs-comment">// 如果写入的值不为空且长度小于 rxValue 的大小</span><br>    <span class="hljs-keyword">if</span> (!rxStr.<span class="hljs-built_in">empty</span>() &amp;&amp; rxStr.<span class="hljs-built_in">length</span>() &lt; rxBle.<span class="hljs-built_in">max_size</span>())<br>    &#123;<br>        <span class="hljs-comment">// 将数据加入队列</span><br>        dataQueue.<span class="hljs-built_in">push</span>(rxStr);<br>        <span class="hljs-comment">// 打印接收到的数据</span><br>        _LOG(<span class="hljs-string">&quot;[BLE] RX: %s\n&quot;</span>, rxStr.<span class="hljs-built_in">c_str</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>BLE服务端例程 - 特征回调例子      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  例5 特征回调例子</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEDevice.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEUtils.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEServer.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;AsyncTimer.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLE2902.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;BLEUUID.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVICE_UUID        <span class="hljs-string">&quot;b0afd88d-5807-4533-b27b-a48cc3a32e30&quot;</span>   <span class="hljs-comment">//服务UUID</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHARACTERISTIC_UUID <span class="hljs-string">&quot;7057310c-1e37-4a0a-9ae1-6ed8ccb995b1&quot;</span>   <span class="hljs-comment">//特征UUID</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COUNT_CHARACTERISTIC_UUID <span class="hljs-string">&quot;37582929-48c3-4dd0-8e4f-0b29c5640489&quot;</span> <span class="hljs-comment">//计数器特征</span></span><br><br><span class="hljs-type">uint32_t</span> value = <span class="hljs-number">0</span>;<br>BLECharacteristic *countCharacteristic = <span class="hljs-literal">NULL</span>;<br>AsyncTimer t;<br><br><span class="hljs-type">bool</span> isAdvertising = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//是否在广播</span><br><span class="hljs-type">int</span> clientCount = <span class="hljs-number">0</span>;    <span class="hljs-comment">//目前已有客户端数量</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCharacteristicCallbacks</span>: <span class="hljs-keyword">public</span> BLECharacteristicCallbacks&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">onRead</span><span class="hljs-params">(BLECharacteristic* pCharacteristic, <span class="hljs-type">esp_ble_gatts_cb_param_t</span>* param)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">auto</span> p = param-&gt;read;<br>    <span class="hljs-keyword">auto</span> conn_id = p.conn_id;<br>    <span class="hljs-function">BLEAddress <span class="hljs-title">address</span><span class="hljs-params">(p.bda)</span></span>;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Read.. %d, %s\r\n&quot;</span>, conn_id, address.<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>());<br>  &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">onWrite</span><span class="hljs-params">(BLECharacteristic* pCharacteristic, <span class="hljs-type">esp_ble_gatts_cb_param_t</span>* param)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">auto</span> p = param-&gt;read;<br>    <span class="hljs-keyword">auto</span> conn_id = p.conn_id;<br>    <span class="hljs-function">BLEAddress <span class="hljs-title">address</span><span class="hljs-params">(p.bda)</span></span>;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Write.. %d, %s\r\n&quot;</span>, conn_id, address.<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>());<br>  &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">onNotify</span><span class="hljs-params">(BLECharacteristic* pCharacteristic)</span></span><br><span class="hljs-function">  </span>&#123;<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;notify...&quot;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySecurity</span> : <span class="hljs-keyword">public</span> BLESecurityCallbacks &#123;<br>  <span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">onPassKeyRequest</span><span class="hljs-params">()</span></span>&#123;<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;PassKeyRequest!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">334455</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//显示本机要求的静态码</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onPassKeyNotify</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pass_key)</span></span>&#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;On passkey Notify number:%d&quot;</span>, pass_key);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">onSecurityRequest</span><span class="hljs-params">()</span></span>&#123;<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;On Security Request!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//认证结果</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onAuthenticationComplete</span><span class="hljs-params">(<span class="hljs-type">esp_ble_auth_cmpl_t</span> cmpl)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(cmpl.success)&#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;onAuthenticationComplete!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;onAuthentication not Complete!&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//显示动态码并确定是否同意配对</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">onConfirmPIN</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> pin)</span></span>&#123;<br>    Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;onConfirmPIN %d !&quot;</span>, pin);<br>    <span class="hljs-comment">//return false;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//返回true同意配对，返回false拒绝配对</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">//服务器连接与断开连接回调类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServerCallbacks</span>: <span class="hljs-keyword">public</span> BLEServerCallbacks &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onConnect</span><span class="hljs-params">(BLEServer* pServer)</span> </span>&#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;client connected...&quot;</span>);<br>      clientCount++;<br>      isAdvertising = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//因为只要有客户端连上来，就会关闭广播</span><br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDisconnect</span><span class="hljs-params">(BLEServer* pServer)</span> </span>&#123;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;client disconnected...&quot;</span>);<br>      clientCount--;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Starting BLE work!&quot;</span>);<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>  BLEDevice::<span class="hljs-built_in">init</span>(<span class="hljs-string">&quot;Fish Fish&quot;</span>);                    <span class="hljs-comment">//初始化蓝牙设备</span><br>  BLEDevice::<span class="hljs-built_in">setEncryptionLevel</span>(ESP_BLE_SEC_ENCRYPT_MITM);<br>  BLEDevice::<span class="hljs-built_in">setSecurityCallbacks</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MySecurity</span>());<br><br>  BLESecurity *pSecurity = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BLESecurity</span>();<br>  pSecurity-&gt;<span class="hljs-built_in">setStaticPIN</span>(<span class="hljs-number">112233</span>);  <span class="hljs-comment">//这个是设置静态密码</span><br>  <br>  <span class="hljs-keyword">auto</span> local_address = BLEDevice::<span class="hljs-built_in">getAddress</span>();    <span class="hljs-comment">//获取本机地址</span><br>  Serial.<span class="hljs-built_in">println</span>(local_address.<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>());<br>  BLEServer *pServer = BLEDevice::<span class="hljs-built_in">createServer</span>();  <span class="hljs-comment">//创建一个服务器</span><br>  pServer-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyServerCallbacks</span>());<br><br>  BLEService *pService = pServer-&gt;<span class="hljs-built_in">createService</span>(SERVICE_UUID);   <span class="hljs-comment">//创建一个服务</span><br>  BLECharacteristic *pCharacteristic = pService-&gt;<span class="hljs-built_in">createCharacteristic</span>(    <span class="hljs-comment">//在服务里创建一个特征</span><br>                                         CHARACTERISTIC_UUID,<br>                                         BLECharacteristic::PROPERTY_READ |<br>                                         BLECharacteristic::PROPERTY_WRITE                                         <br>                                       );<br>  pCharacteristic-&gt;<span class="hljs-built_in">setAccessPermissions</span>(ESP_GATT_PERM_READ_ENCRYPTED | ESP_GATT_PERM_WRITE_ENCRYPTED);<br>  pCharacteristic-&gt;<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;Hello World.&quot;</span>);        <span class="hljs-comment">//给特征赋值</span><br>  pCharacteristic-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyCharacteristicCallbacks</span>());<br><br>  countCharacteristic = pService-&gt;<span class="hljs-built_in">createCharacteristic</span>(<br>                                         COUNT_CHARACTERISTIC_UUID,<br>                                         BLECharacteristic::PROPERTY_READ |<br>                                         BLECharacteristic::PROPERTY_NOTIFY |<br>                                         BLECharacteristic::PROPERTY_INDICATE<br>                                       );<br>  countCharacteristic-&gt;<span class="hljs-built_in">setValue</span>(value);<br>  countCharacteristic-&gt;<span class="hljs-built_in">addDescriptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">BLE2902</span>());  <span class="hljs-comment">//要启用notify和indicate的都要添加这个描述符</span><br><span class="hljs-comment">// 上下两种添加描述符的写法都可以</span><br><span class="hljs-comment">//   BLEDescriptor *pDescriptor = new BLEDescriptor(BLEUUID((uint16_t)0x2902)); </span><br><span class="hljs-comment">//   countCharacteristic-&gt;addDescriptor(pDescriptor);  </span><br><br>  BLEDescriptor *pCountName = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BLEDescriptor</span>(<span class="hljs-built_in">BLEUUID</span>((<span class="hljs-type">uint16_t</span>)<span class="hljs-number">0x2901</span>));<br>  pCountName-&gt;<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;My Counter&quot;</span>);<br>  countCharacteristic-&gt;<span class="hljs-built_in">addDescriptor</span>(pCountName);<br>  countCharacteristic-&gt;<span class="hljs-built_in">setCallbacks</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyCharacteristicCallbacks</span>());<br><br>  pService-&gt;<span class="hljs-built_in">start</span>();    <span class="hljs-comment">//Service开始提供服务</span><br>  BLEAdvertising *pAdvertising = BLEDevice::<span class="hljs-built_in">getAdvertising</span>();      <span class="hljs-comment">//获取广播器</span><br>  pAdvertising-&gt;<span class="hljs-built_in">addServiceUUID</span>(SERVICE_UUID);                      <span class="hljs-comment">//将Service加入广播</span><br>  pAdvertising-&gt;<span class="hljs-built_in">setScanResponse</span>(<span class="hljs-literal">true</span>);                             <span class="hljs-comment">//允许扫描回复</span><br>  pAdvertising-&gt;<span class="hljs-built_in">setMinPreferred</span>(<span class="hljs-number">0x12</span>);<br>  BLEDevice::<span class="hljs-built_in">startAdvertising</span>();                                   <span class="hljs-comment">//开始广播</span><br><br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Characteristic defined! Now you can read it in your phone!&quot;</span>);<br><br>  <span class="hljs-comment">//每3秒计数器加1，并发通知</span><br>  t.<span class="hljs-built_in">setInterval</span>([]&#123;<br>    value++;<br>    <span class="hljs-keyword">if</span>(countCharacteristic &amp;&amp; clientCount&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>      countCharacteristic-&gt;<span class="hljs-built_in">setValue</span>(value);<br>      countCharacteristic-&gt;<span class="hljs-built_in">notify</span>();  <span class="hljs-comment">//发通知</span><br>      <span class="hljs-comment">//countCharacteristic-&gt;indicate();</span><br>    &#125;<br>  &#125;, <span class="hljs-number">3000</span>);<br><br>  <span class="hljs-comment">//处理自动广播问题</span><br>  t.<span class="hljs-built_in">setInterval</span>([]&#123;<br>    <span class="hljs-keyword">if</span>(BLEDevice::<span class="hljs-built_in">getInitialized</span>() &amp;&amp; !isAdvertising &amp;&amp; clientCount&lt;<span class="hljs-number">1</span>)<br>    &#123;<br>      <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);  <span class="hljs-comment">//让蓝牙设备留一段处理的时间</span><br>      BLEDevice::<span class="hljs-built_in">startAdvertising</span>();  <span class="hljs-comment">//重新开始广播</span><br>      isAdvertising = <span class="hljs-literal">true</span>;<br>      Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;start advertising&quot;</span>);<br>    &#125;<br>  &#125;, <span class="hljs-number">50</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>  t.<span class="hljs-built_in">handle</span>();<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><div class="note note-success">            <p>未完待续…</p>          </div><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>鸣谢以下教程：</p><p>小鱼的教程涵盖了编写BLE蓝牙服务端时的大部分情况，豁然开朗。<br>koolins对小鱼的教程做了大致的总结，快速写出代码。</p><ul><li>@小鱼创意：<a href="https://www.bilibili.com/video/BV1XD4y1K7xW">https://www.bilibili.com/video/BV1XD4y1K7xW</a></li><li>@koolins：<a href="https://www.bilibili.com/video/BV1iPs6efEu1">https://www.bilibili.com/video/BV1iPs6efEu1</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>Arduino</tag>
      
      <tag>BLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对Qt项目进行打包的三种方式</title>
    <link href="/2025/01/02/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/README/"/>
    <url>/2025/01/02/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/README/</url>
    
    <content type="html"><![CDATA[<h3 id="对Qt项目进行打包的三种方式"><a href="#对Qt项目进行打包的三种方式" class="headerlink" title="对Qt项目进行打包的三种方式"></a>对Qt项目进行打包的三种方式</h3><h4 id="PPPack！一处打包到处运行！"><a href="#PPPack！一处打包到处运行！" class="headerlink" title="PPPack！一处打包到处运行！"></a>PPPack！一处打包到处运行！</h4><h4 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h4><div class="note note-success">            <p>首先！是来到了2025年！新年快乐各位！🥳🐍</p>          </div><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>先前，我有使用Qt写过一些项目，类似<code>EasyGPS</code>的上位机<a href="https://zhangkeliang0627.github.io/2024/09/02/%E5%9F%BA%E4%BA%8EQt%E4%B8%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91MQTT%E7%9A%84EasyMap/README/">EasyGPS-MAP</a>，然后我发现我每一回要向他人展示的时候都需要打开<code>Qt Creater</code>然后重新编译一下这个项目才行（而且在Windows中打开Qt<strong>真的很慢</strong>，显然这种操作是不够优雅的，同时我有在别的电脑环境运行上位机的需要。基于以上诉求，这篇文章将会记录三种对Qt项目进行打包的方式！</p><p><strong><em>本篇文章将简述如何迅速地对Qt项目进行打包。</em></strong></p><h4 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h4><ul><li>电脑环境：Windows 11</li><li>Qt版本：5.14.1</li></ul><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h3 id="1-打包成绿色便携版本"><a href="#1-打包成绿色便携版本" class="headerlink" title="1. 打包成绿色便携版本"></a>1. 打包成绿色便携版本</h3><blockquote><p>特点：无需安装，可以制作成为一个压缩包文件来转发给别人，解压即用。</p></blockquote><ol><li><p>首先，将项目的编译版本修改为<code>Release</code>，然后执行一次编译运行。这里不是必须要改，只是修改后发布的软件体积比较小，推荐使用<code>Release</code>.</p></li><li><p>然后找到编译输出的目录类似<code>/build-EasyGPS-Map-Desktop_Qt_5_14_1_MSVC2017_64bit-Release</code>，然后进入<code>release</code>文件夹.</p></li><li><p>把<code>release</code>文件夹中除了.exe文件以外的所有文件都删除，当然你也可以不删除，只不过会徒增内存，对功能无影响.</p></li></ol><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/对Qt项目进行打包的三种方式/image-1.png" alt="---" width = "800" height = "350" style="border-radius: 10px;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/对Qt项目进行打包的三种方式/image-2.png" alt="---" width = "800" height = "350" style="border-radius: 10px;"></div></div></div><ol><li><p>根据你的<strong>编译Kit</strong>打开对应的<strong>命令行工具</strong>，比方说我这里使用的是<code>MSVC2017_64bit</code>进行的编译，那我就选择如图所示的工具：</p><!-- ![](images/对Qt项目进行打包的三种方式/image-3.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-3.png"></p></li><li><p>打开对应的命令行工具，cd到对应的<code>release</code>文件夹，然后执行<code>windeployqt + xxxname.exe</code>.</p></li></ol><blockquote><p>这里记录在windows命令行使用<code>cd</code>命令的小技巧，倘若你仅仅在一个盘内进行cd（如只在C盘、只在D盘，正常<code>cd + address</code>即可。<br>如果你要跨盘cd（如从C盘到D盘，此时需要<code>cd /d + address</code>，或者先敲一个<code>D: + 回车键</code>切换盘符，然后正常cd。</p></blockquote><!-- ![](images/对Qt项目进行打包的三种方式/image-4.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-4.png"></p><p>然后Qt自带的工具程序，会把该.exe文件缺失的库文件补充齐全，如下图。此时你就可以双击打开该.exe文件，惊喜地发现，它可以直接运行啦！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/对Qt项目进行打包的三种方式/image-5.png" alt="---" width = "400" height = "230" style="border-radius: 10px;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/对Qt项目进行打包的三种方式/image-6.png" alt="---" width = "400" height = "230" style="border-radius: 10px;"></div></div></div><ol start="6"><li>接着，你可以单独将这个<code>release</code>文件夹压缩成压缩包发送给别人，解压即用！非常舒适！</li></ol><h3 id="2-打包成单文件版本"><a href="#2-打包成单文件版本" class="headerlink" title="2. 打包成单文件版本"></a>2. 打包成单文件版本</h3><blockquote><p>特点：给他人发送一个包含运行环境的.exe文件，双击即用！无需压缩or解压。</p></blockquote><p><strong>首先，你需要对Qt项目做<code>打包成绿色便携版本</code>的操作！</strong></p><p>这里使用软件<code>Enigma Virtual Box</code>进行Qt项目的封包，该软件官网下载地址：<a href="https://www.enigmaprotector.com/en/downloads.html">https://www.enigmaprotector.com/en/downloads.html</a></p><div class="note note-warning">            <p>我的电脑环境是Windows 11，我选择64位的版本，然后下载安装时一路<code>next</code>就行，没什么特别的操作。</p>          </div><ol><li>打开软件<code>Enigma Virtual Box</code>，选择等待封包的主程.</li></ol><!-- ![](images/对Qt项目进行打包的三种方式/image-7.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-7.png"></p><ol><li>选择<code>增加...</code>-&gt;<code>增加文件夹[递归]</code>，选择<code>release</code>文件夹，点击<code>确定</code>.</li></ol><!-- ![](images/对Qt项目进行打包的三种方式/image-8.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-8.png"></p><ol start="3"><li>点击<code>文件选项</code>-&gt;<code>压缩文件</code>，然后点击<code>确定</code>.</li></ol><!-- ![](images/对Qt项目进行打包的三种方式/image-9.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-9.png"></p><ol start="4"><li>最后，点击<code>执行封包</code>.</li></ol><!-- ![](images/对Qt项目进行打包的三种方式/image-10.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%AF%B9Qt%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/image-10.png"></p><ol start="5"><li>然后在<code>release</code>文件夹下会多出来一个<code>xxxname_boxed.exe</code>结尾的.exe文件啦！</li></ol><div class="note note-warning">            <p>不过请<strong>注意</strong>，如果你的Qt项目包含了类似<code>QtWebEngineWidgets</code>等模块，可能会导致封包失败或者封包之后的文件不可用！最好还是使用<code>打包成绿色便携版本</code>的方法吧，这个方法十分稳妥！</p>          </div><h3 id="3-打包成可安装版本"><a href="#3-打包成可安装版本" class="headerlink" title="3. 打包成可安装版本"></a>3. 打包成可安装版本</h3><p>…</p><div class="note note-info">            <p>未完待续…</p>          </div><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>鸣谢以下教程：</p><ul><li>视频教程：<a href="https://www.bilibili.com/video/BV1cB4aeHEHr">https://www.bilibili.com/video/BV1cB4aeHEHr</a></li><li>图文教程：<a href="https://blog.csdn.net/KK_2018/article/details/131899658">https://blog.csdn.net/KK_2018/article/details/131899658</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于STM32和SimpleFOC的EasyFOC矢量控制器</title>
    <link href="/2024/12/27/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/README/"/>
    <url>/2024/12/27/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/README/</url>
    
    <content type="html"><![CDATA[<h3 id="基于STM32和SimpleFOC的EasyFOC矢量控制器"><a href="#基于STM32和SimpleFOC的EasyFOC矢量控制器" class="headerlink" title="基于STM32和SimpleFOC的EasyFOC矢量控制器"></a>基于STM32和SimpleFOC的EasyFOC矢量控制器</h3><h4 id="基于STM32F401的迷你FOC矢量控制驱动器，巨小而且五脏俱全😆"><a href="#基于STM32F401的迷你FOC矢量控制驱动器，巨小而且五脏俱全😆" class="headerlink" title="基于STM32F401的迷你FOC矢量控制驱动器，巨小而且五脏俱全😆"></a>基于STM32F401的迷你FOC矢量控制驱动器，巨小而且五脏俱全😆</h4><h4 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h4><hr><p><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/image-0.jpg" alt="EasyFOC"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div class="note note-info">            <p>本项目基于：<strong>SimpleFOC</strong> &amp; <strong>Ctrl-FOC-Lite</strong></p>          </div><p>Github关联仓库：<a href="https://github.com/ZhangKeLiang0627/EasyFOC">https://github.com/ZhangKeLiang0627/EasyFOC</a><br>立创硬件开源：<a href="https://oshwhub.com/hugego/easyfoc">https://oshwhub.com/hugego/easyfoc</a></p><blockquote><p>本项目<code>EasyFOC</code>旨意用于学习FOC时对SimpleFOC算法的验证，感谢@loop222提供的系列移植教程：<a href="https://blog.csdn.net/loop222/article/details/119220638">戳这里:)</a></p></blockquote><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><h4 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h4><ul><li><ol><li>主控：STM32F401RET6</li></ol></li><li><ol start="2"><li>屏幕：SSD1312 Oled 0.96inch IIC接口 128x64分辨率</li></ol></li><li><ol start="3"><li>电机驱动：DRV8313</li></ol></li><li><ol start="4"><li>电流采样：INA240A2</li></ol></li><li><ol start="5"><li>蓝牙通信：KT6368A</li></ol></li><li><ol start="6"><li>串口通信：CH340N</li></ol></li><li><ol start="7"><li>外壳：3D打印</li></ol></li></ul><h4 id="Snapshots"><a href="#Snapshots" class="headerlink" title="Snapshots"></a>Snapshots</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/基于STM32和SimpleFOC的EasyFOC矢量控制器/image-1.jpg" alt="PCB-Front" width = "300" height = "300" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/基于STM32和SimpleFOC的EasyFOC矢量控制器/image-2.jpg" alt="PCB-Back" width = "300" height = "300" style="border-radius: 15px;"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/基于STM32和SimpleFOC的EasyFOC矢量控制器/image-4.jpg" alt="PCB-Front" width = "300" height = "300" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/基于STM32和SimpleFOC的EasyFOC矢量控制器/image-5.jpg" alt="PCB-Back" width = "300" height = "300" style="border-radius: 15px;"></div></div></div><p><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/image-3.jpg" alt="3D-Shell"></p><h3 id="Firmware"><a href="#Firmware" class="headerlink" title="Firmware"></a>Firmware</h3><h4 id="软件功能"><a href="#软件功能" class="headerlink" title="软件功能"></a>软件功能</h4><ul><li>目前已经实现<strong>小功率无刷电机的位置、角度开闭环控制，适配了电流环的代码，可以正常运行。</strong> </li><li>支持使用串口进行有线调试或者使用<strong>蓝牙</strong>进行无线调试。</li><li>支持3S航模锂电池接入（12.6V &#x2F; XT60接口）.</li><li>板载Oled、两颗实体按钮以及蜂鸣器方便于人机交互。</li><li>引出一路IIC接口和一路SPI接口。</li><li>引出SWD烧录口，方便使用<code>ST-Link</code>or<code>DAP-Link</code>进行程序烧录。</li></ul><h4 id="Showcases"><a href="#Showcases" class="headerlink" title="Showcases"></a>Showcases</h4><ul><li><p>力矩测试 - Torque<br><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/torque.gif" alt="torque"></p></li><li><p>速度测试 - Velocity<br><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/velocity.gif" alt="velocity"></p></li><li><p>角度测试 - Angle<br><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/angle.gif" alt="Angle"></p></li><li><p>速度迅速转向测试 - Velocity hard test<br><img src="/images/%E5%9F%BA%E4%BA%8ESTM32%E5%92%8CSimpleFOC%E7%9A%84EasyFOC%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6%E5%99%A8/velocity_hard_test.gif" alt="Velocity hard test"></p></li></ul><h4 id="待改进"><a href="#待改进" class="headerlink" title="待改进"></a>待改进</h4><ul><li>该款MCU并不支持CAN通信（sad:(</li><li><code>STM32F401</code>计算速度有限，驱动电机的同时驱动Oled稍显吃力，更换为<code>STM32F405</code>可能会更好，而且解决了没有CAN的问题。</li><li>…</li></ul><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>相关文章参考：</p><ul><li>@稚晖君：<a href="https://zhihui.lingjun.life/2020/07/02/foc/">https://zhihui.lingjun.life/2020/07/02/foc/</a></li><li>@loop222：<a href="https://blog.csdn.net/loop222/article/details/119220638">https://blog.csdn.net/loop222/article/details/119220638</a></li><li>@SimpleFOC：<a href="http://simplefoc.cn/#/">http://simplefoc.cn/#/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Project Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>Project</tag>
      
      <tag>SimpleFOC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在全志T113-S3的TinaLinux上运行LVGL</title>
    <link href="/2024/12/22/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/README/"/>
    <url>/2024/12/22/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/README/</url>
    
    <content type="html"><![CDATA[<h3 id="在全志T113-S3的TinaLinux上运行LVGL"><a href="#在全志T113-S3的TinaLinux上运行LVGL" class="headerlink" title="在全志T113-S3的TinaLinux上运行LVGL"></a>在全志T113-S3的TinaLinux上运行LVGL</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h3><div class="note note-success">            <p>大家看这篇文章之前，要先去看我先前的文章<code>全志T113-S3的TinaLinux编译流程记录</code>搭建好基本环境，<a href="https://zhangkeliang0627.github.io/2024/11/24/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/">戳这儿直接跳转:)</a></p>          </div><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>T113-s3</strong>是<strong>全志</strong>的一款非常不错的能够跑Linux系统的Soc，该芯片采用<strong>双核A7</strong>，<strong>主频高达1.2GHz</strong>，具备<strong>高效能</strong>和<strong>低功耗</strong>的特点，<strong>片上内存128MB</strong>，<strong>支持硬件解码</strong>，和D1s Pin to Pin，支持相互替换支持全志提供的Tina Linux SDK，文档齐全，对于DIY玩家来说用于制作一些带显示屏的小设备是非常完美了。</p><p>前阵子在“海鲜市场”低价入了韦东山的T113-s3的开发板，经过一番摸索以后发现了TinaLinux这个新奇的东西，听说是全志基于<code>Openwrt</code>自研的系统（被戏谑为全志家的小女儿。</p><p><strong><em>本篇文章将简述如何迅速地在Tina Linux运行LVGL。</em></strong></p><h4 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h4><ul><li>虚拟机：VirtualBox Ubuntu 18.04</li><li>开发板：100ASK_T113-PRO</li></ul><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="打开TinaLinux的menuconfig"><a href="#打开TinaLinux的menuconfig" class="headerlink" title="打开TinaLinux的menuconfig"></a>打开TinaLinux的menuconfig</h4><p>首先我们要进入TinaLinux-SDK的根目录，<code>cd ~/tina-d1-h</code>并执行以下命令来设置环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">book@ubuntu1804:~/tina-d1-h$ source build/envsetup.sh<br>Setup env done! Please run lunch next.<br>book@ubuntu1804:~/tina-d1-h$ lunch<br><br>You&#x27;re building on Linux<br><br>Lunch menu... pick a combo:<br>     1. d1-h_nezha_min-tina<br>     2. d1-h_nezha-tina<br>     3. d1s_nezha-tina<br>     4. t113_nezha-tina<br><br>Which would you like?: 4<br>============================================<br>TINA_BUILD_TOP=/home/book/tina-d1-h<br>TINA_TARGET_ARCH=arm<br>TARGET_PRODUCT=t113_nezha<br>TARGET_PLATFORM=t113<br>TARGET_BOARD=t113-nezha<br>TARGET_PLAN=nezha<br>TARGET_BUILD_VARIANT=tina<br>TARGET_BUILD_TYPE=release<br>TARGET_KERNEL_VERSION=5.4<br>TARGET_UBOOT=u-boot-2018<br>TARGET_CHIP=sun8iw20p1<br>============================================<br>no buildserver to clean<br>[1] 35382<br><br>book@ubuntu1804:~/tina-d1-h$ make menuconfig<br></code></pre></td></tr></table></figure><blockquote><ol><li>进入TinaLinux-SDK根目录<code>cd ~/tina-d1-h</code></li><li><code>source build/envsetup.sh</code></li><li><code>lunch</code>，并选择T113平台名称</li><li><code>make menuconfig</code></li></ol></blockquote><h4 id="修改TinaLinux的LVGL配置"><a href="#修改TinaLinux的LVGL配置" class="headerlink" title="修改TinaLinux的LVGL配置"></a>修改TinaLinux的LVGL配置</h4><p>由于TinaLinux是适配了<code>littleVGL-v8</code>的，因此我们只需要在menuconfig当中将其开启即可使用啦！</p><p>按照下方步骤，打开对应的选项，然后保存退出即可！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gui ---&gt;<br>    Littlevgl ---&gt;<br>        &lt; &gt; lv_demo<br>        &lt;*&gt; lv_examples （lvgl官方demo）<br>        -*- lvgl-8.1.0 use sunxifb double buffer （使能双缓冲，解决撕裂问题）<br>        [*] lvgl-8.1.0 use sunxifb cache （使能fb cache）<br>        [ ] lvgl-8.1.0 use sunxifb g2d （使能G2D硬件加速）<br>        [ ] lvgl-8.1.0 use sunxifb g2d rotate （使能G2D硬件旋转）<br>        [ ] lvgl-8.1.0 use freetype （自动链接freetype）<br>        &lt;*&gt; lv_g2d_test （g2d接口测试用例）<br>        &lt;*&gt; lv_monitor （压力测试与数据监测软件）<br>        &lt; &gt; smartva<br>        &lt; &gt; smartva_ota<br></code></pre></td></tr></table></figure><p>LVGL的源码路径：<code>tina-d1-h/package/gui/littlevgl-8</code></p><h4 id="重新编译内核"><a href="#重新编译内核" class="headerlink" title="重新编译内核"></a>重新编译内核</h4><p>在以上的修改都完成以后，重新按照正常的流程编译即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">内核编译</span><br>book@ubuntu1804:~/tina-d1-h$ source build/envsetup.sh<br>book@ubuntu1804:~/tina-d1-h$ lunch 4<br>book@ubuntu1804:~/tina-d1-h$ make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译完成后，打包镜像</span><br>book@ubuntu1804:~/tina-d1-h$ pack<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>注意：<code>pack</code>命令在打包镜像的时候，有可能会遇到dl包过大的报错，如下：</p>          </div><!-- ![alt text](images/在全志T113-S3的TinaLinux上运行LVGL/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-1.png" alt="alt text"></p><p>这是因为内核编译时开启了LVGL的package，导致编译生成的<code>rootfs.fex</code>包大于设定的最大尺寸限制。因此，需要修改一下最大尺寸的设置，修改路径如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gedit ~/tina-d1-h/device/config/chips/t113/configs/100ask/sys_partition.fex</span><br>vim ~/tina-d1-h/device/config/chips/t113/configs/100ask/sys_partition.fex<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改为如下的参数，增加rootfs分区容量</span><br>[partition]<br>    name         = rootfs<br>    size         = 74800<br>    downloadfile = &quot;rootfs.fex&quot;<br>    user_type    = 0x8000<br></code></pre></td></tr></table></figure><p>修改后，重新执行<code>pack</code>即可！</p><h4 id="测试LVGL"><a href="#测试LVGL" class="headerlink" title="测试LVGL"></a>测试LVGL</h4><p>将新生成的img镜像烧录到TF卡，将内存卡插入开发板，上电进入系统以后执行指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">~：lv_examples 0  (lv_demo_widgets)<br>~：lv_examples 1  (lv_demo_music)<br>~：lv_examples 2  (lv_demo_benchmark)<br>~：lv_examples 3  (lv_demo_keypad_encoder)<br>~：lv_examples 4  (lv_demo_stress)<br>~：lv_monitor<br></code></pre></td></tr></table></figure><h4 id="加入触摸支持"><a href="#加入触摸支持" class="headerlink" title="加入触摸支持"></a>加入触摸支持</h4><div class="note note-info">            <p>按照上述方法一路走来，虽然LVGL的几个示例程序已经可以在开发板上运行了，但是无法通过触摸控制，因此接下来，我们为程序加入触摸支持吧！</p>          </div><h5 id="修改TinaLinux的内核触摸配置"><a href="#修改TinaLinux的内核触摸配置" class="headerlink" title="修改TinaLinux的内核触摸配置"></a>修改TinaLinux的内核触摸配置</h5><p>配置内核增加电容屏驱动<code>GT911</code>：</p><blockquote><ol><li>进入TinaLinux-SDK根目录<code>cd ~/tina-d1-h</code></li><li><code>source build/envsetup.sh</code></li><li><code>lunch</code>，并选择T113平台名称</li><li><code>make kernel_menuconfig</code></li></ol></blockquote><p>然后如下面这些图一样，把对应的选项都打上<code>*</code>：</p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-2.png"></div><div class="group-image-wrap"><img src="/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-3.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-4.png"></div><div class="group-image-wrap"><img src="/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-5.png"></div><div class="group-image-wrap"><img src="/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-6.png"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-2.png"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-3.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-4.png"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-5.png"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-6.png"></div></div></div><h5 id="为LVGL的lv-drv-conf-h添加触摸屏控制"><a href="#为LVGL的lv-drv-conf-h添加触摸屏控制" class="headerlink" title="为LVGL的lv_drv_conf.h添加触摸屏控制"></a>为LVGL的<code>lv_drv_conf.h</code>添加触摸屏控制</h5><p>在<code>tina-d1-h/package/gui/littlevgl-8/lv_examples/src/lv_drv_conf.h</code>中修改<code>EVDEV_NAME</code>为触摸屏的<code>event</code>节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"># lv_drv_conf.h<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> USE_EVDEV</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> USE_EVDEV           1</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> USE_BSD_EVDEV</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> USE_BSD_EVDEV       0</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_EVDEV || USE_BSD_EVDEV</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> EVDEV_NAME   <span class="hljs-string">&quot;/dev/input/event1&quot;</span>        <span class="hljs-comment">/*You can use the &quot;evtest&quot; Linux tool to get the list of devices and test them*/</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> EVDEV_SWAP_AXES         0               <span class="hljs-comment">/*Swap the x and y axes of the touchscreen*/</span></span><br></code></pre></td></tr></table></figure><p>这个地方一般情况下<code>event1</code>节点就是我们的触摸输入节点啦，或者你可以自行去查看：<code>event</code>可以在开发板的linux系统中使用<code>cat /dev/input/eventX</code>(X请用数字替代)，确认是否正确.</p><p>最后没什么问题，就重新正常的编译内核，然后烧录，然后运行LVGL示例程序看看触摸效果啦！</p><h5 id="触摸测试"><a href="#触摸测试" class="headerlink" title="触摸测试"></a>触摸测试</h5><p>查看输入节点：<code>cat /proc/bus/input/devices</code></p><!-- ![查看输入节点](images/在全志T113-S3的TinaLinux上运行LVGL/image-7.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/image-7.png" alt="查看输入节点"></p><p>查看原始触摸数据：<code>hexdump /dev/input/event1</code></p><p>查看中断：<code>cat /proc/interrupts</code></p><h4 id="adb命令（这里临时穿插一条，不然以后找不到"><a href="#adb命令（这里临时穿插一条，不然以后找不到" class="headerlink" title="adb命令（这里临时穿插一条，不然以后找不到"></a>adb命令（这里临时穿插一条，不然以后找不到</h4><ul><li><p><code>adb devices</code>，该命令用于查找已经连接上Ubuntu系统上的adb设备.</p></li><li><p><code>adb push</code>，该命令用于<strong>将Ubuntu系统上的文件上传到开发板</strong>，比如:</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb push demo  /tmp<br></code></pre></td></tr></table></figure><p>这表示将Ubuntu系统内当前目录下的<code>demo</code>文件上传到开发板的<code>/tmp</code>目录下.</p><ul><li><code>adb pull</code>，该命令用于<strong>从开发板获取文件到Ubuntu系统上</strong>，比如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb pull /tmp/demo .<br></code></pre></td></tr></table></figure><p>这表示下载开发板中的<code>/tmp/demo</code>文件到当前目录下.</p><hr><div class="note note-success">            <p>如果你想要做自己的一些LVGL的开发，在TinaLinux上开发自己的LVGL项目，可以参照这篇文章：<a href="https://allwinner-docs.100ask.net/Application/LVGL8-UI/100ASK_T113-PRO_01-Introduction.html">click here!</a></p>          </div><p>我的T113-s3的LVGL-Tamplate（经过<a href="https://github.com/DongshanPI/T113-lv_port_linux_frame_buffer">100ask原仓库的LVGL模板</a>修改而来：<a href="https://zhangkeliang0627.github.io/images/%E5%9C%A8%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E4%B8%8A%E8%BF%90%E8%A1%8CLVGL/t113s3_lv_tamplate.zip">-&gt; chilk here for download (24.4MB)!!!</a></p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>鸣谢以下教程：</p><ul><li><a href="https://blog.csdn.net/weixin_43482414/article/details/139090866">https://blog.csdn.net/weixin_43482414/article/details/139090866</a></li><li><a href="https://blog.csdn.net/noabcd32/article/details/130602900">https://blog.csdn.net/noabcd32/article/details/130602900</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lvgl</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Allwinner</tag>
      
      <tag>T113-s3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨12月：最终幻想...</title>
    <link href="/2024/12/03/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/12%E6%9C%88/README/"/>
    <url>/2024/12/03/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/12%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨12月：最终幻想…"><a href="#杂记丨12月：最终幻想…" class="headerlink" title="杂记丨12月：最终幻想…"></a>杂记丨12月：最终幻想…</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><div class="note note-info">            <p>博客成立一周年啦！这里的冬天也要来到，安啦我们一定都可以平安顺遂🎄🎅！！！</p>          </div><figure><img src="/images/杂记/2024年/12月/image-1.jpg" alt="摄于大师兄：小野人筷子筒" width = "400" height = "300" style="border-radius: 15px;"><figcaption>摄于大师兄：小野人筷子筒</figcaption></figure><p>今年和好友圆拢共吃了三顿大师兄啦hahaha，它们的米饭真的很香很香，小野人筷子筒是成双对的，还有一个带着墨镜的小野人，没拍到，稍有遗憾！</p><hr><h3 id="2024-12-22-看，其实也没有那么难，对吧？"><a href="#2024-12-22-看，其实也没有那么难，对吧？" class="headerlink" title="2024&#x2F;12&#x2F;22 - 看，其实也没有那么难，对吧？"></a>2024&#x2F;12&#x2F;22 - 看，其实也没有那么难，对吧？</h3><p>12月22日下午5时7分，随着老师们停止上下翻飞清点试卷，一声如释重负的：「好了，可以走了」，我见睹人群如河流，如堤坝泄洪，湍急地，头也不回地，要离开这里，离开这个为生活按下暂停键的地方，静默无声…</p><p><strong>看，其实也没有那么难，对吧？</strong></p><p>维持了大半年的情绪的压抑，劳累的眼神，努力，后悔，担心与焦虑，似乎在一瞬间烟消云散。</p><p><strong>看，其实也没有那么难，对吧？</strong></p><p>第二天，我拽上背包踏进了星期一的欢乐谷，我从来没有逛过这么空旷的游乐园，也是第一次觉得欢乐谷竟然这么小！一遍遍地坐上孤零零的过山车，也一遍遍浏览着热火朝天的招聘软件，最终在摇摇晃晃的海盗船上，我收到了第一份面试机会。</p><p><strong>看，其实也没有那么难，对吧？</strong></p><p>几个月前急忙得焦头烂额的毕设，不出一周竟然已经逐步成型，实现功能…做完了。</p><p><strong>看，其实也没有那么难，对吧？</strong></p><p>晕头转向的十二月的尾巴，没有按计划飞往云南，也没有大事发“声”，但是，我能够感受到开心了，这非常重要。</p><p><strong>看，其实也没有那么难，对吧？</strong></p><p>…</p><h3 id="2024-12-31-年终总结"><a href="#2024-12-31-年终总结" class="headerlink" title="2024&#x2F;12&#x2F;31 - 年终总结"></a>2024&#x2F;12&#x2F;31 - 年终总结</h3><p>年终总结，每年终末想要是不是该要为当年度过的种种做好记录的时候，脑袋像是失忆了一般，什么也想不起来，也就不做了，今年不行这样，大个人了，要学会总结生活。</p><p>我原意希望这篇总结能够以粤语的声音念出来，就好像会显得更加轻松愉快一些haha，打住，明年或许可以有…</p><p>先来说说，我为今年选择的三个关键词：不确定性、暂停、选择。</p><p>对于关键词，其中受到考研的影响蛮大的，我的考研是从七月开始的，从7月9日一直持续到12月22日，早上九点到实验室，晚上十点回寝室，总共166天。</p><p>我始终很犟地认为考研的这些日子，我的人生似乎被按下了暂停键，漫漫的日子里，睁眼背书写题，闭眼背书写题，就像是回到了高中时期那样，混沌、迷茫。坦白地说，我是由内心排斥考试的，首先我会害怕自己考不好，然后我会去想学这些考这些东西到底有什么用。</p><p>当然会有朋友这么说：既然你这么不喜欢，为什么还要去考研呢？</p><p>To be honest，真的做不到，而且我考研的理由比较现实，不为学术只为文凭。我没有什么学术追求其实，七月的时候有想过先去工作，但是发现自己学习的东西和自己想要的工作岗位所需的技术栈还有很大的差距，靠读研延期三年补足短板在那时的我看来是一个可选的策略，原因就是这么简单。只是现在回过头来想，为什么当初甚至没有勇气先投出第一份简历，进行第一次面试，先试试看？这是我觉得非常遗憾的一件事，万一呢？万一通过了，或许我会坚决选择工作吧…</p><p>然后考研真的真的是一个战线很长的决定，年末考试意味着，在这之前，你会收到朋友或许保研上岸的消息，或许秋招上岸的消息。等到大家都陆陆续续找到了自己的确定的方向的时候，你我考研人仍然置身于摇摇欲坠地不确定感当中，每一天都是新的崩溃。我记得11月的时候常常哭泣，尤其是写题的feedback达不到自己的预期要求的时候，不自觉想到万一考不上怎么办呢？就仿佛天都要塌下来一般（笑。</p><p>嗯…当然也有比较心情愉快的时候，我印象很深刻的考研前一天是冬至，我一个人早早七点钟起床，搭上人满为患的地铁，来到深圳湾公园，什么也不做，什么也没想，走走停停，在公园的长椅上休憩，晒了一上午的太阳，浑身都暖烘烘的。这种看起来不合时宜的行为，反而让我找回了孩童时代的某种叛逆，找回了一些人生的掌握感，realize reality truly.</p><p>翻翻回忆：</p><p>一月，二月，过年，我讨厌过年，讨厌走亲戚，讨厌应酬式的喝酒…</p><p>三月，「🐙张宇考研数学基础30讲」到了货，但一直没揭开塑封，堆放在地上。中旬频繁的雨季，流水漫入实验室，全然浸透地板包括书和装着元器件的箱子在内都无一幸免，🐙吐出了黑墨，原本的每页白纸晾干后都不免留下斑斑点点的霉印。</p><p>四月，<code>EasyGPS</code>开始创造！</p><p>五月，最后一次小组作业，我讨厌小组作业！</p><p>六月，期末考试月，我讨厌考试！没有任何缘由开始酗咖啡，每天要喝很多很多才行，心跳变得很大声…</p><p>七月，开始频繁地使用博客，开始和圆泡图书馆，我学高数，它背八股，不过总是学了一会儿或者背了一会儿就要外出，去这找吃那找吃的，七月终于吃遍了整个校园。我和圆一致认为北图外的风景更加美丽，到时候毕业要带爸妈来这边逛逛，拍拍照。但是一听到南图要关门维修，又有些舍不得，毕竟南图更好“睡”！</p><p>八月，第一天去大梅沙看海踩沙，和老友出门放风，好好地休息了一番。中旬期待着的livehouse如期而至，没想到居然做出“边等开场边背单词”的唐突的事情。</p><p>九月，发誓不要成为咖啡因的奴隶，开始尝试拒绝喝一切形式的咖啡，痘痘也变好了些，听说是因为喝咖啡容易上火，从此不喝咖啡的心又坚定。又是新学期开学季，每天自习“听取绿豆蛙蛙声一片”。我也特讨厌军训，每次经历军训的时候总是非常难熬，但是该“蛙”的时候，又一次不敢落下（笑</p><p>十月，回家，但没几天马上又遭不住要跑回学校里来，我还是不爱回家。每周六傍晚饭后常常到附近的深圳湾公园散步，这个时候总感觉吵闹的人群成为了能量的源泉。海边总有人抓着把吉他唱歌，安静徜徉，海平面远方剩下一点赧赧的落日，还有很多的blue。只有在时，放声大笑、聊天似乎是绝对被允许的事情。下旬，被圆拉上一起看LPL打LCK，最终全华班还是没有胜利，圆苦恼了好久。</p><p>十一月，在学习崩溃边缘ab，每次要受不了的时候，又自顾提醒自己就差这么一点点：谁放弃谁是大笨蛋。实验室外什么时候多了一个圆桌，记得九月份的时候就是在那里和咱导师提前规划预留好了一个研究生工位份额，现在到底用不用的上呢…？</p><p>十二月，考完试的第二天是冬至，去了游乐园，冷冷清清。去年的冬至和椅子乐团一起在livehouse唱歌。我始终更爱过圣诞节，嘴上这么说着，什么时候到了平安夜，什么时候该吃苹果也不清楚。晚上庆祝考研结束，和研友去吃了一家云南菜。上菜前，端上来一只苹果形状的奶黄包，我们欣然接受！</p><p>我实在想不到还有什么比考研的日子更加无趣单薄，它吃掉了时间，吐出的却是一些不确定的未来。现在我很确定，这种日子不会是我想要的，我不再幻想啦。</p><p>没想到这么快就来到了二零二四年的尾巴，它到底是什么形状呢，很难否定我觉得我的今年是乏善可陈的，什么也没有发生，什么也没有留下。但是总归要记得什么吧…唯有记录才能证明我在二零二四真正生存。</p><p>…</p><p>我突然想起「蓝色大门」中的台本：</p><ul><li><span class="label label-success">「好不甘心喔，整个夏天都快过完了，好像什么事都没有做。」</span></li><li><span class="label label-info">「对啊，好像就只是跑来跑去，什么事都没有做。」</span></li><li><span class="label label-success">「但总是会留下些什么吧，留下什么，我们就变成什么样的大人。」</span></li></ul><p><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/12%E6%9C%88/image-2.png"></p><!-- 热力图的挂件 --><script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script><div id="posts-chart"style="border-radius: 8px; height: 190px; padding: 10px;"></div><!-- Sakana鱼的挂件 --><link  rel="stylesheet"  href="https://cdn.jsdelivr.net/npm/sakana-widget@2.7.0/lib/sakana.min.css"/><div id="sakana-widget" style="position: fixed; right: 20px; top: 50%; transform: translateY(-50%); z-index: 1000;"></div><script>  function initSakanaWidget() {    new SakanaWidget().mount('#sakana-widget');  }</script><script  async  onload="initSakanaWidget()"  src="https://cdn.jsdelivr.net/npm/sakana-widget@2.7.0/lib/sakana.min.js"></script><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>很简单，最终幻想其实就是…我不再幻想。</p><p><em><strong>「正因为我们足够乐观和自信，才可以直面悲剧。」</strong></em></p><div class="note note-success">            <p><strong>We Wish You a Merry Christmas!</strong></p>          </div><p>…</p><hr>]]></content>
    
    
    <categories>
      
      <category>Life Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全志T113-s3的TinaLinux编译流程记录</title>
    <link href="/2024/11/24/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/README/"/>
    <url>/2024/11/24/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/README/</url>
    
    <content type="html"><![CDATA[<h3 id="全志T113-S3的TinaLinux编译流程记录"><a href="#全志T113-S3的TinaLinux编译流程记录" class="headerlink" title="全志T113-S3的TinaLinux编译流程记录"></a>全志T113-S3的TinaLinux编译流程记录</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h3><div class="note note-success">            <p>挖坑ing…有空来填坑！！！</p>          </div><div class="note note-info">            <p>填好啦:)</p>          </div><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>T113-s3</strong>是<strong>全志</strong>的一款非常不错的能够跑Linux系统的Soc，该芯片采用<strong>双核A7</strong>，<strong>主频高达1.2GHz</strong>，具备<strong>高效能</strong>和<strong>低功耗</strong>的特点，<strong>片上内存128MB</strong>，<strong>支持硬件解码</strong>，和D1s Pin to Pin，支持相互替换支持全志提供的Tina Linux SDK，文档齐全，对于DIY玩家来说用于制作一些带显示屏的小设备是非常完美了。</p><p>前阵子在“海鲜市场”低价入了韦东山的T113-s3的开发板，经过一番摸索以后发现了TinaLinux这个新奇的东西，听说是全志基于<code>Openwrt</code>自研的系统（被戏谑为全志家的小女儿。</p><p><strong><em>本篇文章将简述如何迅速地对Tina Linux进行编译、打包，最终生成可烧录的镜像。</em></strong></p><h4 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h4><ul><li>虚拟机：VirtualBox Ubuntu 18.04</li><li>开发板：100ASK_T113-PRO</li></ul><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="获取SDK源码"><a href="#获取SDK源码" class="headerlink" title="获取SDK源码"></a>获取SDK源码</h4><p>首先我们需要获取<code>Tina-sdk</code>的源码：</p><blockquote><p>百度网盘获取地址链接：<a href="https://pan.baidu.com/s/13uKlqDXImmMl9cgKc41tZg?pwd=qcw7">https://pan.baidu.com/s/13uKlqDXImmMl9cgKc41tZg?pwd=qcw7</a> 提取码：qcw7</p></blockquote><ol><li><p>下载完成后将包含所有压缩文件的<code>DongshanNezhaSTU-TinaV2.0-SDK</code>文件夹拷贝到Ubuntu系统中，注意请不要在共享文件夹当中直接解压，要先拷贝到Linux系统目录中。位置可以随意，这里为了方便演示，我直接拷贝到Ubuntu系统的<code>~</code>目录下。</p></li><li><p>进入该文件夹<code>cd ~/DongshanNezhaSTU-TinaV2.0-SDK/</code>并执行如下解压缩命令<code>cat tina-d1-h.tar.bz2.* | tar -jxv</code>，等待解压缩完成（大致要 3 ~ 5 分钟。</p></li><li><p>把解压缩出的文件夹移动到<code>~</code>目录下：<code>mv ~/DongshanNezhaSTU-TinaV2.0-SDK/tina-d1-h ~</code></p></li></ol><h4 id="配置ubuntu环境"><a href="#配置ubuntu环境" class="headerlink" title="配置ubuntu环境"></a>配置ubuntu环境</h4><p>接着，我们配置开发环境，这里以<code>Ubuntu 18.04</code>举例，执行以下命令:<br><code>sudo apt-get install build-essential subversion git libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip lib32z1 lib32z1-dev lib32stdc++6 libstdc++6 libc6:i386 libstdc++6:i386 lib32ncurses5 lib32z1 -y</code></p><h4 id="获取补丁包"><a href="#获取补丁包" class="headerlink" title="获取补丁包"></a>获取补丁包</h4><p>SDK源码解压缩完毕后，我们获取扩展支持仓库（因为SDK源码不适配T113，要打个补丁，让源码支持T113，然后加以应用，依旧是在<code>~</code>目录下按顺序执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">book@ubuntu1804:~$ git clone https://github.com/DongshanPI/100ASK_T113-Pro_TinaSDK.git<br>book@ubuntu1804:~$ cd 100ASK_T113-Pro_TinaSDK<br>book@ubuntu1804:~/100ASK_T113-Pro_TinaSDK$ git submodule update --init<br>book@ubuntu1804:~/100ASK_T113-Pro_TinaSDK$ cp ./* -rfvd ~/tina-d1-h<br>book@ubuntu1804:~/100ASK_T113-Pro_TinaSDK$ sync<br></code></pre></td></tr></table></figure><h4 id="配置单板编译"><a href="#配置单板编译" class="headerlink" title="配置单板编译"></a>配置单板编译</h4><p>应用完成，可以进入之前解压缩过的<code>tina-d1-h</code>的sdk目录内<code>cd ~/tina-d1-h/</code>，执行如下命令来开始编译<code>T113 Tina-SDK</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">book@ubuntu1804:~/tina-d1-h$ source build/envsetup.sh<br>Setup env done! Please run lunch next.<br>book@ubuntu1804:~/tina-d1-h$ lunch<br><br>You&#x27;re building on Linux<br><br>Lunch menu... pick a combo:<br>     1. d1-h_nezha_min-tina<br>     2. d1-h_nezha-tina<br>     3. d1s_nezha-tina<br>     4. t113_nezha-tina<br><br>Which would you like?: 4<br>============================================<br>TINA_BUILD_TOP=/home/book/tina-d1-h<br>TINA_TARGET_ARCH=arm<br>TARGET_PRODUCT=t113_nezha<br>TARGET_PLATFORM=t113<br>TARGET_BOARD=t113-nezha<br>TARGET_PLAN=nezha<br>TARGET_BUILD_VARIANT=tina<br>TARGET_BUILD_TYPE=release<br>TARGET_KERNEL_VERSION=5.4<br>TARGET_UBOOT=u-boot-2018<br>TARGET_CHIP=sun8iw20p1<br>============================================<br>no buildserver to clean<br>[1] 35382<br><br>book@ubuntu1804:~/tina-d1-h$ make<br></code></pre></td></tr></table></figure><p>编译时间比较漫长，单核编译大概要 40 ~ 60 分钟…<strong>途中可能会出现让你填写<code>[Y/n]</code>的情况，会填就按照自己的需求来填，不会填就全部填<code>n</code>，影响不大的。</strong></p><p>编译成功的现象：</p><!-- ![编译成功](images/全志T113-S3的TinaLinux编译流程记录/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/image.png" alt="编译成功"></p><p><strong>但是编译总不是一帆风顺的，我在这儿也花费了不少时间来解决一些报错问题，下面一一罗列出来：</strong></p><p><strong>问题1.</strong> <code>~/tina-d1-h/out/t113-100ask/compile_dir/target/fontconfig-2.13.1/missing: line 81: gperf: command not found</code>：具体错误是缺少 <code>gperf</code> 工具。</p><p><strong>解决方法</strong>：<code>sudo apt-get install gperf</code>，通过系统的软件包管理工具来安装<code>gperf</code>.</p><p><strong>问题2.</strong> Tina-Linux尝试下载<code>qt-5.12.9.tar.xz</code>失败。</p><p><strong>解决方法</strong>：因为我使用T113s3主要还是使用LVGL图形库的，跑Qt还是比较吃力，于是干脆就不编译Qt了，具体方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">book@ubuntu1804:~/tina-d1-h$ make menuconfig<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">找到 gui -&gt; Qt，进入其中并把所有的 [*] 都取消，保存并退出，然后重新编译make。</span><br></code></pre></td></tr></table></figure><h4 id="烧写更新系统"><a href="#烧写更新系统" class="headerlink" title="烧写更新系统"></a>烧写更新系统</h4><p>编译完成后，执行<code>pack</code>命令即可开始打包系统操作，打包完成后，最后会提示<code>pack finish</code>以及使用<strong>红色背景色</strong>告诉你最终输出的镜像文件。</p><p>我们可以通过 <code>ssh / vmware</code> 拖拽等工具，将生成的镜像文件 <code>copy</code> 出来使用即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">book@ubuntu1804:~/tina-d1-h$ pack<br></code></pre></td></tr></table></figure><p>打包成功的现象：</p><!-- ![打包成功](images/全志T113-S3的TinaLinux编译流程记录/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/image-1.png" alt="打包成功"></p><p>烧写方式有两种，一种是使用OTG线连接板子进行烧写，使用<code>PhoenixSuit</code>将编译生成的镜像烧录至<code>spi nand</code>存储设备上；另一种是通过<a href="https://gitlab.com/dongshanpi/tools/-/raw/main/PhoenixCard-V2.8.zip">PhoenixCard-V2.8</a>工具将系统镜像烧录至TF卡启动。</p><blockquote><p>先使用<code>SD Card Formatter</code>将TF卡进行格式化，然后使用<code>PhoenixCard-V2.8</code>对TF卡进行烧写，操作如图所示：</p></blockquote><!-- ![PhoenixCard-V2.8](images/全志T113-S3的TinaLinux编译流程记录/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%85%A8%E5%BF%97T113-S3%E7%9A%84TinaLinux%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/image-2.png" alt="PhoenixCard-V2.8"></p><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>鸣谢以下教程：</p><ul><li><a href="https://github.com/DongshanPI/100ASK_T113-Pro_TinaSDK">https://github.com/DongshanPI/100ASK_T113-Pro_TinaSDK</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Allwinner</tag>
      
      <tag>T113-s3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Ubuntu对Lvgl进行simulate - LVGL Simulator</title>
    <link href="/2024/11/23/%E4%BD%BF%E7%94%A8Ubuntu%E5%AF%B9Lvgl%E8%BF%9B%E8%A1%8Csimulate%20-%20LVGL%20Simulator/README/"/>
    <url>/2024/11/23/%E4%BD%BF%E7%94%A8Ubuntu%E5%AF%B9Lvgl%E8%BF%9B%E8%A1%8Csimulate%20-%20LVGL%20Simulator/README/</url>
    
    <content type="html"><![CDATA[<h3 id="使用Ubuntu对Lvgl进行simulate-LVGL-Simulator"><a href="#使用Ubuntu对Lvgl进行simulate-LVGL-Simulator" class="headerlink" title="使用Ubuntu对Lvgl进行simulate - LVGL Simulator"></a>使用Ubuntu对Lvgl进行simulate - LVGL Simulator</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h3><div class="note note-success">            <p>挖坑ing…有空来填坑！！！</p>          </div><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近看到很多LVGL的项目都改用<code>Ubuntu</code>来编译<code>Simulator</code>，一开始还是有些不太习惯<code>CMake</code>的这种方式，后面习惯了以后是真香呢！再也不用为不同的环境版本而担心，再也不用依赖任何<code>IDE</code>，一键编译，一键执行，是极简的优雅！</p><p><em>本篇文章将简述如何迅速地使用Ubuntu搭建出LVGL的项目模拟程序。</em></p><hr><p>…</p><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>…</p><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lvgl</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨11月：你想活出怎样的人生？</title>
    <link href="/2024/11/19/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/11%E6%9C%88/README/"/>
    <url>/2024/11/19/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/11%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨11月：你想活出怎样的人生？"><a href="#杂记丨11月：你想活出怎样的人生？" class="headerlink" title="杂记丨11月：你想活出怎样的人生？"></a>杂记丨11月：你想活出怎样的人生？</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>混沌、迷茫、怀疑、灯光、勇气、坚毅、追寻，你想活出怎样的人生？</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/11月/Warawara-1.gif" alt="Warawara" width = "300" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/11月/Warawara-2.gif" alt="Warawara" width = "300" height = "200" style="border-radius: 15px;"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/11月/image-0.jpg" alt="秋天摄于天桥" width = "300" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/11月/image-3.jpg" alt="「苍鹭与少年」" width = "300" height = "200" style="border-radius: 15px;"></div></div></div><hr><h3 id="Little-Miss-Sunshine"><a href="#Little-Miss-Sunshine" class="headerlink" title="Little Miss Sunshine"></a>Little Miss Sunshine</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 50%;">    <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=38852212&bvid=BV1Wt411k7gW&cid=68287647&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div><p><br></br></p><h3 id="2024-11-24-走错路就是走对路"><a href="#2024-11-24-走错路就是走对路" class="headerlink" title="2024&#x2F;11&#x2F;24 - 走错路就是走对路"></a>2024&#x2F;11&#x2F;24 - 走错路就是走对路</h3><div class="note note-success">            <p>是写于九月中旬啦其实。</p>          </div><p>这几年发现自己越来越变得现实，从前那些觉得很理想化的事物常常挂在嘴边的现在竟然都完全记不得了。刷题漫漫，我挂着李诞直播卖货，听着唠叨了几句人生观，不知不觉就记了下来，「充满期待，降低预期；永远坚持，随时放弃」。</p><p>他的直播间的受众群体年龄和我大相径庭，于是乎解答了许多这个年龄段人生问题，我觉得很受用，至少迷茫焦虑最近很少找上门，但是不代表我不感到忧愁，只是没时间想啦…</p><p>好朋友们在准备秋招、考公和考研。实验室里，七月的考研圈好友信誓旦旦互相激励，然而人影全无。在上个礼拜保研名单公布那一刻全面崩溃，邻桌的同事与保研失之交臂，第二天跑来跟我说，他不考了，想要找份工，想要赚钱去。我内心百感交集，明明他暑假为了保研干了整整两个月的义工，四月份开始上下奔走又是考研背书复习，又是保研准备材料。</p><p>我为他感到可惜，那时我还是一个意志摇摆不定的工作党。我们立场从对立来到相同，最终又回到对立。待到我艰难地做出选择升学的决定，他倒是反过来问我：「咱们考研也只是为了三年以后可以找到一份好工作对吧，如果现在本科毕业已经能够找到心仪的工作，那又何必非得考研呢？对吧？」</p><p>我觉得他在搬起石头砸自己的脚，明明几个月前他不是这幅嘴脸，他的那声 “对吧” 像是在哀求着务必请我表示赞同以给他一点精神支柱。我并没有讽刺他的意思，只是令我感到不可思议的是为什么他可以态度转变的这么快。我说我已经allin考研了，我也在赌，一起加油吧，我们这么年轻，无论干什么都是错的，走错路就是走对路，尽管去尝试，努力就好。</p><p>对啊，我们这么年轻，二十几岁的年纪，这么青春活力，却像是被什么东西困住了，仿佛每一岁都要比之前有进步才是有意义的人生，这样实在是太累了。于是我又想起李诞那句话「对人生要永远充满期待，但是要降低预期；或者可以这么说，你得永远坚持，随时放弃」。</p><p>好友圆九月初开始准备秋招了，他手上稳稳捏着两份大厂实习经历，周末我们常常一起泡图书馆，他和我聊了许多关于在大厂工作的经历。最近边在字节实习边等着简历投递回执，他老是焦虑，每次有电话打来都要正襟危坐，害怕错过任何一个HR发来的面试邀请。我说：「圆，你呀，放宽心吧，绝对能够去到大厂的。到时候base腾讯了记得帮我内推噢！」每次听到类似的话，他总是笑着摸摸鼻子：「哎呀，等到真的进腾讯先吧，现在还悬着呢」，但我觉得他眼底有光。</p><p>我说，读研有个好处，就是我现在这种清澈愚蠢的心境还可以再维持多几年。看看你哟，已经变成职场老油条啦。互相打趣着，他说，没事，我如果还base南山，周末说不定还能和你泡泡图书馆，补充补充清澈的能量哈。</p><p>眼看着身边的人都找到了更加遥远的方向，倒是我的未来，朋友四向奔走，在更远的地方，各自努力安好。能看见的最好的终局，就是我留在原地，在这里，在这所已经生活了四年的大学，继续耕读研学，完成我最后的使命，真正留下自己的足迹吧…</p><div class="note note-info">            <p>然而，显然那时候的我似乎没有意识到考研巨大的沉没成本和冗长的战线。待到两个同事都通过了华为的面试，泡进了华为的池子；身边关于秋招的喜讯频传，而我还在死磕习题无法脱身时，我似乎萌生出一个可恨的想法：要是我七月的时候选择去工作实习，我肯定也可以……</p><p>Anyway，我们总会美化那条从没涉足的道路对吧？那时的我也不会想到，两个月后，在多个下着冷雨的夜晚，这位选择考研的年轻人会蹲坐在实验室的门外倚着墙壁偷偷抹着眼泪低声啜泣，如果如果如果…事实上，不可能也没那么多如果。</p><p>走错路就是走对路，我一直用这句话来安慰自己，轻轻地呢喃着，这是二一年高考前在某个周末下午的茶餐厅里父亲跟我说的为数不多有用的大道理。</p><p>Ps：圆最终收到了他心目中的Offer！我衷心地为他感到开心。他笑着说：我的好消息已经来了，接下来就是等你的好消息啦！加油!</p>          </div><script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script><div id="posts-chart"style="border-radius: 8px; height: 190px; padding: 10px;"></div><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>我想研究生考试结束后去坐一次过山车hhh，最好再拽上行李搭乘飞往云南的飞机，什么也不想地看山看水（为什么是云南呢，是实验室的一个朋友家就住在云南，对我一番极力的安利。</p><p>回来好好思考以后的路，或许我会去实习一段时间？可能我真的更加适合工作，反正认识我的朋友都这么说…？当然我还是希望考试这边能够有一个好的结果，但无论好坏，我应该要做到平静地接受它，然后快速地做出决策，大不了换一条新的路嘛。</p><p><strong><em>噢，我的朋友，走错路就是走对路！</em></strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>Life Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用DAPLink+OpenOCD解除MCU的Flash读保护</title>
    <link href="/2024/10/14/%E4%BD%BF%E7%94%A8DAPLink+OpenOCD%E8%A7%A3%E9%99%A4MCU%E7%9A%84Flash%E8%AF%BB%E4%BF%9D%E6%8A%A4/README/"/>
    <url>/2024/10/14/%E4%BD%BF%E7%94%A8DAPLink+OpenOCD%E8%A7%A3%E9%99%A4MCU%E7%9A%84Flash%E8%AF%BB%E4%BF%9D%E6%8A%A4/README/</url>
    
    <content type="html"><![CDATA[<h3 id="使用DAPLink-OpenOCD解除MCU的Flash读保护"><a href="#使用DAPLink-OpenOCD解除MCU的Flash读保护" class="headerlink" title="使用DAPLink+OpenOCD解除MCU的Flash读保护"></a>使用DAPLink+OpenOCD解除MCU的Flash读保护</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天在使用<code>Keil5</code>烧录STM32单片机代码的时候突然弹框警告：<code>Error : Flash Download failed - &quot;Cortex-M4&quot;</code> or <code>RDDI-DAP error</code>，这个错误多数是因为MCU在烧录过程中受到意外干扰，自行开启了Flash读保护导致的。</p><p>曾经我也不少时候遇到过这种情况，那时候的解决办法是利用烧录软件<code>flymcu</code>通过串口清除全部Flash内容，进而消除读保护；或者使用ST-Link搭配官方软件<code>STM32 ST-LINK Utility</code>来消除读保护。</p><p>但是现在我手里只有DAPLink（ga…，于是绞尽脑汁搜寻方法，苦闷了好久。突然间想到似乎可以尝试一下<code>OpenOCD</code>，于是抱着实验的心态，我搜罗了大量相关的内容后，得到了以下的解决办法。</p><h3 id="下载OpenOCD"><a href="#下载OpenOCD" class="headerlink" title="下载OpenOCD"></a>下载OpenOCD</h3><p>由于我当前的系统环境是<code>Win 11</code>，于是OpenOCD应该选择<code>Download pre-built OpenOCD for Windows</code>，选择任何版本都不影响最终效果，选择最新的版本即可。</p><!-- ![下载OpenOCD](images/使用DAPLink与OpenOCD解除MCU的Flash读保护/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E4%BD%BF%E7%94%A8DAPLink%E4%B8%8EOpenOCD%E8%A7%A3%E9%99%A4MCU%E7%9A%84Flash%E8%AF%BB%E4%BF%9D%E6%8A%A4/image.png" alt="下载OpenOCD"></p><p>下载网址：<a href="https://gnutoolchains.com/arm-eabi/openocd/">https://gnutoolchains.com/arm-eabi/openocd/</a></p><h3 id="解除Flash读保护"><a href="#解除Flash读保护" class="headerlink" title="解除Flash读保护"></a>解除Flash读保护</h3><p>下载并且解压好OpenOCD压缩包以后，连接好单片机和DAPLink。</p><div class="note note-warning">            <p>注意：解压文件路径尽量不要夹带中文或者特殊标点字符，以避免可能出现意外的错误。</p>          </div><p>接着在路径<code>\OpenOCD-20240916-0.12.0\bin</code>下打开命令行，输入命令：<code>.\openocd -f interface/cmsis-dap.cfg -f target/stm32f4x.cfg -c init -c &quot;reset halt&quot; -c &quot;stm32f4x unlock 0&quot; -c &quot;reset halt&quot; -c &quot;exit&quot;</code>.</p><p>这时如果生成以下日志，则代表Flash读保护解除成功，可以重新使用<code>Keil</code>进行程序的烧录啦：</p><!-- ![](images/使用DAPLink与OpenOCD解除MCU的Flash读保护/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E4%BD%BF%E7%94%A8DAPLink%E4%B8%8EOpenOCD%E8%A7%A3%E9%99%A4MCU%E7%9A%84Flash%E8%AF%BB%E4%BF%9D%E6%8A%A4/image-1.png"></p><p>如果没有成功，请检查单片机和DAPLink的连线。</p><div class="note note-success">            <p>由于我使用的单片机型号是<code>STM32F401RET6</code>，所以我选择了<code>target/stm32f4x.cfg</code> &amp; <code>stm32f4x</code>，你可以在该路径<code>\OpenOCD-20240916-0.12.0\share\openocd\scripts\target</code>找到适合你的单片机型号的对应文件，市面上大部分的单片机型号的对应文件应该都能够在这儿找到。</p>          </div><h3 id="最后一件事（重要👀"><a href="#最后一件事（重要👀" class="headerlink" title="最后一件事（重要👀"></a>最后一件事（重要👀</h3><p>使用DAPLink+OpenOCD解除MCU的Flash读保护可能会导致Keil在程序烧录时出现<code>Verify failed</code>的情况，这并不影响程序的正常烧录，手动给单片机复位一下就行，只是有点不优雅，如果可以的话后面拿ST-Link重新再执行一次Flash解除读保护就最好了（谁叫人家是官方…</p><p>当然也有可能只是单纯烧录频率太快了，在魔术棒的<code>Debug-&gt;CMSIS-DAP Debugger-&gt;Settings</code>设置中，将频率调整到<code>1MHz</code>，报错的警告就消失啦！</p><!-- !["Verify failed"的解决办法](images/使用DAPLink与OpenOCD解除MCU的Flash读保护/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E4%BD%BF%E7%94%A8DAPLink%E4%B8%8EOpenOCD%E8%A7%A3%E9%99%A4MCU%E7%9A%84Flash%E8%AF%BB%E4%BF%9D%E6%8A%A4/image-2.png" alt="&quot;Verify failed&quot;的解决办法"></p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><ul><li>感谢教程: <a href="https://bbs.21ic.com/icview-3335340-1-1.html">https://bbs.21ic.com/icview-3335340-1-1.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCU</tag>
      
      <tag>OpenOCD</tag>
      
      <tag>DAPLink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨10月：思乡只是一个情绪</title>
    <link href="/2024/09/22/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/10%E6%9C%88/README/"/>
    <url>/2024/09/22/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/10%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨10月：思乡只是一个情绪"><a href="#杂记丨10月：思乡只是一个情绪" class="headerlink" title="杂记丨10月：思乡只是一个情绪"></a>杂记丨10月：思乡只是一个情绪</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>十月是金秋，国庆快到了，这些天学到烦的时候就总趴窗口往外望：看看阳光灿烂下一片绿汪汪的人儿喊着口号，已经听不见蝉鸣。遥遥假日近在咫尺，盼着盼着再过一段时间，就着气氛能不能生活得好一些（虽然我早已知道没课的我随时可以放假。</p><p>妈妈发消息来，这个礼拜天阿公过生日，问我在学校忙不忙，有没有空回去一起给他庆生。消息弹窗好一会儿，没有回信，我心烦意乱，随意把手机抛到床上好远，情绪又占据我的脑袋：「其实我不想回家」…</p><p>这正是一个奇怪的存在，二十年间，每次从远方归家都能满心欢喜地期盼一路，但是当真正重新踏入这片曾经养育我的土地时，我才发现期待中的景象不过是自己捏造出的自欺欺人的泡沫，一切都不如想象中的那般美好。这辆轰鸣的列车带我驶向的，不过是自己朝思暮想、只存在于每晚梦寐的那份家乡的阴暗面罢了。于是，我开始不断要跑，逃离、逃离、逃离！</p><p>该要逃向哪里呢？还能逃去哪里呢？无论在什么地方，人们总会在最寥寥的夜晚里被难以名状的乡愁紧紧地套牢桎梏，但是，明明思乡只是一个情绪而已…</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/image-0.jpg" alt="FORM ALBUMS OF JVKE" width = "300" height = "300" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/image-1.jpg" alt="摄于家附近的公园：木棉花树" width = "300" height = "300" style="border-radius: 15px;"></div></div></div><hr><h3 id="2024-09-22-思乡只是一种情绪"><a href="#2024-09-22-思乡只是一种情绪" class="headerlink" title="2024&#x2F;09&#x2F;22 - 思乡只是一种情绪"></a>2024&#x2F;09&#x2F;22 - 思乡只是一种情绪</h3><p>百度百科上说，候鸟迁徙季节通常分为春秋两季。春季的北归候鸟通常在三月至五月完成迁徙，秋季的率飞候鸟则在九月至十一月迁徙。全世界已知的近万种鸟类中，大约五分之一是候鸟，每年数以亿计的候鸟穿越不同国家和大陆，迁徙，是自然界中最壮观的现象之一。</p><p>…</p><p>今天清晨醒了个大早，挣扎着依稀记得昨夜是什么理由要早起…也大致记不得了。起身，下床，发现右耳莫名听不见了，烦躁地揉了揉耳朵，空调外机的轰鸣显得稀薄，嗡嗡嗡，分不清楚是耳鸣还是环境的低声低语，怀疑是气压变低了吧。最近降温得厉害，水是冰冰凉凉的，刷牙的时候想起今天是中秋节，中秋中秋，前两天妈妈还特地问我「中秋要怎么过？你哥哥嫂嫂和小孩过来这边过节，不回老家去了。」我还暗自偷笑呢，不回好啊，不回好啊，正巧我也…刚想掰掰手指数数这回多少天没回去过了，要念出声音来，惊觉不对，似乎耳朵真的不留任何缝隙地被堵住了，心慌之余，牙刷过于用力把口腔挫伤了。</p><p>是耵聍堵塞啊…我手捂着仍然吃痛的下唇，「不想去医院，好麻烦。」网上搜到的能自救的办法我都逐一试过了，杯水车薪，干脆带着耳机死马当活马医。一整个上午，名师、单词、公式、计算、概念交替无序地从眼前出现又消失，可心不在焉都不知在想些什么，干脆我告诉自己今天算是完了。发怵时刻回忆起昨晚深夜发表摆烂文学：</p><p>「人们在岸上。我想象着这幅景象，我荡支小船，使劲划呀、扒拉啊，纹丝不动，视野前方的堤坝还遥遥无期，来时的去路早已消失得无影无踪，水下一片漆黑、幽静，孤独地，只能自顾听见孱弱的心跳，以及悬挂在头颅上方那颗硕大的倒计时，咔嗒咔嗒，彻头彻尾的DILEMMA！盛大的骗局！」</p><p>“孤独地…心跳…骗局….”我暗自重温，咀嚼着这些费劲的文字，长长叹息，随即抬头看向窗户外，阴天，有两棵高高瘦瘦的树没有淋雨，零零散散站立几只灰色的鸟。</p><p>午饭什么也没吃，心思总是不由自主地琢磨着今天是不是应该出门，出门或许还可以顺便看看医生呢，这么想着。家族群——幸福大家庭被推送到了消息首页，点开看，大家子人在给二老唱生日快乐歌庆祝高寿呢，蛋糕上鲜红的「福」，巧克力做的寿桃，象征意味的对联「福如东海，寿比南山」，等待分发的一次性纸盘上堆满黄颜色的塑料叉，欢闹的歌声中有孩童捏好叉子迫不及待了。现在围在方桌旁簇拥在两位老人身边的都是“小小孩”，曾孙啦，从前是孙子孙女，如今都在画外，甚至画外音都没有。想到这里我止不住发笑，也不知道在笑什么，不重要，不如想想午饭做何打算好，时间总在不被察觉的时候溜过去。</p><p>好累啊，今天就当作我不在吧，顺势泄气一般地趴到桌子上，乱糟糟的，笔啊、试卷纸、参考书、草稿杂糅着被我的躯体压得结结实实，昏昏沉沉地入眠。再睁开眼皮的时候，三点，书桌前的灯不知道什么时候被误触打开，明亮得直晃眼，我怔怔地坐起身，往阳台方向蹒跚踱步，靠在栅栏的同时我拨通了阿公的电话。电话通了良久无人发言，「喂，阿公，祝你…」我就要想敷衍了事，被他似乎是蓄谋已久地打断，声音沙哑又疲惫「汝抵毋抵汝几久冇轉來喔？」突如其来，右耳内传来巨大的“啵”一声，顿时世界变得清晰无比…</p><blockquote><p>这件事，我正在做，屏蔽一切波动，我们已进入马拉松艰难的后半程，现在不能再看远处，不能扩大疲劳的猜度，只能紧盯脚下两三米距离，然后以一次次呼吸来确认自己仍在呼吸，然后，再一次呼——吸，如此才能继续推进。去做每一件事，这就是幸福，我选择过了，现在我别无他求。——9 FRAMES</p></blockquote><p>鸟群为了生存而选择迁徙，人为了什么选择回家，又为了什么决定出走？</p><h3 id="2024-10-27-再看你一眼，我就头也不回地走了…"><a href="#2024-10-27-再看你一眼，我就头也不回地走了…" class="headerlink" title="2024&#x2F;10&#x2F;27 - 再看你一眼，我就头也不回地走了…"></a>2024&#x2F;10&#x2F;27 - 再看你一眼，我就头也不回地走了…</h3><p>昨晚在寝室，一直一直发呆，傻楞地想要做一些机械重复的动作来抑制思绪纷飞的大脑，其实我也不知道在想些什么，我总是这样，大概是不想再做这些怎么也解不开的难题吧，重复重复重复…</p><p>室友圆拉我看直播，又到了一年一度的英雄联盟世界赛，今天看LCK赛区的半决赛，据说非常的精彩，我对这些游戏不太感冒，但感觉凑上去热闹些，显得我有事情可做，骤然脑袋里蹦出了几个粗体放大的文字：<strong>逃避可耻！</strong> 大一的时候也是这样，入学九月才相识的不太谈天说话，十月却让这场赛事点燃交流的热情，按理说，我得感谢它。</p><p>正式比赛的前半段很无趣，圆突发奇想问我：「如果你即将面临一次短暂的重逢，你会感到开心还是难过？」</p><p>我几乎是不假思索地答复他说到，开心吧，毕竟再短暂也是终于能够见面了，即使转瞬即逝，我会感到开心。</p><p>显然我的回答不是他想听到的答案，圆又问，难道你就不会因为分别而感到难过吗，重逢明明只有在“计划”和“路途”中才会令人喜悦，最终也免不了还是要经历分别的悲伤啊。</p><p>我“噢”的一声，接着说出我的想法：或许是我惦念着的人太有限了吧，呃…我和我的奶奶，这一辈子大概也就还能再见面几十次，我已经知足了，当然我也很爱她，甚至想要见面我现在就可以做到立刻乘车几小时回家，但是我不能，也似乎没什么意义，我能做的唯有珍惜时间而已…说出这段话以后我又顿了顿，心里计算着时间，大概就是这样了。</p><p>…</p><p>想起国庆回家的几天，还是免不了被抓壮丁参与了父亲组织的老友聚会，美约“多见见世面”。倒是和两位老人相处的时间变得很少很少，寥寥的只有几餐晚饭的时光而已。得知我三号就要走，他们似乎变得心事重重。</p><p>临行当天的上午，奶奶唤我到她的面前，偷偷把一张厚厚的红包塞到我手掌心捏紧又攥了攥。我一时不知道该说什么好，呆呆地只看着奶奶。注视着她佝偻的背，身高如今只够到我的胸前，白花花的一头短发开始稀疏看见皮肤的颜色。我一时不知道该说什么好，她太要强了，无论是在她的儿子们面前，还是在她的孙子面前。再一次重重地捏捏我的手，奶奶操着如此熟悉的客家语对我说：</p><p>「良仔要好好读书哦，红包你收好别掉了。阿婆我没什么钱了，上次吃饭你也没有回来，这红包就当作是我给你开学用的。我的腿也走不动，耳朵也聋，这次你走了是要等到过年才能再回来了吧？」</p><p>我一时不知道该说什么好，张开手臂轻轻抱了抱奶奶，她一下低着头，挥挥手，说着好了好了，车到了吧？你快点出发，人家在楼下等你了。</p><p>…</p><script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script><div id="posts-chart"style="border-radius: 8px; height: 190px; padding: 10px;"></div><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>这次杂记使用的封面来自于ALBUMS OF JVKE，歌手JVKE的<code>this is what ____ feels like</code>系列专辑封面，很美（歌也美，设计灵感来源于梵高的《盛开的杏花》。</p><figure><img src="/images/杂记/2024年/10月/image-2.jpg" alt="梵高家族永不出售的画作——《盛开的杏花》" width = "300" height = "300" style="border-radius: 15px;"><figcaption>梵高家族永不出售的画作——《盛开的杏花》</figcaption></figure><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-1.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-2.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-3.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-4.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-5.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-6.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-7.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-8.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-9.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-10.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-11.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/10月/album-12.jpg" alt="FORM ALBUMS OF JVKE" width = "200" height = "200" style="border-radius: 15px;"></div></div></div><hr>]]></content>
    
    
    <categories>
      
      <category>Life Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Twikoo评论系统的安装与个性化设置</title>
    <link href="/2024/09/07/Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/README/"/>
    <url>/2024/09/07/Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/README/</url>
    
    <content type="html"><![CDATA[<h3 id="Twikoo评论系统的安装与个性化设置"><a href="#Twikoo评论系统的安装与个性化设置" class="headerlink" title="Twikoo评论系统的安装与个性化设置"></a>Twikoo评论系统的安装与个性化设置</h3><h3 id="这几天，迎来了博客大修，同时加入了评论功能，eventually-可以和大家bablababababa"><a href="#这几天，迎来了博客大修，同时加入了评论功能，eventually-可以和大家bablababababa" class="headerlink" title="这几天，迎来了博客大修，同时加入了评论功能，eventually! 可以和大家bablababababa!!!"></a>这几天，迎来了博客大修，同时加入了评论功能，eventually! 可以和大家bablababababa!!!</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><p>很喜欢这个表情包小猫，it reminds me the github cat!!!</p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://emojis.slackmojis.com/emojis/images/1643515259/12807/meow_attentionreverse.png?1643515259" width = "135" height = "135" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="/images/Twikoo评论系统的安装与个性化设置/image-3.gif" width = "135" height = "135" style="border-radius: 15px;"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://emojis.slackmojis.com/emojis/images/1643515259/12807/meow_attentionreverse.png?1643515259" width = "135" height = "135" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/Twikoo评论系统的安装与个性化设置/image-3.gif" width = "135" height = "135" style="border-radius: 15px;"></div></div></div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实在当初在为博客建站做准备的时候，我是并没有打算往博客当中安装评论系统的。原因是当时觉得作为浩瀚互联网中的一个普普的小站，访问密度一定是十分渺小的。其次，原意是作为技术博客来进行建设，用来存放个人学习时的记录的笔记、方法等，仅仅面向个人。于是就会在那捧脑袋想：评论应该没有必要吧…</p><p>不过近期发现，除了技术这类<del>严肃内容（</del>的输出，渐渐也会分享一些生活方面的内容以及一些自己的想法。想想坐在电脑面前边想边敲啊敲，发布前还得呼出命令行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>，这种复古的仪式感，嗯，old good times，感觉起来还是很愉快的！后期可能会慢慢往「技术 + 生活」两大块内容发展、生长。这个时候，突然就感到，要是能有友人在底下comment还是很幸福的，所以博客拥有一个评论系统还是很重要的。</p><p>还有一件事，就是我开始写博客接近快一年了！鼓掌祝贺piapiapia！但是，也没有交到多少赛博友邻，沮丧…希望添加评论系统以后能够开始make good friends!</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="Vercel-Twikoo-云函数部署"><a href="#Vercel-Twikoo-云函数部署" class="headerlink" title="Vercel + Twikoo 云函数部署"></a>Vercel + Twikoo 云函数部署</h3><p>我搭建评论功能使用的平台是<code>Twikoo</code>，一个简洁、安全、免费的静态网站评论系统：<a href="https://twikoo.js.org/">-&gt;poke here</a>.</p><p>因为我当前的静态博客搭建使用的是<code>Hexo + Fluid</code>，然后 Fluid 主题当中集成好了 Twikoo 的插件，因此我只需要完成云函数部署即可（我选择使用<a href="https://twikoo.js.org/backend.html#vercel-%E9%83%A8%E7%BD%B2">Vercel部署方式</a>。</p><h3 id="Twikoo个性化设置"><a href="#Twikoo个性化设置" class="headerlink" title="Twikoo个性化设置"></a>Twikoo个性化设置</h3><p>Twikoo评论系统的个性化设置参考了<a href="https://www.gigigatgat.ca/posts/twikoo-tutorial/">这篇文章</a>，非常谢谢这位Po主！</p><h4 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h4><p><code>Configuration-General-GRAVATAR_CDN</code>一栏填入<code>gravatar.com</code>.</p><p>自定义头像，可以前往<a href="https://gravatar.com/">Gravatar</a>这个网站用自己的邮箱注册账号并上传个人头像，即可使用该邮箱进行评论时显示自己的自定义头像啦！</p><h4 id="自定义表情包"><a href="#自定义表情包" class="headerlink" title="自定义表情包"></a>自定义表情包</h4><p><code>Configuration-Plugin-EMOTION_CDN</code>一栏输入<code>https://raw.githubusercontent.com/avocadoTiff/twikoo/main/owo.json</code>，这是原文章Po主制作的自定义表情包库，然后你也可以拥有这么一只可爱小猫！</p><p><strong>WHAT A LOVELY CAT!!!</strong></p><!-- ![Twikoo评论效果图](/images/Twikoo评论系统的安装与个性化设置/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/image-1.png" alt="Twikoo评论效果图"></p><p>接下来，我也照猫画虎地尝试起制作自己的自定义表情包库啦（撸起袖子状！</p><p>表情包的制作其实很简单！只要按照以下的<code>json</code>文件格式制作一份<code>owo.json</code>文件，然后将这个文件放到你的仓库，或者对象存储等区域就可以进行调用啦！</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-16f8b946" role="button" aria-expanded="false" aria-controls="collapse-16f8b946">        <div class="fold-arrow">▶</div>制作表情包的 json 文件格式      </div>      <div class="fold-collapse collapse" id="collapse-16f8b946">        <div class="fold-content">          <p>制作表情包有三种<code>type</code>：</p><ul><li><code>emoticon</code>：颜文字，文字类。</li><li><code>emoji</code>：这个怎么翻译啊，小表情包吗hhh？</li><li><code>image</code>：获取图片当成表情包，需要提供URL。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;颜文字&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;emoticon&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;container&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(ノ°ο°)ノ&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前方高能预警&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(´இ皿இ｀)&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我从未见过如此厚颜无耻之人&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Emoji&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;emoji&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;container&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;😂&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;😀&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Bilibili&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;container&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;img src=\&quot;https://owo.imaegoo.com/bilibili/6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png\&quot;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tv_doge&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;img src=\&quot;https://owo.imaegoo.com/bilibili/a8111ad55953ef5e3be3327ef94eb4a39d535d06.png\&quot;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tv_亲亲&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>以下是几个包含了很多很多各种各样的自定义表情包的地址：</p><ul><li><a href="Twikoo-Magic">Twikoo-Magic</a>，一个搜罗了许多热门Twikoo表情包的仓库。</li><li><a href="https://slackmojis.com/">Slackmojis</a>，超超超多表情包，提供了<code>alt text</code>，右键可以<code>复制图片链接</code>。</li><li><a href="https://emotion.xiaokang.me/#/">小康的表情速查</a>，居然可以一键生成Twikoo表情包的 json 文件，不过看上眼的就少了些（</li></ul><p>最后终于，我也制作了一个自定义的表情包库，和我的博客扔在同一个Github仓库啦！</p><p><code>Configuration-Plugin-EMOTION_CDN</code>一栏输入<code>https://raw.githubusercontent.com/ZhangKeLiang0627/ZhangKeLiang0627.github.io/main/img/sys/owo.json</code>，即可使用同款表情ahhh！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://emojis.slackmojis.com/emojis/images/1643514476/4594/blob-wave.gif?1643514476" width = "135" height = "135" style="border-radius: 15px;"></div><div class="group-image-wrap"><img src="https://emojis.slackmojis.com/emojis/images/1666924513/62049/blob_crazy_happy.gif?1666924513" width = "135" height = "135" style="border-radius: 15px;"></div></div></div><h4 id="配置邮件通知服务"><a href="#配置邮件通知服务" class="headerlink" title="配置邮件通知服务"></a>配置邮件通知服务</h4><p>这里以配置QQ邮箱为例：</p><p>首先，你要先开启邮箱的POP3&#x2F;SMTP服务：<a href="https://blog.csdn.net/weixin_58068682/article/details/122770936">-&gt;click here to know more details</a>.</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>你仅需要填写的邮件通知选项      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">SENDER<span class="hljs-emphasis">_EMAIL: &lt;你的QQ邮箱地址&gt;</span><br><span class="hljs-emphasis">SENDER_</span>NAME: &lt;发送邮件者名称&gt;<br>MAIL<span class="hljs-emphasis">_SUBJECT: &lt;自定义通知邮件主题&gt;</span><br><span class="hljs-emphasis">SMTP_</span>SERVICE: &lt;你的邮件服务提供商&gt;<br>SMTP<span class="hljs-emphasis">_USER: &lt;邮件通知邮箱用户名&gt;(需与SENDER_</span>EMAIL一致)<br>SMTP<span class="hljs-emphasis">_PASS: &lt;邮件通知邮箱密码&gt;(授权码)</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>填写好后，可以使用「邮件通知测试」测试该设置是否能够正常使用。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>终于是把评论功能系统添加好啦！现在我也可以说，欢迎大家的留言!!!</p>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Twikoo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Qt+高德地图API+阿里云MQTT的EasyMap🗺️</title>
    <link href="/2024/09/02/%E5%9F%BA%E4%BA%8EQt%E4%B8%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91MQTT%E7%9A%84EasyMap/README/"/>
    <url>/2024/09/02/%E5%9F%BA%E4%BA%8EQt%E4%B8%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91MQTT%E7%9A%84EasyMap/README/</url>
    
    <content type="html"><![CDATA[<h3 id="基于-Qt-高德地图API-阿里云MQTT-的EasyMap🗺️"><a href="#基于-Qt-高德地图API-阿里云MQTT-的EasyMap🗺️" class="headerlink" title="基于 Qt+高德地图API+阿里云MQTT 的EasyMap🗺️"></a>基于 Qt+高德地图API+阿里云MQTT 的EasyMap🗺️</h3><h4 id="终于，在我的三脚猫功夫之下，慢慢地憋出了EasyGPS的上位机…"><a href="#终于，在我的三脚猫功夫之下，慢慢地憋出了EasyGPS的上位机…" class="headerlink" title="终于，在我的三脚猫功夫之下，慢慢地憋出了EasyGPS的上位机…"></a>终于，在我的三脚猫功夫之下，慢慢地憋出了EasyGPS的上位机…</h4><h4 id="LUV-form-aliyun-again…"><a href="#LUV-form-aliyun-again…" class="headerlink" title="LUV form aliyun again…"></a>LUV form aliyun again…</h4><h4 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h4><hr><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9F%BA%E4%BA%8EQt%E4%B8%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91MQTT%E7%9A%84EasyMap/image-0.jpg" alt="EasyMap"></p><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9F%BA%E4%BA%8EQt%E4%B8%8E%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91MQTT%E7%9A%84EasyMap/image-1.jpg" alt="EasyMap"></p><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>这次为了制作EasyGPS的上位机，需要使用高德地图JSAPI，陆陆续续接触了JS、HTML的零零散散的知识，我愿意称之为完全面向ChatGPT编程，真是帮大忙了！</p><p>Qt虽然以前也接触过，不过算是学了忘、忘了学的状态，这次冥冥中有重新捡起来的迹象。</p><p>MQTT也是一个多月前接触的协议，算是终于集齐的这么多要素，勇者终于要屠龙救公主啦😎！</p><p>但是，事实上，并没有这么简单，这几天开发遇到的bug，已经足够环绕地球一大圈了，而且还拿的是我刷短视频的时间来写！写高数都没这么累（www</p><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>等待施工…</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>Qt编译路径不要包含中文、标点符号、空格等，否则极有可能造成编译失败…</li><li>有缘更新吧，这次挖了一个大坑。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>aliyun</tag>
      
      <tag>Qt</tag>
      
      <tag>高德地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨9月：学生思维破局、回忆大马旅程✈️</title>
    <link href="/2024/09/01/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/README/"/>
    <url>/2024/09/01/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨9月：学生思维破局、回忆大马旅程✈️"><a href="#杂记丨9月：学生思维破局、回忆大马旅程✈️" class="headerlink" title="杂记丨9月：学生思维破局、回忆大马旅程✈️"></a>杂记丨9月：学生思维破局、回忆大马旅程✈️</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>学生思维，求是思维，职场思维…这些词语在近期的社交平台上十分流行，特别是对于大部分准备毕业进入职场的undergraduates，这似乎逐渐演变成了一个十分伪命题的刻板印象——学生思维。</p><p>学生思维，仿佛变成了所有不好品质的代名词。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-c81438de" role="button" aria-expanded="false" aria-controls="collapse-c81438de">        <div class="fold-arrow">▶</div>对学生思维的普遍看法      </div>      <div class="fold-collapse collapse" id="collapse-c81438de">        <div class="fold-content">          <blockquote><p>以下是我从广大社交平台搜罗来的对学生思维的普遍看法：</p></blockquote><blockquote><ul><li>不好意思，腼腆，扭扭捏捏，害怕提问，不会提问。</li><li>教条主义，重理论，而不重实践。</li><li>完美主义，事情都要等到万事俱备才开始做。</li><li>主动意识弱，只会埋头做事，不会主动向上级汇报工作进度。</li><li>没有自己的逻辑判断能力，听风就是雨，听见看见什么信息不经过自己的考量就盲目相信，是乖乖的听话机器。</li><li>还想着依靠学历，职场不顺就埋怨学历不足，或者仗着自己学历高在职场横行霸道。</li><li>太把努力和付出当回事，当自己付出如此多努力却得不到应得的回报时，就会生气抱怨：为什么。</li><li>急于得到他人的认可，太重视他人对自己的评价。</li><li>……</li></ul></blockquote>        </div>      </div>    </div><hr><h3 id="【2024-09-01】学生思维如何破局？"><a href="#【2024-09-01】学生思维如何破局？" class="headerlink" title="【2024&#x2F;09&#x2F;01】学生思维如何破局？"></a>【2024&#x2F;09&#x2F;01】学生思维如何破局？</h3><p>我先来谈谈我对学生思维的看法：我认为学生思维就是将在学校里的那套做法原封不动地挪到职场当中套用。</p><p>这么做的后果就是，“你”变成了人们口中津津乐道的职场小年轻，不懂事，笨拙，悟性差；可是，“你”一定会想：这么做，在学校能拿高分呢！</p><p>这里就引出了另外一个问题，处于当下大环境的教育体系，今天的学校和社会似乎已经完全脱节了。于是就出现，高考结束后的同学们憧憬着大学的生活，对未来满怀希望；而面临大学毕业的同学们却对社会、对前程充满迷茫。这是多么强烈的割裂感和绝望呢？</p><p>我并不是来想要吐槽这个不好那个不好，我只是想说：拥有学生思维不是很正常的事情吗？或者贴在学生思维上的各色标签放在任何一个社会人上都再平常不过了。只是学校负责教授知识，并不教授你如何驰骋职场、人情世故。相关的知识从何处来？</p><p>因此，拥有学生思维并不是说“你”脑子笨，不用心，成长慢，只不过是“你”恰好空缺了这份关于职场社会的知识，而这些知识恰好需要长期的积累，领悟和刻意练习。只有积累到一定的水平，“你”才可以毫不费力地做对一些细节的事、说对正确的话。</p><p>只要从大环境的教育体系出来的学生或多或少都会存在一些学生思维，这是一段每个人都需要经历的一段时光，或长或短。因此确切地说，事实上，没有人可以做出批评和指控当下的“你”的失误，“你”又何必为此感到难过？</p><p>最后，讲讲学生思维如何破局。</p><p>我能给出的唯一解答就是：无它，唯手熟尔。</p><p>转变思维就跟学习一门新语言一样，最快的方式就是把自己丢到一个充满新语言的环境下，不断地practise，不断地刻意练习，转变意识，做出行动，调整心态。放轻松，take it easy，或许在未来的某一天，“你”会在不经意中发现，原来自己也能做到…</p><p>这里安利一个我很喜欢的UP主：<a href="https://space.bilibili.com/239688446">硬核的HeyMatt</a>，我认为这位UP主很有智慧、理性又逻辑，他的发言和观点常常给了我莫大的启发。</p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-0.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-1.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-2.jpg"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-0.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-1.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-2.jpg"></div></div></div><hr><h3 id="【2024-09-07】想法、勇气和惊人的执行力"><a href="#【2024-09-07】想法、勇气和惊人的执行力" class="headerlink" title="【2024&#x2F;09&#x2F;07】想法、勇气和惊人的执行力"></a>【2024&#x2F;09&#x2F;07】想法、勇气和惊人的执行力</h3><p>不知道从哪里开头欸。</p><h4 id="狗屁倒灶的话题"><a href="#狗屁倒灶的话题" class="headerlink" title="狗屁倒灶的话题"></a>狗屁倒灶的话题</h4><p>几天前朋友发文给我「快来快来看看这个！」是一个<a href="https://www.bilibili.com/video/BV1Qh4y1T7u1">英语街坊视频</a>，当时我正在图书馆为升学考试焦头烂额，眼下一道线性代数解得我头晕眼花，于是生气地扣好笔帽，点开视频（没摔笔hhh，在图书馆不敢咋咋呼呼。</p><p>视频内容是一个博主街坊测试上海美国学校学生英文水平。我原本以外会相当轻松愉快的内容，反而是各种高级英语词汇上下翻飞，越看越加使得气氛变得凝重起来，翻翻评论区更甚。因为我第一感觉它们都好优秀，在它们的年纪，高中生，十六七岁，可能还没这么大，能够说流利的外国语，能够拥有自己的一套输出体系，从容自如地表达观点，富裕，最重要的是每个人都看起来这么的自信、开朗。</p><p>回想我十七岁的年纪，正处于高二升入高三的关键节骨眼，睁眼做题背书，闭眼也在做题背书，除此以外再无是处，挺受挫的。当然现在的人生也仍然在忧虑升学中，或许长时间处于这种状态下，小镇做题家，我会对视频当中这些学生感到非常羡慕，没错，其实用嫉妒来表达也许更贴切…</p><p>当然，面对这样的overwhelming，偶尔也会有义愤填膺的时刻。我会有时候莫名其妙蹦出一句愤怒的反驳：「凭什么？」，倒是颇有奋勇起义的模样。并不是要为什么确切的原因而感到气愤，甚至一度错愕到会对自己怀疑「你怎么能说出这样的话？你怎么会有这副模样呢？」。</p><p>和朋友聊过这个话题，它说根本原因是我们拥有近乎无意识的严苛的阶级制度观念。我打趣说它，那么这样我们每天每天要仰慕的人也太多了吧？你也是学生，难道比咱们学校要好的学生，你全都要高看一眼吗？还是说，不如咱们的学生，就只能被你不屑一顾。</p><p>当然，说的只是玩笑话，我蛮认同它的观点，就是长期以来深深融入我们潜意识当中的阶级观念，或许嘴上说起都过去了，心理却感觉全都变了。它说，未来倘若我们也能跨阶级生活，我们也必定只会是新阶级，始终带着这份思想过一辈子，可能你觉得会随时间推移、履历的丰富慢慢变淡，但保不定就跟风湿一样，当你以为病已经完全恢复了，它会在某个雨天悄然无息地回来。</p><p>好了好了，不聊这些狗屁倒灶的话题了，可以说是完全离题了，倒不如说上述的对话和内容多多少少就是学生思维的具现。</p><h4 id="在马来的旅程"><a href="#在马来的旅程" class="headerlink" title="在马来的旅程"></a>在马来的旅程</h4><p>初中升高中的暑期有幸受到父亲的老友黄生伯伯的邀请去马来旅行，人生第一次出国，第一次搭飞机，出行前夜还因为纠结行李箱应该带些什么而如临大敌，最后是带了证件、几套衣服以及一本砖头一样厚的《平凡的世界》by路遥（啊啊啊啊啊太荒唐了，写着写着就被以前的自己蠢到气死，到底是脑袋缺了哪根弦&#x3D; &#x3D;，我要先缓一缓…</p><p>我一直以为飞机在空中滑翔飞行的时候是和坐在行驶当中的汽车一样安静，没想到引擎声、气流声大到让人无法闭目安眠，夜航南飞，几个小时后飞机在吉隆坡（Kuala Lumpur 平稳落地后一行人又登上了颠簸的小面包车，开往怡保（Ipoh 的车程，晃晃悠悠地，两个半小时的时光，老破音响重复播放着黄老板的Perfect，我靠坐在车厢尾部翻翻几页大书抵着来回震颤的活页车窗昏沉睡去。</p><p>现在对于马来西亚的记忆近乎完全忘却，当时拍了蛮多照片都因为保存不当尽数丢失了，能回忆起来的只有几张照片的大致情景。我只知道妈妈跟我说过一个马来币等于两元钱（RMB，叻沙（Laksa很好很好吃，每天都可以吃到好多咖喱做的料理美食。到处都有卖猫山王榴莲，风景很美，人不拥挤。逛了个遍的风景地，虽然连名字也全然忘记了。父亲的华人朋友平时用粤语和马来语交谈，我偶尔能听懂一点儿。可能是为了在这么短的时间体验到更多马来风光，我们总是在赶行程，每天都要在车厢中度过一段时间，再加上国外网络流量费用昂贵，莫名其妙我多出许多读书的时间（😅</p><p>或许是从小镇出身的缘故，初次到了外国，感觉到处什么都是新鲜感。黄太笑着和妈妈说「弟弟咁中意影相咩，平常路上嘅風景都要拍下嚟紀念。」</p><!-- <figure><img src="/images/杂记/2024年/9月/image-3.jpg" width="60%"/><figcaption>摄于傍晚回民宿路上的Blue Moment</figcaption></figure> --><!-- <figure><img src="/images/杂记/2024年/9月/image-4.jpg" width="100%"/><figcaption>摄于Sky Mirror</figcaption></figure> --><figure><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/杂记/2024年/9月/image-3.jpg" width="60%"/><figcaption>摄于傍晚回民宿路上的Blue Moment</figcaption></figure><figure><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/杂记/2024年/9月/image-4.jpg" width="100%"/><figcaption>摄于Sky Mirror</figcaption></figure><p>每天都是父亲的老友聚会，茶楼排挡、摆围招待。印象最为深刻的是，在霹雳（Perak 的某个晚上，凑巧黄生伯伯的印尼亲友团前来，老老少少，晚饭餐桌上我座位旁的一位豪爽的伯伯大夸特夸父亲在中国对他们的热情款待，不辞劳苦地做司机和向导，驾车，三天从深圳一路驶到四川。</p><p>正自顾自地享受美食，黄生伯伯的小孩，一位只比我大一岁的哥哥附近打球趁着休息的时候来。常听父母过年过节和黄生伯伯视频通话的时候提起他，六岁就能够自己一个人坐飞机，很勇敢，很成熟懂事。</p><p>当时还说了些什么我已经忘了，记得很清楚的是，黄生伯伯说很多亲人好友都来了，叫他坐下来加个位和大家“傾傾計、講講嘢”。小哥说篮球比赛快开始了一会儿就要回去，说着然后麻利地在桌上抓起一瓶易拉罐啤酒敬了敬豪爽伯伯和父亲，框框吹完，随即礼貌地和在场朋友都打声招呼就携赶来催促他上场的青年一同离开。餐桌上的人们自然都有说有笑的，豪爽伯伯也乐开花，他晒成棕褐色的脸喝得红红的，饶有兴致，他拿起一个喝剩下一半的啤酒玻璃樽倒了满满一胶杯递到我面前「細佬，你嘟飲啲啦！」…</p><p>回去的路上，父亲喝得醉醺醺的，他帮我挡了不少酒，我也不知道怎的，那时候执拗不愿意喝，拿着“未成年不饮酒”当幌子，三番五次拒绝豪爽伯伯手上的酒杯。父亲笑着说「細路仔唔識飲，唔好為難佢啦，大佬我陪你飲」。喝醉的父亲，走在路上会左摇右摆，我和妈妈连忙搀扶着他不要摔倒，只听他一直发笑：开心嘛！回到民宿，好不容易把父亲连推带挤扶上楼，斜斜倒在床上，妈妈下楼给他倒热水，念叨着：你爸啊就是喝醉了。我坐在父亲的床头一旁，听见他突然很大声糊里糊涂地喊了一句：儿子，人的一生是非常短暂的，遇到自己想要的东西一定要努力去追啊…</p><p>马来之旅临近尾声，父母要往家里带的东西实在是太多了，特产、置办的礼物、朋友送的果酒（在托运下飞机的时候被打破了、托人带的西药…最后实在是装不下了要用我的行李箱带一带，好吧，总有东西得留下，于是我依依不舍地只好把那本沉甸甸的《平凡的世界》永远的留在了大马，希望它还静静地躺在民宿的书架上。在返回吉隆坡登飞机之前，小面包开到雪兰莪（Selangor，我们和黄生伯伯的细佬，小黄生，见面吃饭，吃了好吃的肉骨茶。</p><p>饭后闲谈，他问我 Do you still remember me? Do you remember the book I gave you as a present?（那是更久的几年前他来家里做客，我总是好奇他手上那本写满英语的小说，见我这么新奇的眼神，干脆就送给我了。我用蹩脚的粤语答他「嗰本書仲系有點難懂，之不過我收埋好了，等英文變好點先讀」，小黄生叔叔笑了笑夸我“大個佐”，见人没有之前那么怕生。临行之前，小黄生叔叔和父亲感慨到，这次再见不知什么时候下次能够再聚。各自say goodbye，他用力拍拍我的肩「細佬，話畀你知啦，做人要敢想敢做，行動亦要快，你咁年輕，未来世界都系你哋嘅，要加油喔！」…</p><p>（这里翻手机老相册的时候翻到我给小黄生叔叔拍的照片，思索一番还是决定不post出来了，看看飞机的机翼和云端吧！</p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-5.jpg" alt="摄于飞机回程途中"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-6.jpg" alt="摄于飞机登记检票处"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-5.jpg" alt="摄于飞机回程途中"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/9%E6%9C%88/image-6.jpg" alt="摄于飞机登记检票处"></div></div></div><h4 id="最后的嘴碎"><a href="#最后的嘴碎" class="headerlink" title="最后的嘴碎"></a>最后的嘴碎</h4><p>写到这里，其实已经不再呼应主题了，但是没关系，至少今天我找回了部分我在十五六岁时关于马来的记忆，倒也没有什么实际含义，但确实是某些不知道是好是坏的观念建立伊始。「想法、勇气和惊人的执行力」多么遥远的目的地，就以此期望自己能成长为这样的灵魂，hope so.</p><h3 id="【2024-09-21】走路时，我们都在想什么？"><a href="#【2024-09-21】走路时，我们都在想什么？" class="headerlink" title="【2024&#x2F;09&#x2F;21】走路时，我们都在想什么？"></a>【2024&#x2F;09&#x2F;21】走路时，我们都在想什么？</h3><ul><li>可能会更新？</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-60d46676" role="button" aria-expanded="false" aria-controls="collapse-60d46676">        <div class="fold-arrow">▶</div>很久以前DailyCommute中扣出来的文字      </div>      <div class="fold-collapse collapse" id="collapse-60d46676">        <div class="fold-content">          <div class="note note-info">            <p>阴雨绵绵的，冷气好大声，这个季节的梅雨配上华尔兹似乎已经没这么别扭了。走在路上容易让莫名的凉水撞到头顶，地上坑坑洼洼的水池，总想放肆地踢踏，到如今都没拥有让衣服湿掉的勇气。朋友呢，朋友都去哪儿？这个季节的假期朋友总是会暂时消失掉，活跃到全部消失不见。我在听陈绮贞的「孩子」，混合着路上的斑鸠和落雨。和别的地方不同，我们这的夏天下雨不见到蚯蚓，而是大蜗牛，鼓鼓的就像茶叶蛋，我们猜疑，是蜗牛搬家，蜗牛搬家确实需要大工程！辣辣的，我的午饭到肚子里还是觉得滚烫，现在我走在路上，现在我在和微弱的阳光比清闲，阳光出来了，蝉鸣声也该出来了，正正好好。「孩子」以后我走向快递站，现在我听椎名林檎，循序渐进！</p><p>–2023&#x2F;7&#x2F;19</p>          </div><div class="note note-info">            <p>今天我醒来，发现人们全都复活了。今天是八月的倒数第二天，我的快乐只剩下两天。其实我并不是要聊这个，我想谈谈黑椒汁，只不过通勤路上反常的人流让我好不习惯，就是这样而已。<br>回到黑椒汁，也可以叫做黑椒酱，起因是昨天叫朋友给我捎了一份晚餐，我睡到晚上八点，醒来坐好打开音视频喝水，我的所有就餐前的动作都做好了，打开餐盒盖子的一瞬间，一大股浓烈廉价合成的黑椒调和酱的味道随着食物的热气扑倒我的脸上头发上眼镜上，我哇的一声把中午吃的大部分食物都吐了出来，但其实场面不是那么不堪，我没吃很多东西，大部分都是水。<br>我不喜欢黑椒汁，尤其是淘宝19.9包邮的网红廉价黑椒汁，是源于大概一年（？某个晚上吃了浇上了网红黑椒汁的土豆泥，然后当晚的睡眠就胃痛发热，急性胃炎，那几天连同呼气都是黑椒汁的味道，我知道我把我一辈子的黑椒汁都体验完了…就这么简单就完了。<br>当然更小的时候，不老实试过将芝士片和速冻饺子之类的一起上蒸锅，然后当晚急性肠胃炎，腹泻，浑身每个毛孔都蒸发出芝士奶酪的淡淡奶腥。噢这些真是不太好的经历…</p><p>–2023&#x2F;8&#x2F;30</p>          </div><div class="note note-info">            <p>人为快乐和幸福而活，从微观的角度来说，一切人和动物都是细胞构成的，细胞为那些能够产生兴奋刺激神经递质而活。这就能解释，人做出的所有的行为，无论是小确幸美貌高尚智慧成就大爱小爱，还是贪婪暴食杀戮嗑药纵欲金钱至上，本质上都在追求和刺激着多巴胺一类激素的分泌，动物是激素的奴隶。这样是否可以一概而论地将人类的所有善行和罪孽都解释成攀比谁的神经递质分泌的更多，毕竟善人有善人的舒心，恶人有恶人的快感，都是为了某一瞬间的「释放」。这样是否可以解释现在城市人们的心病，是因为他们获取不了兴奋的激素，细胞最本质最本质的追求满足不了，活着的念想也就随之消失。</p><p>–2023&#x2F;10&#x2F;22</p>          </div><div class="note note-primary">            <p>苦难精算师45:(</p><p>–2023&#x2F;9&#x2F;6</p>          </div>        </div>      </div>    </div><script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script><div id="posts-chart"style="border-radius: 8px; height: 190px; padding: 10px;"></div><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>可能会更新？</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Life Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈HOPE当中的GUI底层逻辑实现✨</title>
    <link href="/2024/08/31/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/README/"/>
    <url>/2024/08/31/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/README/</url>
    
    <content type="html"><![CDATA[<h3 id="谈谈HOPE当中的GUI底层逻辑实现✨"><a href="#谈谈HOPE当中的GUI底层逻辑实现✨" class="headerlink" title="谈谈HOPE当中的GUI底层逻辑实现✨"></a>谈谈HOPE当中的GUI底层逻辑实现✨</h3><h3 id="Let’s-talk-about-how-to-make-a-GUI-like-HOPE’s"><a href="#Let’s-talk-about-how-to-make-a-GUI-like-HOPE’s" class="headerlink" title="Let’s talk about how to make a GUI like HOPE’s !!!"></a>Let’s talk about how to make a GUI like HOPE’s !!!</h3><h3 id="Project-name：HOPE"><a href="#Project-name：HOPE" class="headerlink" title="Project name：HOPE"></a>Project name：HOPE</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><p class="note note-warning">本文由于Gif图片存储较大，请耐心等待图片加载🙇‍♂️🙇‍♂️...</p><hr><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/谈谈HOPE当中的GUI底层逻辑实现/image-0.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="/images/谈谈HOPE当中的GUI底层逻辑实现/image-1.jpg" alt="exhibition" width="100%;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/谈谈HOPE当中的GUI底层逻辑实现/image-2.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="/images/谈谈HOPE当中的GUI底层逻辑实现/image-3.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="/images/谈谈HOPE当中的GUI底层逻辑实现/image-4.jpg" alt="exhibition" width="100%;"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/谈谈HOPE当中的GUI底层逻辑实现/image-0.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/谈谈HOPE当中的GUI底层逻辑实现/image-1.jpg" alt="exhibition" width="100%;"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/谈谈HOPE当中的GUI底层逻辑实现/image-2.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/谈谈HOPE当中的GUI底层逻辑实现/image-3.jpg" alt="exhibition" width="100%;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/谈谈HOPE当中的GUI底层逻辑实现/image-4.jpg" alt="exhibition" width="100%;"></div></div></div><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>该从哪里开始说起呢？</p><p>让我开启<code>HOPE</code>这个项目的原因其实是非常机缘巧合的，首先是23年暑假期间我们正在紧张准备电赛，需要准备些开发板，但是由于经费不足，于是打算自己动手制作，丰衣足食。</p><p>当时正好看见了<strong>稚晖君</strong>发布的项目<code>REF</code>，包括硬件和代码框架<code>MonoUI</code>都开发地非常的优雅，令人感到遗憾的是，那时并没有开源（现在应该已经开源在他的机械臂项目仓库当中，于是打算从头到脚狠狠的复刻一波！</p><!-- ![REF and MonoUI](/images/谈谈HOPE当中的GUI底层逻辑实现/image-5.jpg) --><!-- ![UltraLink](/images/谈谈HOPE当中的GUI底层逻辑实现/image-6.jpg) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-5.jpg" alt="REF and MonoUI"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-6.jpg" alt="UltraLink"></p><ul><li>谈谈硬件</li></ul><p>于是，我就开始在自己一步一步慢慢摸索下，第一个HOPE的雏形诞生了！紧接着，秉持着快速迭代的理念，很快地，第二版、第三版都接踵而至…</p><!-- ![HOPE的设计草稿图](/images/谈谈HOPE当中的GUI底层逻辑实现/image-11.jpg) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-11.jpg" alt="HOPE的设计草稿图"></p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-7.jpg"></div><div class="group-image-wrap"><img src="/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-8.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-9.jpg"></div><div class="group-image-wrap"><img src="/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-10.jpg"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-7.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-8.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-9.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-10.jpg"></div></div></div><p>那时候就想一直无头苍蝇一样，目的性不明确，技术也不成熟，唯一拥有的就是满腔热血，不怕苦不怕累，做梦都在想着项目怎么优化，最后呢，也是很开心做出了目前这个比较稳定的硬件版本。</p><ul><li>谈谈软件</li></ul><p>硬件解决以后，噩梦才真正开始，对于一个数据结构菜鸟而言，如何设计一个优雅的单色GUI呢？所以这就是今天要着重要讲的主题：谈谈HOPE当中底层逻辑实现。</p><p class="note note-info">当然，对于HOPE，包括代码和硬件设计都比较稚嫩，仅仅只做提供思路和参考的作用！仅以此博客，纪念这个有趣的项目hhh😁</p><h2 id="关于如何接触到GUI"><a href="#关于如何接触到GUI" class="headerlink" title="关于如何接触到GUI"></a>关于如何接触到GUI</h2><p>第一次接触GUI的制作是接触到了UP主小蛋显璐的视频<a href="https://www.bilibili.com/video/BV1RY411f7GT/">OLED菜单动画教程</a>。</p><p>教程中的这套GUI框架是基于<code>U8G2图像库</code>的，大致的实现方法是：</p><blockquote><p>通过注册proc函数和对应的状态位到列表list当中，然后循环遍历list，比对当前状态位和list当中的状态位，若相同，则执行对应的proc函数。</p><p>proc函数中包括OLED动画显示、按钮响应等交互操作、菜单页面之间切换、过渡动画等逻辑操作，简单易学，虽然全部东西都挤在了一个文件对当中，非常的不优雅，也不易维护和移植。</p></blockquote><p>但是呢，正是这套教程开启了我在GUI设计开发当中的不归路。</p><p>我第一个亲自构思并设计的项目「伪诗云」，便是第一次用上了该GUI框架，找个机会可以再聊聊这个项目。</p><!-- ![伪诗云](/images/谈谈HOPE当中的GUI底层逻辑实现/image-12.jpg) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-12.jpg" alt="伪诗云"></p><h2 id="关于HugoUI的底层逻辑实现"><a href="#关于HugoUI的底层逻辑实现" class="headerlink" title="关于HugoUI的底层逻辑实现"></a>关于HugoUI的底层逻辑实现</h2><p>目前HOPE当中使用的HugoUI是我从MonoUI追溯到创天蓝大佬的烙铁项目中的GUI框架修改而来的，目前采用<strong>链表</strong>的形式实现该GUI，底层依然基于<code>u8g2</code>。</p><p>HugoUI主要包括两个结构体：菜单页面<code>Page</code>和页面挂件<code>Item</code>。</p><ul><li>菜单页面<code>Page</code>顾名思义，就是菜单的每一页都是一个Page，翻页时便会切换Page。</li><li>而该页面上的挂件<code>Item</code>就像是页面上的APP，负责实现特定的功能。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Item的结构体 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> // 小挂件的结构体</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *<span class="hljs-title">next</span>;</span><br>    HugoUIItem_e funcType;  <span class="hljs-comment">// 作用类型</span><br>    <span class="hljs-type">uint16_t</span> itemId;        <span class="hljs-comment">// 小挂件的id</span><br>    <span class="hljs-type">uint16_t</span> lineId;        <span class="hljs-comment">// 在每一页的id</span><br>    <span class="hljs-comment">// float item_x, item_x_trg;</span><br>    <span class="hljs-comment">// float item_y, item_y_trg;</span><br>    <span class="hljs-type">uint8_t</span> *pic;<br>    <span class="hljs-comment">// uint8_t step;</span><br>    <span class="hljs-type">char</span> *title; <span class="hljs-comment">// 小挂件的名字</span><br>    <span class="hljs-type">char</span> *msg;   <span class="hljs-comment">// ITEM_MESSAGE</span><br>    <span class="hljs-type">char</span> *desc;<br>    <span class="hljs-type">bool</span> *flag; <span class="hljs-comment">// ITEM_CHECKBOX and ITEM_RADIO_BUTTON and ITEM_SWITCH //小挂件用于这些作用时的标志位</span><br>    <span class="hljs-comment">// bool flagDefault; // Factory default setting // 恢复出厂设置</span><br>    paramType *param;                                                     <span class="hljs-comment">// ITEM_CHANGE_VALUE and ITEM_PROGRESS_BAR //小挂件可改变的参数</span><br>    <span class="hljs-type">uint8_t</span> inPage;                                                       <span class="hljs-comment">// ITEM_JUMP_PAGE // Item在哪一页</span><br>    <span class="hljs-type">uint8_t</span> JumpPage;                                                     <span class="hljs-comment">// 将要跳转到哪一个page</span><br>    <span class="hljs-type">uint8_t</span> JumpItem;                                                     <span class="hljs-comment">// 将要跳转到哪一个Item</span><br>    <span class="hljs-type">void</span> (*FuncCallBack)(<span class="hljs-type">void</span>);                                           <span class="hljs-comment">// 回调函数 // ITEM_CHANGE_VALUE and ITEM_PROGRESS_BAR // 该挂件的函数</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *(*<span class="hljs-title">SetIconSrc</span>)(<span class="hljs-title">const</span> <span class="hljs-title">uint8_t</span> *<span class="hljs-title">pic</span>);</span>                <span class="hljs-comment">// 传入图片</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *(*<span class="hljs-title">SetJumpId</span>)(<span class="hljs-title">uint8_t</span> <span class="hljs-title">pageId</span>, <span class="hljs-title">uint8_t</span> <span class="hljs-title">itemLineId</span>);</span> <span class="hljs-comment">// 传入PageId和ItemLineId</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *(*<span class="hljs-title">SetDescripition</span>)(<span class="hljs-title">char</span> *<span class="hljs-title">desc</span>);</span>                   <span class="hljs-comment">// 传入descripition</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *(*<span class="hljs-title">ReturnThisItem</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_item</span> *<span class="hljs-title">thisItem</span>);</span>  <span class="hljs-comment">// 返回该item的指针</span><br>&#125; HugoUIItem_t;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Page的结构体 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span> *<span class="hljs-title">next</span>;</span><br>    HugoUIPage_e funcType;<br>    HugoUIItem_t *itemHead, *itemTail;<br>    <span class="hljs-type">char</span> *title; <span class="hljs-comment">// 该页的名字</span><br>    <span class="hljs-type">uint8_t</span> pageId;<br>    <span class="hljs-type">uint16_t</span> itemMax; <span class="hljs-comment">// 该page含有的item数</span><br>    <span class="hljs-type">float</span> page_x, page_x_trg;<br>    <span class="hljs-type">float</span> page_y, page_y_trg;<br>    <span class="hljs-type">float</span> page_y_forlist, page_y_forlist_trg;<br><br>    <span class="hljs-type">void</span> (*FuncCallBack)(<span class="hljs-type">void</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span> *(*<span class="hljs-title">SetPgaeFunCallBack</span>)(<span class="hljs-title">void</span> (*<span class="hljs-title">FuncCallBack</span>)(<span class="hljs-title">void</span>));</span><br><br>    <span class="hljs-type">void</span> (*PageEventProc)(<span class="hljs-type">void</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span> *(*<span class="hljs-title">SetPgaeEventProc</span>)(<span class="hljs-title">void</span> (*<span class="hljs-title">PageEventProc</span>)(<span class="hljs-title">void</span>));</span><br><br>    <span class="hljs-type">void</span> (*PageUIShow)(<span class="hljs-keyword">struct</span> HugoUI_page *thispage, HugoUIItem_t *thisitem);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span> *(*<span class="hljs-title">SetPageUIShow</span>)(<span class="hljs-title">void</span> (*<span class="hljs-title">PgagUIShow</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">HugoUI_page</span> *<span class="hljs-title">thispage</span>, <span class="hljs-title">HugoUIItem_t</span> *<span class="hljs-title">thisitem</span>));</span><br><br>    HugoUIItem_t *(*AddItem)(<span class="hljs-keyword">struct</span> HugoUI_page *thisPage, <span class="hljs-type">char</span> *title, HugoUIItem_e itemType, ...);<br>&#125; HugoUIPage_t;<br></code></pre></td></tr></table></figure><p>使用链表的形式编写GUI菜单框架的好处就是，Layout时非常的舒适优雅~</p><!-- ![较为优雅舒适的UI-Layout](/images/谈谈HOPE当中的GUI底层逻辑实现/image-13.jpg) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%B0%88%E8%B0%88HOPE%E5%BD%93%E4%B8%AD%E7%9A%84GUI%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/image-13.jpg" alt="较为优雅舒适的UI-Layout"></p><p class="note note-warning">等待施工🙇‍♂️🙇‍♂️...</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>关联的仓库<a href="https://github.com/ZhangKeLiang0627/HOPE">请戳这里;P</a>，您可以在该仓库中获取项目源码和PCB打样文件。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Project Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCU</tag>
      
      <tag>STM32</tag>
      
      <tag>Project</tag>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于阿里云OSS+Hexo+PicGo搭建图床🖼️🛏️</title>
    <link href="/2024/08/24/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS+Hexo+PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/README/"/>
    <url>/2024/08/24/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS+Hexo+PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/README/</url>
    
    <content type="html"><![CDATA[<h3 id="基于阿里云OSS-Hexo-PicGo搭建图床🖼️🛏️"><a href="#基于阿里云OSS-Hexo-PicGo搭建图床🖼️🛏️" class="headerlink" title="基于阿里云OSS+Hexo+PicGo搭建图床🖼️🛏️"></a>基于阿里云OSS+Hexo+PicGo搭建图床🖼️🛏️</h3><h4 id="阿里云是真的香啊！快是真的快，贵还真的没这么贵，其实还是蛮贵的🥹💰💸"><a href="#阿里云是真的香啊！快是真的快，贵还真的没这么贵，其实还是蛮贵的🥹💰💸" class="headerlink" title="阿里云是真的香啊！快是真的快，贵还真的没这么贵，其实还是蛮贵的🥹💰💸"></a>阿里云是真的香啊！快是真的快，<del>贵还真的没这么贵</del>，其实还是蛮贵的🥹💰💸</h4><h4 id="LUV-form-aliyun…"><a href="#LUV-form-aliyun…" class="headerlink" title="LUV form aliyun…"></a>LUV form aliyun…</h4><h4 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h4><hr><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>随着博客文章的数量越来越多，难免地，图片存储的数量也渐渐增多。之前是使用文件夹本地存储图片，部署的时候是全数上传到Github的，慢慢会使得这个仓库变得极其臃肿，而且不便于更换网站的托管。于是还是决定使用图床！！！</p><p>没错，阿里云的对象存储OSS！买了三年的空间才27元，40GB，又可以霍霍一阵啦！</p><blockquote><p><strong>Q：关于为什么要搭建图床？</strong></p></blockquote><blockquote><p>A：我首先能给出的答复就是，<strong>快！访问快，上传快，迁移快。</strong>然后我选择aliyun就是<strong>求稳，不丢数据。</strong>最后，搭建图床，其实也可以<strong>用来实现一些其他的功能如：网页Download。</strong>比方说我可以往OSS当中存放一些PDF、PPT、txt等文件文档，我可以随时在我的博客当中下载获取，<strong>非常的便利！</strong></p></blockquote><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="PicGo图床工具"><a href="#PicGo图床工具" class="headerlink" title="PicGo图床工具"></a>PicGo图床工具</h3><p>PicGo是一款非常优秀的图床工具，支持微博、腾讯云COS、阿里云OSS、七牛云、又拍云、GitHub、SM.MS、imgur等。功能强大，简单易用，可惜我不爱它…</p><p>我还是喜欢简单粗暴，因为我是直接用Vscode敲原生Markdown，用不惯Typora、Obsidian之类的编辑器，所以敲文章编辑图片的时候还要在中间插入一层PicGo，过程繁琐。最后还是没有使用PicGo，后面我会分享我敲Markdown对图片管理的技巧，这里讲讲PicGo的安装和使用，优秀的软件工具说不定适合您！</p><h4 id="PicGo的下载与安装"><a href="#PicGo的下载与安装" class="headerlink" title="PicGo的下载与安装"></a>PicGo的下载与安装</h4><ul><li>下载</li></ul><p>您可以在PicGo的Github仓库的Releases当中获取对应的版本：<a href="https://github.com/Molunerfinn/PicGo/releases">戳这里:)</a></p><p>选择最新的版本就行啦（截止2024&#x2F;8&#x2F;25）：</p><!-- ![PicGo版本选择](images/基于阿里云OSS与Hexo与PicGo搭建图床/image-0.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS%E4%B8%8EHexo%E4%B8%8EPicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/image-0.png" alt="PicGo版本选择"></p><ul><li>安装</li></ul><p>进行安装，一路打 √ 即可！</p><h3 id="阿里云对象存储OSS"><a href="#阿里云对象存储OSS" class="headerlink" title="阿里云对象存储OSS"></a>阿里云对象存储OSS</h3><p>关于阿里云对象存储OSS的创建和配置，我找到了一篇优秀的教程<a href="https://blog.csdn.net/Unamattina_/article/details/136463281">戳这里:P</a></p><p>当然，其中还包括了对PicGo图床工具的配置，教的很赞！</p><p>谢谢该教程作者的分享！非常的手把手教学！</p><h3 id="阿里云对象存储OSS-Vscode替换本地图片链接"><a href="#阿里云对象存储OSS-Vscode替换本地图片链接" class="headerlink" title="阿里云对象存储OSS+Vscode替换本地图片链接"></a>阿里云对象存储OSS+Vscode替换本地图片链接</h3><p>emmm，说来奇怪，我初使用PicGo的时候，我发现我不能用PicGo查看已经存在于OSS当中的图片，只能查看通过PicGo上传到OSS的图片。同时，在PicGo端对图片进行删除后，并不会连同OSS端的图片一起删除。这就导致了操作的不流畅性。</p><p>而且，PicGo不能批量扫描文件夹，上传图片过多过大的时候，会出现<strong>在OSS端已经成功上传但在PicGo端查看不到该图片的情况。</strong></p><p>最后，PicGo不能随我心意地自如的将图片上传到OSS对应的文件夹当中，一张一张地传真的很要命。</p><p>我还遇到一个问题是，<strong>OSS当中的图片是上传后不能也不允许改动在文件夹当中的位置的</strong>，比方说：原来图片A在文件夹1中，现在我想要将图片A从文件夹1移动到文件夹2当中去，这是做不到的。你只能删除文件夹1中的图片A，并在文件夹2中重新上传图片A。</p><p>关于这个问题的解答，我询问了我的从事后端的盆友。它说，你可以把OSS当作是每一个存储对象都对应着一个URL，这个URL是由文件夹的存储路径决定的。倘若你上传了图片A到文件夹1，返回的永久的URL是<code>https://hugokkl.com/file1/pictureA.jpg</code>，云端会根据这个URL到对应的路径当作找到对应的图片。此时你修改该图片A的路径到文件夹2，可是URL却不会改变，会导致文件路径和URL对应不上，云端也不知道去哪里找这个URL对应的图片A了。</p><p>于是，最后我选择使用简单粗暴，<strong>扫描文件夹 + 给原来的图片链接加上前缀的方式</strong>完成了图片的迁移以及图床的搭建！这真的很方便！</p><!-- ![](images/基于阿里云OSS与Hexo与PicGo搭建图床/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS%E4%B8%8EHexo%E4%B8%8EPicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/image-1.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>OSS当中的文件夹以及文件名不要带有标点符号一类的，否则可能会导致生成的URL不可用。</p></li><li><p>OSS的流量费用还是比较高昂的，这一点要注意！每小时内外网流出流量超过20MB便会开始计费！</p></li><li><p>目前，截至到2024&#x2F;8&#x2F;25，本博客绝大部分的图片已经转移到阿里云OSS进行存储！于是，即便不使用魔法，也可以快速地访问本博客！解决了一个挺令人头疼的难题😁</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>aliyun</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【耐背王】计算机网络🤓📖</title>
    <link href="/2024/08/20/%E8%80%90%E8%83%8C%E7%8E%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/README/"/>
    <url>/2024/08/20/%E8%80%90%E8%83%8C%E7%8E%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/README/</url>
    
    <content type="html"><![CDATA[<h3 id="【耐背王】计算机网络🤓📖！"><a href="#【耐背王】计算机网络🤓📖！" class="headerlink" title="【耐背王】计算机网络🤓📖！"></a>【耐背王】计算机网络🤓📖！</h3><h4 id="作为一名专业的攻城狮，理论张口就来应该是家常便饭！背书就要笑着背！"><a href="#作为一名专业的攻城狮，理论张口就来应该是家常便饭！背书就要笑着背！" class="headerlink" title="作为一名专业的攻城狮，理论张口就来应该是家常便饭！背书就要笑着背！"></a>作为一名专业的攻城狮，理论张口就来应该是家常便饭！背书就要笑着背！</h4><h4 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h4><hr><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>心血来潮，开了这份新坑，原意是为了复习上学期学习的计算机网络的知识，不要学完考完试就跟过眼云烟一样，以后工作可是实打实会用到的，需要重视起来！</p><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="网络分层结构"><a href="#网络分层结构" class="headerlink" title="网络分层结构"></a>网络分层结构</h3><!-- ![TCP/IP五层模型](images/耐背王之计算机网络/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E8%80%90%E8%83%8C%E7%8E%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.png" alt="TCP/IP五层模型"></p><h3 id="介绍TCP、UDP"><a href="#介绍TCP、UDP" class="headerlink" title="介绍TCP、UDP"></a>介绍TCP、UDP</h3><h4 id="TCP的概念与特点"><a href="#TCP的概念与特点" class="headerlink" title="TCP的概念与特点"></a>TCP的概念与特点</h4><ul><li>TCP概念：</li></ul><p>TCP是一个面向连接的传输层协议，提供可靠的、面向连接的、字节流传输服务。</p><ul><li>TCP特点：</li></ul><ol><li>面向连接：数据传输前需要建立连接（三次握手），传输结束后需断开连接（四次挥手）。</li><li>可靠传输：通过确认应答、超时重传、校验和序列号等机制，保证数据的可靠性。</li><li>流量控制：通过滑动窗口机制，控制数据发送的速率，避免网络拥塞。</li><li>拥塞控制：采用慢启动、拥塞避免、快速重传和快速恢复等算法，优化网络资源利用。</li><li>顺序保证：保证数据按发送顺序到达，适用于需要数据顺序且可靠传输的场景，如文件传输、邮件等。</li><li>点对点：每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。</li><li>全双工通信：同一连接允许双向数据流。</li></ol><h4 id="UDP的概念与特点"><a href="#UDP的概念与特点" class="headerlink" title="UDP的概念与特点"></a>UDP的概念与特点</h4><ul><li>UDP概念：</li></ul><p>UDP的全称是用户数据报协议，是一个无连接的传输层协议，提供简单的数据报文传输服务，无法保证消息的可靠性、顺序性和完整性。</p><ul><li>UDP特点：</li></ul><ol><li>无连接：发送数据前不需要建立连接，减少开销和发送数据之前的时延。</li><li>低开销：UDP头部开销小，只有8字节。</li><li>不可靠传输：不保证数据包的送达、不重传、不校验顺序。</li><li>面向报文：数据以独立的报文形式传输，适合传输少量数据的场景。</li><li>无拥塞控制：实时性强。</li></ol><h3 id="介绍HTTP"><a href="#介绍HTTP" class="headerlink" title="介绍HTTP"></a>介绍HTTP</h3><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><h4 id="常见的HTTP状态码"><a href="#常见的HTTP状态码" class="headerlink" title="常见的HTTP状态码"></a>常见的HTTP状态码</h4><h4 id="HTTPS与HTTP的区别"><a href="#HTTPS与HTTP的区别" class="headerlink" title="HTTPS与HTTP的区别"></a>HTTPS与HTTP的区别</h4><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><h4 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h4><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><h3 id="介绍cookie、session和token"><a href="#介绍cookie、session和token" class="headerlink" title="介绍cookie、session和token"></a>介绍cookie、session和token</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>Cookie是在客户端（通常是浏览器）和服务器之间传输的一小段数据，通常包含用户的相关信息。服务器通过在HTTP响应头中设置Set-Cookie字段，将Cookie信息发送给客户端保存。客户端在接收到Cookie信息后，会在本地进行存储，并在后续的HTTP请求中将Cookie信息发送给服务器。Cookie常用于实现用户登录状态的维护、购物车功能、网站个性化设置等功能。</p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>Session是在服务器端存储的关于用户信息的数据结构。在用户首次访问网站时，服务器会为每个用户创建一个唯一的会话ID（Session ID），并将该Session ID存储在Cookie中或通过URL参数传递给客户端。客户端在后续的请求中会带上Session ID，服务器根据Session ID来识别用户，并在会话期间存储用户相关信息。Session常用于保存用户的登录状态、购物车内容等，可以在服务器端灵活地控制会话的有效期和存储内容。</p><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><p>Token是一种用于身份验证的令牌，通常是一个加密的字符串，用于验证用户的身份和权限。在用户登录时，服务器会生成一个Token并返回给客户端，客户端在后续的请求中将Token作为身份验证的凭证发送给服务器。服务器通过验证Token的有效性和权限来确定用户的身份是否合法。Token通常具有一定的时效性，在过期或被篡改时会失效，需要重新获取新的Token。Token常用于实现无状态的身份验证，可用于前后端分离的应用中。</p><p>总的来说，Cookies主要用于在客户端存储用户信息，Session主要用于在服务器端存储用户信息，并结合Session ID在客户端和服务器之间传递信息，而Token则是用于身份验证和权限控制的令牌。</p><h3 id="等待施工…"><a href="#等待施工…" class="headerlink" title="等待施工…"></a>等待施工…</h3><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>等待施工…</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>耐背王</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨8月：你说，要多多设想代码之外...</title>
    <link href="/2024/08/12/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/README/"/>
    <url>/2024/08/12/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨8月：你说，要多多设想代码之外…"><a href="#杂记丨8月：你说，要多多设想代码之外…" class="headerlink" title="杂记丨8月：你说，要多多设想代码之外…"></a>杂记丨8月：你说，要多多设想代码之外…</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>和朋友也聊过许多回这件在目前的年龄来看并不重要的事情，多想想代码之外的世界是怎么样的吧？</p><p>比方说，程序员的35岁危机，学历贬值带来的技术贬值，或者很多公众号常提到的穷人活该干一辈子技术之类的话，还有程序员得学会人情世故才可以向上晋升等…</p><p>这目前看起来确实危言耸听，但是也给我自身拉响了长鸣的警钟，人生不能没用技术，也不能只有技术，如何平衡？这似乎非常关键。</p><p>那么，要如何发展代码之外的世界呢。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/8月/image-0.gif" alt="---" width = "300" height = "150" style="border-radius: 10px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/8月/image-1.gif" alt="---" width = "300" height = "150" style="border-radius: 10px;"></div></div></div><hr><h3 id="【2024-08-12】等待施工…"><a href="#【2024-08-12】等待施工…" class="headerlink" title="【2024&#x2F;08&#x2F;12】等待施工…"></a>【2024&#x2F;08&#x2F;12】等待施工…</h3><p>看看未来的我会给出什么样的答案吧？</p><h3 id="【2024-8-20】我治好了自己的鹅足肌腱炎，一次稀里糊涂的自救"><a href="#【2024-8-20】我治好了自己的鹅足肌腱炎，一次稀里糊涂的自救" class="headerlink" title="【2024&#x2F;8&#x2F;20】我治好了自己的鹅足肌腱炎，一次稀里糊涂的自救"></a>【2024&#x2F;8&#x2F;20】我治好了自己的鹅足肌腱炎，一次稀里糊涂的自救</h3><p>八月初，某天起床发现膝盖内侧开始出现酸痛和撕裂的痛楚。</p><p>起初以为是前两天运动的时候意外挫伤膝盖导致的，没有太多注意这回事，因为不影响正常的走路，也就没有当一回事了。</p><p>起床当天中午，长时间坐在工位上，突然想要起身去倒水，膝盖一用力就出现了一阵突如其来的疼痛，让我在座位上缓了很久才可以颤颤巍巍地扶着撑桌子起身，一瘸一拐地走起路来…</p><blockquote><p>感觉感觉，身体告诉我，自己不再年轻洋溢，不再像小猫般到处蹦蹦跳跳摔跤打滚，这儿那儿磕磕碰碰，也就哭一哭睡一觉醒来第二天身体就恢复如初。心里始终以为自己还是小孩，唯独真正到病痛入侵的时刻！好无奈灰心，膝盖，你什么时候才能重返健康？ ​​​</p></blockquote><blockquote><p>就像是到了每个阴雨天患处要开始隐隐作痛，走路一瘸一拐的时候云淡风轻地解释：“老毛病啦！” 或者，当我找张椅子坐下，要慢慢吞吞地扶着把手晃晃悠悠地支撑着弯腿，待到结实地触底，嘴里还要长舒口气：唉呀… 我曾几何时想过“唉呀”这种语气词会轮到我发出来哈哈哈，像个小老头小老太。<code>from my Weibos --2024-8-8</code></p></blockquote><p>果断地，我开始上网搜索查询相关的病症，百度上说，我这是内侧半月板损伤…半信半疑，我预想我的下半生会不会坐在轮椅上度日hhh，当然事实上并没有这么严重，最后通过症状对比，这似乎更加符合鹅足肌腱炎的表征：膝盖内侧髌骨和股骨的交界处，按压时疼痛，同时弯腿直腿的时候这个位置会有肌肉拉伸的疼痛，同时在走路时，会仿佛感觉膝盖内侧总会有向外翻的趋势。</p><p>下面我来讲讲我是怎么治好鹅足肌腱炎的：</p><p>首先，我立马在某团下单了云南白药喷雾，然后当天中午用上，睡前再喷了药才睡，那时候还是非常的难，我习惯侧睡，睡觉不怎么安分，总会有翻来覆去的时候，于是前几个夜晚总是睡梦中被腿伤疼醒。但不得不说，云南白药确实很厉害，在第二天白天，疼痛的症状就减轻了许多，虽然还是只能慢慢晃悠地走路，但至少可以直行了。</p><p>然后呢，我是大概养伤一个多礼拜才开始象征性地做一些康复运动，对腿部的肌肉做拉伸，疏解。尽量避免上下楼梯这种需要弯腿的动作。还有，最好坐下的时候腿打直不要弯曲，这样在下一次需要站起来的时候，可以避免大量的疼痛，都是经验之谈！</p><p>目前到今天为止，我的膝盖已经恢复得七七八八，但依然在避免高强度的运动，毕竟恢复的周期漫长…</p><h3 id="【2024-8-24】领导在PUA，无非就是想谈个好价"><a href="#【2024-8-24】领导在PUA，无非就是想谈个好价" class="headerlink" title="【2024&#x2F;8&#x2F;24】领导在PUA，无非就是想谈个好价"></a>【2024&#x2F;8&#x2F;24】领导在PUA，无非就是想谈个好价</h3><p>看呼兰的脱口秀，有感摘抄!!!</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow1.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow2.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow3.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow4.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow5.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow6.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow7.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow8.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow9.jpg"></div><div class="group-image-wrap"><img src="/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow10.jpg"></div></div></div><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow1.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow2.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow3.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow4.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow5.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow6.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow7.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow8.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow9.jpg"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/8%E6%9C%88/talkshow10.jpg"></div></div></div> --><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>等待施工…</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Life Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>record</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32F405的DCMI外设的一些小的项目尝试🎶</title>
    <link href="/2024/08/11/STM32F405%E7%9A%84DCMI%E5%A4%96%E8%AE%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%B0%9D%E8%AF%95/README/"/>
    <url>/2024/08/11/STM32F405%E7%9A%84DCMI%E5%A4%96%E8%AE%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%B0%9D%E8%AF%95/README/</url>
    
    <content type="html"><![CDATA[<h3 id="STM32F405的DCMI外设的一些小的项目尝试🎶"><a href="#STM32F405的DCMI外设的一些小的项目尝试🎶" class="headerlink" title="STM32F405的DCMI外设的一些小的项目尝试🎶"></a>STM32F405的DCMI外设的一些小的项目尝试🎶</h3><h3 id="Use-STM32F405-DCMI-peripheral-to-do-some-small-projects"><a href="#Use-STM32F405-DCMI-peripheral-to-do-some-small-projects" class="headerlink" title="Use STM32F405 DCMI peripheral to do some small projects!!!"></a>Use STM32F405 DCMI peripheral to do some small projects!!!</h3><h3 id="Project-name：Color-Tracer"><a href="#Project-name：Color-Tracer" class="headerlink" title="Project name：Color-Tracer"></a>Project name：Color-Tracer</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><p class="note note-warning">本文由于Gif图片存储较大，请耐心等待图片加载🙇‍♂️🙇‍♂️...</p><hr><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/pic2.jpg" alt="exhibition" width="75%;"></div><div class="group-image-wrap"><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/pic3.jpg" alt="exhibition" width="100%;"></div></div></div> --><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/pic2.jpg" alt="exhibition" width="75%;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/pic3.jpg" alt="exhibition" width="100%;"></div></div></div><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>这些个项目Demos都是基于先前设计的基于STM32F405的HMI开发板LUMOS进行的开发。当时不知道是从哪里听来的STM32F405也可以使用DCMI外设的这个说法，我反复翻阅了意法半导体的芯片手册，上面明确指出STM32F405是没有DCMI这个外设的。</p><p>但是出于好奇，也算是机缘巧合之下，在Bilibil看见有同学拿F405结合摄像头实现了电赛送药小车题目的数字识别，根据那位同学的描述，F405其实是有DCMI外设的，使用标准库可以驱动，但是在HAL库将这个外设阉割掉了hhh，当然现在使用HAL库是趋势，但难免还是为这样的损失而感到可惜。</p><p>于是乎，我就想要亲身复现一下这位同学利用STM32F405和摄像头实现的数字识别功能，所以就有了下面一系列的折腾…</p><p class="note note-info">当然，这些DEMOs都比较远古，包括代码和硬件设计都比较稚嫩，仅仅只做提供思路和参考的作用！仅以此博客，纪念这个有趣的尝试hhh😁</p><h2 id="关于程序"><a href="#关于程序" class="headerlink" title="关于程序"></a>关于程序</h2><h3 id="在LCD屏幕上显示摄像头画面"><a href="#在LCD屏幕上显示摄像头画面" class="headerlink" title="在LCD屏幕上显示摄像头画面"></a>在LCD屏幕上显示摄像头画面</h3><blockquote><ol><li>全屏显示(240x240)</li></ol></blockquote><center><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/pic1.jpg" width="80%;" style="border-radius: 15px;"></center><!-- <center><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/pic1.jpg" width="80%;" style="border-radius: 15px;"></center> --><h3 id="对特定的颜色进行识别与跟踪"><a href="#对特定的颜色进行识别与跟踪" class="headerlink" title="对特定的颜色进行识别与跟踪"></a>对特定的颜色进行识别与跟踪</h3><blockquote><ol start="2"><li>颜色识别(白、红、绿)</li></ol></blockquote><p>默认烧录为识别追踪浅绿色（草绿色），可以前往<code>dcmi.c</code>文件当中修改<code>TARGET_CONDI Conditionred</code>变量为其他色彩阈值。</p><p>演示效果如下：</p><center><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/vedio1_converted.gif" width="100%;" style="border-radius: 15px;"></center><!-- <center><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/vedio1_converted.gif" width="90%;" style="border-radius: 15px;"></center> --><h3 id="识别标准数字-0-9"><a href="#识别标准数字-0-9" class="headerlink" title="识别标准数字(0-9)"></a>识别标准数字(0-9)</h3><blockquote><ol start="3"><li>数字识别(模板匹配)</li></ol></blockquote><center><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/vedio2_converted.gif" width="50%;" style="border-radius: 15px;"></center><!-- <center><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/vedio2_converted.gif" width="50%;" style="border-radius: 15px;"></center> --><h2 id="关于硬件"><a href="#关于硬件" class="headerlink" title="关于硬件"></a>关于硬件</h2><p>硬件是我自己制作的基于STM32F405的HMI开发板LUMOS，但不是最新的版本，<a href="https://oshwhub.com/hugego/lumos-stm32f405-based-hmi-core-board">最新版本戳这里:p</a>.</p><p>您可以到关联仓库当中的<code>2.Hardware</code>当中获取旧版本的PCB打样文件，top为顶板，base为底板，但是本项目不建议复刻。</p><p>外观展示如下：</p><img src="/images/STM32F405的DCMI外设的一些小的项目尝试/vedio3_converted.gif" width="100%;" style="border-radius: 15px;"><p><br></br></p><!-- <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/vedio3_converted.gif" width="99.5%;"></div><div class="group-image-wrap"><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/STM32F405的DCMI外设的一些小的项目尝试/vedio4_converted.gif" width="100%;"></div></div></div> --><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>关联的仓库<a href="https://github.com/ZhangKeLiang0627/Color-Tracer">请戳这里;P</a>，您可以在该仓库中获取项目源码和PCB打样文件，但，<strong>因为历史过于悠久不推荐复刻本项目。</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Project Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCU</tag>
      
      <tag>STM32</tag>
      
      <tag>Project</tag>
      
      <tag>Camera</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Hexo&#39;s Fluid主题拓展的N种配置👾</title>
    <link href="/2024/07/31/%E5%85%B3%E4%BA%8EFluid%E4%B8%BB%E9%A2%98%E6%8B%93%E5%B1%95%E7%9A%84N%E7%A7%8D%E9%85%8D%E7%BD%AE/README/"/>
    <url>/2024/07/31/%E5%85%B3%E4%BA%8EFluid%E4%B8%BB%E9%A2%98%E6%8B%93%E5%B1%95%E7%9A%84N%E7%A7%8D%E9%85%8D%E7%BD%AE/README/</url>
    
    <content type="html"><![CDATA[<h3 id="关于Hexo’s-Fluid主题拓展的N种配置👾"><a href="#关于Hexo’s-Fluid主题拓展的N种配置👾" class="headerlink" title="关于Hexo’s Fluid主题拓展的N种配置👾"></a>关于Hexo’s Fluid主题拓展的N种配置👾</h3><h3 id="make-your-Hexo’s-theme-more-graceful"><a href="#make-your-Hexo’s-theme-more-graceful" class="headerlink" title="make your Hexo’s theme more graceful!!!"></a>make your Hexo’s theme more graceful!!!</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h2 id="给Fluid主题添加MAC风格代码块"><a href="#给Fluid主题添加MAC风格代码块" class="headerlink" title="给Fluid主题添加MAC风格代码块"></a>给Fluid主题添加MAC风格代码块</h2><blockquote><p>完整路径: <code>blog_root_path/themes/fluid/source/css</code></p></blockquote><ul><li>首先，到<code>hexo-theme-fluid</code>主题根目录下<code>source/css</code>创建名为<code>macpanel.styl</code>的文件并往该文件当中写入以下内容：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#21252b</span><br>    border-radius: <span class="hljs-number">10px</span><br>    box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>)<br>    padding-top: <span class="hljs-number">30px</span><br><br>    &amp;::before<br>      background: <span class="hljs-number">#fc625d</span><br>      border-radius: <span class="hljs-number">50%</span><br>      box-shadow: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span><br>      content: <span class="hljs-string">&#x27; &#x27;</span><br>      height: <span class="hljs-number">12px</span><br>      left: <span class="hljs-number">12px</span><br>      margin-top: -<span class="hljs-number">20px</span><br>      position: absolute<br>      width: <span class="hljs-number">12px</span><br></code></pre></td></tr></table></figure><ul><li>到管理主题的<code>_config.fluid.yml</code>配置文件当中添加新建的<code>macpanel.styl</code>文件，如下：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">custom_css:</span>    <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/macpanel</span><br></code></pre></td></tr></table></figure><ul><li>随后，重新<code>hexo g</code>后就可以看到效果啦。不过可能会出现MAC栏是黑色的，但是代码块背景是白色的情况（因为代码块风格默认为白色。此时如果你不满意，可以继续在<code>_config.fluid.yml</code>配置文件当中修改代码块风格，操作如下：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">highlightjs:</span><br><br>  <span class="hljs-comment"># style: &quot;github gist&quot;</span><br><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github dark dimmed&quot;</span><br>  <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br></code></pre></td></tr></table></figure><p>其实呢，建议不需要修改这个默认的代码块背景颜色的风格，因为你选择使用夜间模式，画面就可以对的上了哈哈哈哈哈！</p><h2 id="给Fluid主题添加首页图片缩放动画"><a href="#给Fluid主题添加首页图片缩放动画" class="headerlink" title="给Fluid主题添加首页图片缩放动画"></a>给Fluid主题添加首页图片缩放动画</h2><!-- ![首页图片缩放动画](images/关于Fluid主题拓展的N种配置/Wos2i6.gif) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%85%B3%E4%BA%8EFluid%E4%B8%BB%E9%A2%98%E6%8B%93%E5%B1%95%E7%9A%84N%E7%A7%8D%E9%85%8D%E7%BD%AE/Wos2i6.gif" alt="首页图片缩放动画"></p><blockquote><p>完整路径：<code>blog_root_path/themes/fluid/source/css</code></p></blockquote><ul><li>在<code>blog_root_path/themes/fluid/source/css</code>中新建<code>indeximg-hover.css</code>，并往该文件内写入以下内容：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.index-img</span> &#123;<br>  <span class="hljs-comment">/* 动画时间 */</span><br>  <span class="hljs-attribute">transition</span>: .<span class="hljs-number">4s</span>;           <br>&#125;<br><span class="hljs-selector-class">.index-card</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.index-img</span> &#123;<br>  <span class="hljs-comment">/* 放大倍数 */</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.05</span>);    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在Fluid主题配置文件<code>_config.fluid.yml</code>中添加自定义CSS，操作如下：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/indeximg-hover.css</span><br></code></pre></td></tr></table></figure><h2 id="给Fluid主题添加热力图"><a href="#给Fluid主题添加热力图" class="headerlink" title="给Fluid主题添加热力图"></a>给Fluid主题添加热力图</h2><p>这里非常感谢博主邓布利多的冥想盆分享的<a href="https://pensieve.wangxindi.org/2024/06/18/2024-06-18-blogfurnish2/">实现方法</a>👏👏👏!!!</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol><li><p>将<code>heatmap.js</code>放入<code>fluid/scripts/helpers/</code>文件夹下。</p></li><li><p>在<code>Markdown</code>当中添加以下两行代码即可进行调用：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;posts-chart&quot;</span><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-radius: 8px; height: 190px; padding: 10px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-738764b7" role="button" aria-expanded="false" aria-controls="collapse-738764b7">        <div class="fold-arrow">▶</div>完整的 heatmap.js 代码      </div>      <div class="fold-collapse collapse" id="collapse-738764b7">        <div class="fold-content">          <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>)<br><span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; stripHTML &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hexo-util&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_render:html&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">locals</span>) &#123;<br>  <span class="hljs-keyword">const</span> $ = cheerio.<span class="hljs-title function_">load</span>(locals)<br>  <span class="hljs-keyword">const</span> post = $(<span class="hljs-string">&#x27;#posts-chart&#x27;</span>)<br>  <span class="hljs-keyword">const</span> htmlEncode = <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">if</span> (post.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (post.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; $(<span class="hljs-string">&#x27;#postsChart&#x27;</span>).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (post.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-encode&#x27;</span>) === <span class="hljs-string">&#x27;true&#x27;</span>) htmlEncode = <span class="hljs-literal">true</span><br>      post.<span class="hljs-title function_">after</span>(<span class="hljs-title function_">postsChart</span>())<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (htmlEncode) &#123;<br>      <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">root</span>().<span class="hljs-title function_">html</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;amp;#/g</span>, <span class="hljs-string">&#x27;&amp;#&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">root</span>().<span class="hljs-title function_">html</span>()<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> locals<br>  &#125;<br>&#125;, <span class="hljs-number">15</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getWordCount</span>(<span class="hljs-params">contentString</span>)&#123;<br>  <span class="hljs-comment">// post.origin is the original post content of hexo-blog-encrypt</span><br>  <span class="hljs-keyword">const</span> content = <span class="hljs-title function_">stripHTML</span>(<span class="hljs-title class_">String</span>(contentString)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\r?\n|\r/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s+/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-keyword">const</span> zhCount = (content.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4E00-\u9FA5]/g</span>) || []).<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> enCount = (content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\u4E00-\u9FA5]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[a-zA-Z0-9_\u0392-\u03c9\u0400-\u04FF]+|[\u4E00-\u9FFF\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af\u0400-\u04FF]+|[\u00E4\u00C4\u00E5\u00C5\u00F6\u00D6]+|\w+/g</span>) || []).<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">var</span> wordcount = zhCount + enCount<br>  <span class="hljs-keyword">return</span> wordcount;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">postsChart</span> () &#123;<br>    <span class="hljs-keyword">const</span> postArr = [];<br>    <span class="hljs-keyword">const</span> dataArr = [];<br>    hexo.<span class="hljs-property">locals</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;posts&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">post</span>) &#123;<br>    postArr.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">title</span>: post.<span class="hljs-property">title</span>,<br>                   <span class="hljs-attr">date</span>: post.<span class="hljs-property">date</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>),<br>                   <span class="hljs-attr">wordcount</span>: (<span class="hljs-title function_">getWordCount</span>(post.<span class="hljs-property">content</span>)/<span class="hljs-number">1000</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>),<br>                   <span class="hljs-attr">path</span>: post.<span class="hljs-property">path</span> &#125;)<br>    dataArr.<span class="hljs-title function_">push</span>([post.<span class="hljs-property">date</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>), <span class="hljs-title function_">getWordCount</span>(post.<span class="hljs-property">content</span>)/<span class="hljs-number">1000</span>])<br>                &#125;)<br><br>    <span class="hljs-keyword">var</span> dataCalendar = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(dataArr)<br>    <span class="hljs-keyword">var</span> dataPosts = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(postArr)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;script id=&quot;postsChart&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="hljs-string">    var postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), document.documentElement.getAttribute(&#x27;data-user-color-scheme&#x27;));</span><br><span class="hljs-string">    window.onresize = function() &#123;</span><br><span class="hljs-string">      postsChart.resize();</span><br><span class="hljs-string">      &#125;;</span><br><span class="hljs-string">    let dataPosts = <span class="hljs-subst">$&#123;dataPosts&#125;</span></span><br><span class="hljs-string">    const dataMap = new Map(dataPosts.map((obj) =&gt; [obj.date, &#123;title: obj.title, wordCount: obj.wordcount, path: obj.path&#125;]));</span><br><span class="hljs-string"></span><br><span class="hljs-string">    function heatmap_width(months)&#123;</span><br><span class="hljs-string">        var startDate = new Date();</span><br><span class="hljs-string">        var mill = startDate.setMonth((startDate.getMonth() - months));</span><br><span class="hljs-string">        var endDate = +new Date();</span><br><span class="hljs-string">        startDate = +new Date(mill);</span><br><span class="hljs-string">        endDate = echarts.format.formatTime(&#x27;yyyy-MM-dd&#x27;, endDate);</span><br><span class="hljs-string">        startDate = echarts.format.formatTime(&#x27;yyyy-MM-dd&#x27;, startDate);</span><br><span class="hljs-string">        var showmonth = [];</span><br><span class="hljs-string">        showmonth.push([</span><br><span class="hljs-string">            startDate,</span><br><span class="hljs-string">            endDate</span><br><span class="hljs-string">        ]);</span><br><span class="hljs-string">        return showmonth</span><br><span class="hljs-string">    &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    function getRangeArr() &#123;</span><br><span class="hljs-string">        const windowWidth = window.innerWidth;</span><br><span class="hljs-string">        if (windowWidth &gt;= 600) &#123;</span><br><span class="hljs-string">          return heatmap_width(12);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        else if (windowWidth &gt;= 400) &#123;</span><br><span class="hljs-string">          return heatmap_width(9);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        else &#123;</span><br><span class="hljs-string">          return heatmap_width(6);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    var postsOption = &#123;</span><br><span class="hljs-string">    title: &#123;</span><br><span class="hljs-string">        top: 0,</span><br><span class="hljs-string">        left: &#x27;center&#x27;,</span><br><span class="hljs-string">        text: &#x27;博客热力图&#x27;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    tooltip: &#123;</span><br><span class="hljs-string">      formatter: function (p) &#123;</span><br><span class="hljs-string">        const post = dataMap.get(p.data[0]);</span><br><span class="hljs-string">        return post.title + &#x27; | &#x27; + post.wordCount + &#x27; 千字&#x27;;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    visualMap: &#123;</span><br><span class="hljs-string">        min: 0,</span><br><span class="hljs-string">        max: 10,</span><br><span class="hljs-string">        type: &#x27;piecewise&#x27;,</span><br><span class="hljs-string">        orient: &#x27;horizontal&#x27;,</span><br><span class="hljs-string">        left: &#x27;center&#x27;,</span><br><span class="hljs-string">        top: 30,</span><br><span class="hljs-string">        inRange: &#123;</span><br><span class="hljs-string">          //  [floor color, ceiling color]</span><br><span class="hljs-string">          color: [&#x27;#cde1ae&#x27;, &#x27;#778f3d&#x27; ]</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        splitNumber: 4,</span><br><span class="hljs-string">        text: [&#x27;千字&#x27;, &#x27;&#x27;],</span><br><span class="hljs-string">        showLabel: true,</span><br><span class="hljs-string">        itemGap: 20,</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    calendar: &#123;</span><br><span class="hljs-string">        top: 80,</span><br><span class="hljs-string">        left: 20,</span><br><span class="hljs-string">        right: 4,</span><br><span class="hljs-string">        cellSize: [&#x27;auto&#x27;, 12],</span><br><span class="hljs-string">        range: getRangeArr(),</span><br><span class="hljs-string">        itemStyle: &#123;</span><br><span class="hljs-string">            color: &#x27;#F1F1F1&#x27;,</span><br><span class="hljs-string">            borderWidth: 2.5,</span><br><span class="hljs-string">            borderColor: &#x27;#fff&#x27;,</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        yearLabel: &#123; show: false &#125;,</span><br><span class="hljs-string">        // the splitline between months</span><br><span class="hljs-string">        splitLine: &#123;</span><br><span class="hljs-string">          lineStyle: &#123;</span><br><span class="hljs-string">            color: &quot;#000&quot;,</span><br><span class="hljs-string">            width: 1,</span><br><span class="hljs-string">            type: &quot;solid&quot;,</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    series: &#123;</span><br><span class="hljs-string">        type: &#x27;heatmap&#x27;,</span><br><span class="hljs-string">        coordinateSystem: &#x27;calendar&#x27;,</span><br><span class="hljs-string">        data: <span class="hljs-subst">$&#123;dataCalendar&#125;</span></span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    postsChart.setOption(postsOption);</span><br><span class="hljs-string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123;</span><br><span class="hljs-string">      postsChart.resize();</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">    postsChart.on(&#x27;click&#x27;, function(params) &#123;</span><br><span class="hljs-string">      const post = dataMap.get(params.data[0]);</span><br><span class="hljs-string">      const link = window.location.origin + &quot;/&quot; + post.path;</span><br><span class="hljs-string">      window.open(link, &#x27;_blank&#x27;).focus();</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">    document.body.addEventListener(&#x27;click&#x27;, function(e) &#123;</span><br><span class="hljs-string">        if (document.documentElement.getAttribute(&#x27;data-user-color-scheme&#x27;)===&#x27;dark&#x27;) &#123;</span><br><span class="hljs-string">            postsChart.dispose();</span><br><span class="hljs-string">            postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;dark&#x27;);</span><br><span class="hljs-string">            postsChart.setOption(postsOption);</span><br><span class="hljs-string">            postsChart.on(&#x27;click&#x27;, function(params) &#123;</span><br><span class="hljs-string">                  const post = dataMap.get(params.data[0]);</span><br><span class="hljs-string">                  const link = window.location.origin + &quot;/&quot; + post.path;</span><br><span class="hljs-string">                  window.open(link, &#x27;_blank&#x27;).focus();</span><br><span class="hljs-string">            &#125;);</span><br><span class="hljs-string">        &#125; else &#123;</span><br><span class="hljs-string">            postsChart.dispose();</span><br><span class="hljs-string">            postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;light&#x27;);</span><br><span class="hljs-string">            postsChart.setOption(postsOption);</span><br><span class="hljs-string">            postsChart.on(&#x27;click&#x27;, function(params) &#123;</span><br><span class="hljs-string">              const post = dataMap.get(params.data[0]);</span><br><span class="hljs-string">              const link = window.location.origin + &quot;/&quot; + post.path;</span><br><span class="hljs-string">              window.open(link, &#x27;_blank&#x27;).focus();</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">  &lt;/script&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>热力图效果展示如下：</p><script src="https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script><div id="posts-chart"style="border-radius: 8px; height: 190px; padding: 10px;"></div><div class="note note-warning">            <p>在实践博主分享的方法时，遇到了以下问题：未找到<code>cheerio</code>，解决方法：<code>npm install cheerio</code>.</p>          </div><h2 id="给Fluid主题更换自定义页脚-footer"><a href="#给Fluid主题更换自定义页脚-footer" class="headerlink" title="给Fluid主题更换自定义页脚(footer)"></a>给Fluid主题更换自定义页脚(footer)</h2><p>自定义页脚效果图如下：<br><img src="/images/%E5%85%B3%E4%BA%8EFluid%E4%B8%BB%E9%A2%98%E6%8B%93%E5%B1%95%E7%9A%84N%E7%A7%8D%E9%85%8D%E7%BD%AE/image-0.png" alt="自定义页脚效果图"></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dfb167e8" role="button" aria-expanded="false" aria-controls="collapse-dfb167e8">        <div class="fold-arrow">▶</div>自定义页脚的代码段      </div>      <div class="fold-collapse collapse" id="collapse-dfb167e8">        <div class="fold-content">          <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center py-1&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-circle rotate&quot;</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/sys/myimg.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span># Carpe diem <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Framework<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-switch-fill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Copyright © 2023-2024<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://zhangkeliang0627.github.io/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hugo@kkl<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  </span><br><span class="language-css">    <span class="hljs-selector-class">.img-circle</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;  </span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;  </span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  </span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;  </span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;  </span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.img-circle</span> <span class="hljs-selector-tag">img</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;  </span><br><span class="language-css">        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;  </span><br><span class="language-css">        <span class="hljs-attribute">height</span>: auto;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text-center</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.py-1</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">1rem</span>;  </span><br><span class="language-css">        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">1rem</span>;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rotate</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.8s</span>;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rotate</span><span class="hljs-selector-pseudo">:hover</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;  </span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;  </span><br><span class="language-css">    &#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="给Fluid主题添加-tabs-分栏容器"><a href="#给Fluid主题添加-tabs-分栏容器" class="headerlink" title="给Fluid主题添加 tabs 分栏容器"></a>给Fluid主题添加 tabs 分栏容器</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-tag-common<br></code></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Reference: <a href="https://theme-next.js.org/docs/tag-plugins/tabs">plugins-tabs | next</a></p><div class="tag-common tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a data-target="first-unique-name-1">first unique name 1</a></li><li class="tab"><a data-target="first-unique-name-2">first unique name 2</a></li><li class="tab"><a data-target="first-unique-name-3">first unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-727a9372" role="button" aria-expanded="false" aria-controls="collapse-727a9372">        <div class="fold-arrow">▶</div>还可以打出组合击！      </div>      <div class="fold-collapse collapse" id="collapse-727a9372">        <div class="fold-content">          <p>但是反过来组合却不行，略sad😥</p><div class="tag-common tabs" id="second-unique-name"><ul class="nav-tabs"><li class="tab active"><a data-target="second-unique-name-1">second unique name 1</a></li><li class="tab"><a data-target="second-unique-name-2">second unique name 2</a></li><li class="tab"><a data-target="second-unique-name-3">second unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="second-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="second-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>        </div>      </div>    </div><h2 id="一些我常用到的Fluid特性（记性不好，这里再记一记📖✏️"><a href="#一些我常用到的Fluid特性（记性不好，这里再记一记📖✏️" class="headerlink" title="一些我常用到的Fluid特性（记性不好，这里再记一记📖✏️"></a>一些我常用到的Fluid特性（记性不好，这里再记一记📖✏️</h2><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h3>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-554d8661" role="button" aria-expanded="false" aria-controls="collapse-554d8661">        <div class="fold-arrow">▶</div>你确定要打开看看么？      </div>      <div class="fold-collapse collapse" id="collapse-554d8661">        <div class="fold-content">          <p>好吧，既然你看到这里，我祝你今天愉快🤗</p>        </div>      </div>    </div><p>使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% fold info @title %&#125;<br>需要折叠的一段内容，支持 markdown<br>&#123;% endfold %&#125;<br><br>example:<br><br>&#123;% fold info @你确定要打开看看么？ %&#125;<br>好吧，既然你看到这里，我祝你今天愉快🤗<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% gi total n1-n2-... %&#125;<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>在markdown中加入如下代码来使用Label：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用HTML形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以下是可选Label：</p><span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span> <span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span><h3 id="图片脚注"><a href="#图片脚注" class="headerlink" title="图片脚注"></a>图片脚注</h3><p>终于找到可以在markdown里写html注入图片可以添加脚注的方法啦，因为markdown注入图片的写法有时候不能改变图片的大小比例，这就非常令人抓狂。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">[img_source]</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>[Your awesome caption]<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>如果某些配置没有成功，可以尝试先<code>hexo clean</code>，再<code>hexo g &amp;&amp; hexo d</code>，因为我有遇到过修改nav-bg-color失败的经历，就是没有<code>hexo clean</code>，捣鼓了半天…</p></li><li><p>前端麻瓜也能有出头的一天😁！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在ESP32-Arduino中使用MQTT</title>
    <link href="/2024/07/20/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/README/"/>
    <url>/2024/07/20/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/README/</url>
    
    <content type="html"><![CDATA[<h3 id="在ESP32-Arduino中使用MQTT"><a href="#在ESP32-Arduino中使用MQTT" class="headerlink" title="在ESP32-Arduino中使用MQTT"></a>在ESP32-Arduino中使用MQTT</h3><h3 id="The-Usage-of-the-MQTT-protocol-in-ESP32-Arduino"><a href="#The-Usage-of-the-MQTT-protocol-in-ESP32-Arduino" class="headerlink" title="The Usage of the MQTT protocol in ESP32-Arduino"></a>The Usage of the MQTT protocol in ESP32-Arduino</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h2 id="MQTT协议概述"><a href="#MQTT协议概述" class="headerlink" title="MQTT协议概述"></a>MQTT协议概述</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p><strong>MQTT的特点：</strong></p></blockquote><ul><li>开放消息协议，简单易实现</li><li>轻量级、占用带宽低（1字节固定报头，2字节心跳报文，最小化传输开销和协议交换，有效减少网络流量</li><li>发布&#x2F;订阅模式，一对多消息发布，解除应用程序耦合</li><li>基于TCP&#x2F;IP网络连接，提供有序，无损，双向连接</li><li>消息QoS（Quality of Service）支持，可靠传输保证（0-至多发一次、1-最少发一次、2-保证收一次）</li><li>可传输任意类型的数据</li><li>收发消息都是异步的，发送方不需要等待接收方应答</li></ul><p>总的来说，MQTT（Message Queuing Telemetry Transport）是一种<strong>轻量级、基于发布-订阅模式的消息传输协议</strong>，<strong>适用于资源受限的设备和低带宽、高延迟或不稳定的网络环境</strong>。它在物联网应用中广受欢迎，能够实现传感器、执行器和其它设备之间的高效通信。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布&#x2F;订阅模式"></a>发布&#x2F;订阅模式</h4><p>相信这个<code>发布/订阅</code>的概念对于互联网大航海时代的我们来说应该都不陌生了。</p><p>玩过社交平台（如：公众号、微博、Bilibil、抖音等）的同学都知道，你想要接收某位博主的的推送，你首先要关注这位博主才可以，这就是<strong>订阅</strong>。</p><p>如果在某个时间点这个博主更新了新消息，社交平台就会将订阅的消息自动推送到你的设备当中，这就可以类比成<strong>发布</strong>。</p><p>而社交平台在这当中就是充当Broker的作用。</p><p>当然，你们之间的订阅和发布也不是单方面的，你们也可以互相订阅，互相发布！而这就是发布&#x2F;订阅模式。</p><p>当你需要某个话题(Topic)的数据时，你就可以去订阅这个话题获取消息。同时你自身也可以成为话题的发布者，发布消息。</p><h4 id="MQTT客户端-MQTT-Client"><a href="#MQTT客户端-MQTT-Client" class="headerlink" title="MQTT客户端(MQTT Client)"></a>MQTT客户端(MQTT Client)</h4><p>任何运行MQTT客户端库的应用或设备都是MQTT客户端。例如，使用MQTT的即时通讯应用是客户端，使用MQTT上报数据的各种传感器是客户端，各种MQTT测试工具也是客户端。</p><p>我们以社交平台为例，可以把每一位用户都看做是一个客户端(Client)，用户彼此之间可以互相订阅。</p><h4 id="MQTT代理-MQTT-Broker"><a href="#MQTT代理-MQTT-Broker" class="headerlink" title="MQTT代理(MQTT Broker)"></a>MQTT代理(MQTT Broker)</h4><p>MQTT Broker是负责处理客户端请求的关键组件，包括建立连接、断开连接、订阅和取消订阅等操作，同时还负责消息的转发。一个高效强大的MQTT Broker能够轻松应对海量连接和百万级消息吞吐量，从而帮助物联网服务提供商专注于业务发展，快速构建可靠的MQTT应用。</p><p>可以把Broker类比成社交平台，例如：你发布消息到微博上，微博这个社交平台就作为中转站把你的消息转发给已经订阅了你的用户。</p><h3 id="报文内容（请求连接与确认）"><a href="#报文内容（请求连接与确认）" class="headerlink" title="报文内容（请求连接与确认）"></a>报文内容（请求连接与确认）</h3><p>下面，我会简明扼要地解释MQTT连接时的报文的每一个参数的含义与作用：</p><h4 id="CONNECT-连接服务端"><a href="#CONNECT-连接服务端" class="headerlink" title="CONNECT - 连接服务端"></a>CONNECT - 连接服务端</h4><p>下图是CONNECT报文所包含的信息内容：</p><!-- ![CONNECT数据包报文内容](images/在ESP32-Arduino中使用MQTT/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/image.png" alt="CONNECT数据包报文内容"></p><ul><li><strong>clientId（客户端ID）</strong></li></ul><p>ClientId是MQTT客户端的标识。MQTT服务端用该标识来识别客户端。因此ClientId必须是<strong>独立的、独有的</strong>。通常ClientId是<strong>由一串字符所构成的</strong>。</p> <p class="note note-warning">注：如果两个MQTT客户端使用相同ClientId标识，服务端会把它们当成同一个客户端来处理。</p><ul><li><strong>cleanSession（清除会话）</strong></li></ul><p>cleanSession设置为<code>true</code>时，MQTT Broker（服务器端）不会记忆以及缓存任何报文信息，实时转发报文后即刻清除会话。</p><p>cleanSession设置为<code>false</code>时，MQTT Broker（服务器端）会记忆保存那些没有得到客户端接收确认的信息。</p> <p class="note note-warning">注：如果需要服务端保存重要报文，光设置cleanSession为false是不够的，还需要传递的MQTT信息QoS级别大于0！</p><ul><li><strong>keepAlive（心跳时间间隔）</strong></li></ul><p>keepAlive用于服务端实时了解客户端是否与其保持连接的情况。</p><p>例如：keepAlive设置为60，即为客户端与服务器端约定：每60秒客户端必须要向服务器端发送一次心跳(PINGREQ)。</p><p>心跳可以是需要传输的数据，如果60秒内客户端都处于空闲状态没有发送数据，则会自动发送一个心跳数据包，证明自己还在线。</p> <p class="note note-warning">另外，在实际运行中，如果服务端没有在1.5倍心跳时间间隔内收到客户端发布消息(PUBLISH)或发来心跳请求(PINGREQ)，那么服务端就会认为这个客户端已经掉线。</p><ul><li><strong>lastWill（遗嘱）</strong></li></ul> <p class="note note-success">客户端确认意外掉线时，服务器端会根据客户端发送的CONNECT数据包中的遗嘱设置，往遗嘱主题中发送遗嘱消息。</p><blockquote><ul><li><strong>lastWillTopic（遗嘱主题）</strong></li><li><strong>lastWillMessage（遗嘱消息）</strong></li><li><strong>lastWillQos（遗嘱QoS）</strong></li><li><strong>lastWillRetain（遗嘱保留）</strong>：<br>遗嘱消息也可以设置为保留消息。</li></ul></blockquote><ul><li><strong>客户端用户密码认证</strong></li></ul> <p class="note note-success">有些服务端开启了客户端用户密码认证，这种服务端需要客户端在连接时正确提供认证信息才能连接。<br>当然，那些没有开启用户密码认证的服务端无需客户端提供用户名和密码认证信息。</p><blockquote><ul><li><strong>username（用户名）</strong></li><li><strong>password（用户密码）</strong></li></ul></blockquote><h4 id="CONNACK-–-确认连接请求"><a href="#CONNACK-–-确认连接请求" class="headerlink" title="CONNACK – 确认连接请求"></a>CONNACK – 确认连接请求</h4><p>下图是CONNACK报文所包含的信息内容：</p><!-- ![CONNACK数据包报文内容](images/在ESP32-Arduino中使用MQTT/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/image-1.png" alt="CONNACK数据包报文内容"></p><ul><li><strong>sessionPresent（当前会话）</strong></li></ul><p>sessionPresent返回为<code>true</code>时，说明MQTT Broker（服务器端）记忆了未被确认的会话信息。</p><p>sessionPresent返回为<code>false</code>时，MQTT Broker（服务器端）不会记忆以及缓存任何报文信息，实时转发报文后即刻清除会话。</p><ul><li><strong>returnCode（连接返回码）</strong></li></ul><table><thead><tr><th align="center"><strong>返回码</strong></th><th align="left"><strong>返回码描述</strong></th></tr></thead><tbody><tr><td align="center">0</td><td align="left">成功连接</td></tr><tr><td align="center">1</td><td align="left">连接被服务端拒绝，原因是<strong>不支持客户端的MQTT协议版本</strong>。</td></tr><tr><td align="center">2</td><td align="left">连接被服务端拒绝，原因是<strong>不支持客户端标识符的编码</strong>。</td></tr><tr><td align="center">3</td><td align="left">连接被服务端拒绝，原因是<strong>服务端不可用</strong>。</td></tr><tr><td align="center">4</td><td align="left">连接被服务端拒绝，原因是<strong>用户名或密码无效</strong>。</td></tr><tr><td align="center">5</td><td align="left">连接被服务端拒绝，原因是<strong>客户端未被授权连接到此服务端</strong>。</td></tr></tbody></table><h3 id="报文内容（发布、订阅和取消订阅）"><a href="#报文内容（发布、订阅和取消订阅）" class="headerlink" title="报文内容（发布、订阅和取消订阅）"></a>报文内容（发布、订阅和取消订阅）</h3><h4 id="PUBLISH-–-发布消息"><a href="#PUBLISH-–-发布消息" class="headerlink" title="PUBLISH – 发布消息"></a>PUBLISH – 发布消息</h4><p>MQTT客户端发布消息时，会向服务端发送PUBLISH报文。以下是PUBLISH报文的详细信息：</p><!-- ![PUBLISH数据包报文内容](images/在ESP32-Arduino中使用MQTT/image-3.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/image-3.png" alt="PUBLISH数据包报文内容"></p><blockquote><ul><li><strong>topicName（主题名）</strong>：<br>主题名用于识别此信息应发布到哪一个主题。例如：<code>topic/1</code></li><li><strong>QoS（服务质量等级）</strong>：<br>QoS有三个级别：0、1和2。QoS决定MQTT通讯有什么样的服务保证。</li><li><strong>packetId（报文标识符）</strong>：<br>报文标识符可用于对MQTT报文进行标识。如果QoS等于0，报文标识符为0；只有QoS级别大于0时，报文标识符才是非零数值。</li><li><strong>retainFlag（保留标志）</strong>：<br>为<code>false</code>时客户端订阅了某一主题后，并不会马上接收到该主题的信息。为<code>true</code>时，客户端在订阅了某一主题后，马上接收到一条该主题的保留信息。</li><li><strong>Payload（有效载荷）</strong>：<br>有效載荷是我们希望通过MQTT所发送的实际内容。我们可以使用MQTT协议发送文本，图像等格式的内容。</li><li><strong>dupFlag（重发标志）</strong>：<br>当MQTT报文的接收方没有及时确认收到报文时，发送方会重复发送MQTT报文。在重复发送MQTT报文时，发送方会将此“重发标志”设置为true。请注意，重发标志只在QoS级别大于0时使用。</li></ul></blockquote><h4 id="SUBSCRIBE-–-订阅主题"><a href="#SUBSCRIBE-–-订阅主题" class="headerlink" title="SUBSCRIBE – 订阅主题"></a>SUBSCRIBE – 订阅主题</h4><p>客户端要想订阅主题，首先要向服务端发送主题订阅请求。客户端是通过向服务端发送SUBSCRIBE报文来实现这一请求的。</p><blockquote><ul><li><strong>topicName（主题名）</strong></li><li><strong>QoS（服务质量等级）</strong></li><li><strong>packetId（报文标识符）</strong></li></ul></blockquote><h4 id="SUBACK-–-订阅确认"><a href="#SUBACK-–-订阅确认" class="headerlink" title="SUBACK – 订阅确认"></a>SUBACK – 订阅确认</h4><p>服务端接收到客户端的订阅报文后，会向客户端发送SUBACK报文确认订阅。</p><p>SUBACK报文包含有“订阅返回码”和“报文标识符”这两个信息。</p><ul><li><strong>returnCode（订阅返回码）</strong></li></ul><p>客户端向服务端发送订阅请求后，服务端会给客户端返回一个订阅返回码。</p><p>这个返回码的作用是告知客户端是否成功订阅了主题。以下是返回码的详细说明：</p><table><thead><tr><th align="center"><strong>返回码</strong></th><th align="left"><strong>返回码描述</strong></th></tr></thead><tbody><tr><td align="center">0</td><td align="left">订阅成功 – QoS 0</td></tr><tr><td align="center">1</td><td align="left">订阅成功- QoS 1</td></tr><tr><td align="center">2</td><td align="left">订阅成功- QoS 2</td></tr><tr><td align="center">3</td><td align="left">订阅失败</td></tr></tbody></table><h4 id="UNSUBSCRIBE-–-取消订阅"><a href="#UNSUBSCRIBE-–-取消订阅" class="headerlink" title="UNSUBSCRIBE – 取消订阅"></a>UNSUBSCRIBE – 取消订阅</h4><p>顾名思义，当客户端要取消订阅某主题时，可通过向服务端发送UNSUBSCRIBE – 取消订阅报文来实现。</p><!-- ![PUBLISH数据包报文内容](images/在ESP32-Arduino中使用MQTT/image-4.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/image-4.png" alt="PUBLISH数据包报文内容"></p><p>报文内容详细的解读和理解可能会导致本篇文章的篇幅过长，这里指路太极创客关于MQTT报文内容的详细介绍：<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-tuttorial/mqtt-tutorial/">戳我看:D</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><blockquote><p>PC端：Windows11<br>主控：ESP32S3-R8（常见的模组和开发板都可以）<br>框架：Arduino</p></blockquote><blockquote><p>MQTT库：PubSubClient<br>作者名：Nick O’Leary<br>官网地址：<a href="https://pubsubclient.knolleary.net/">https://pubsubclient.knolleary.net/</a><br>GitHub：<a href="https://github.com/knolleary/pubsubclient/">https://github.com/knolleary/pubsubclient/</a></p></blockquote><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>在PC端安装相关的软件可以更加方便测试单片机的程序运行情况，因此我们需要安装一个MQTT协议软件，方便我们扮演发布端&#x2F;订阅端，来接收或者发布消息。这里推荐下载<code>MQTT.fx</code>！</p><ul><li><p>可以前往 MQTT.fx 的<a href="http://www.mqttfx.org/">官网</a>进行下载。</p></li><li><p>或者前往 太极创客 官网的下载页面进行下载<a href="http://www.taichi-maker.com/homepage/download/#mqtt">戳这里:P</a>（阿里嘎多太极创客！</p></li><li><p><strong>注：</strong>最新版本的<code>MQTT.fx</code>可能需要收费，学生党可以使用<code>MQTT.fx 1.7.1</code>版本，免费但是功能稍有阉割。</p></li><li><p>附：公用MQTT服务器列表（2024&#x2F;7&#x2F;21</p></li></ul><!-- ![热门的公用MQTT服务器列表](images/在ESP32-Arduino中使用MQTT/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E5%9C%A8ESP32-Arduino%E4%B8%AD%E4%BD%BF%E7%94%A8MQTT/image-2.png" alt="热门的公用MQTT服务器列表"></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="发布话题-传输字符串"><a href="#发布话题-传输字符串" class="headerlink" title="发布话题&amp;传输字符串"></a>发布话题&amp;传输字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Arduino.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;PubSubClient.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Ticker.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *id = <span class="hljs-string">&quot;HUGO&quot;</span>;    <span class="hljs-comment">// WIFI名称</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *pswd = <span class="hljs-string">&quot;xxxxxxxx&quot;</span>; <span class="hljs-comment">// WIFI密码</span><br><br><span class="hljs-comment">// broker-cn.emqx.io</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *mqttServer = <span class="hljs-string">&quot;broker-cn.emqx.io&quot;</span>;<br><br><span class="hljs-comment">// Ticker的计数变量</span><br><span class="hljs-type">int</span> count;<br><br>Ticker ticker;<br>WiFiClient wifiClient;<br><span class="hljs-function">PubSubClient <span class="hljs-title">mqttClient</span><span class="hljs-params">(wifiClient)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connectMQTTServer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 根据ESP32的MAC地址生成客户端ID（避免与其它ESP32的客户端ID重名）</span><br>  String clientId = <span class="hljs-string">&quot;esp32s3-&quot;</span> + WiFi.<span class="hljs-built_in">macAddress</span>();<br><br>  <span class="hljs-comment">// 连接MQTT服务器</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">connect</span>(clientId.<span class="hljs-built_in">c_str</span>()))<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MQTT Server Connected.&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server Address: &quot;</span>);<br>    <span class="hljs-built_in">printf</span>(mqttServer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ClientId:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, clientId.<span class="hljs-built_in">c_str</span>());<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, mqttClient.<span class="hljs-built_in">state</span>());<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">3000</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 发布信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pubMQTTmsg</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> value; <span class="hljs-comment">// 客户端发布信息用数字</span><br><br>  <span class="hljs-comment">// 建立发布主题。主题名称以Taichi-Maker-为前缀，后面添加设备的MAC地址。</span><br>  <span class="hljs-comment">// 这么做是为确保不同用户进行MQTT信息发布时，ESP8266客户端名称各不相同，</span><br>  String topicString = <span class="hljs-string">&quot;Taichi-Maker-Pub-&quot;</span> + WiFi.<span class="hljs-built_in">macAddress</span>();<br>  <span class="hljs-type">char</span> publishTopic[topicString.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>];<br>  <span class="hljs-built_in">strcpy</span>(publishTopic, topicString.<span class="hljs-built_in">c_str</span>());<br><br>  <span class="hljs-comment">// 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span><br>  String messageString = <span class="hljs-string">&quot;Hello World &quot;</span> + <span class="hljs-built_in">String</span>(value++);<br>  <span class="hljs-type">char</span> publishMsg[messageString.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>];<br>  <span class="hljs-built_in">strcpy</span>(publishMsg, messageString.<span class="hljs-built_in">c_str</span>());<br><br>  <span class="hljs-comment">// 实现ESP8266向主题发布信息</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">publish</span>(publishTopic, publishMsg))<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Publish Topic: %s\n&quot;</span>, publishTopic);<br>    <span class="hljs-comment">// printf(publishTopic);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Publish message: %s\n&quot;</span>, publishMsg);<br>    <span class="hljs-comment">// printf(publishMsg);</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Message Publish Failed.\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 初始化串口</span><br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>  <span class="hljs-comment">// 初始化WIFI</span><br>  WiFi.<span class="hljs-built_in">begin</span>(id, pswd);<br>  <span class="hljs-comment">// 判断wifi是否连接成功</span><br>  <span class="hljs-keyword">while</span> (WiFi.<span class="hljs-built_in">status</span>() != WL_CONNECTED)<br>  &#123;<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;正在连接...\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接成功！\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address: %s\n&quot;</span>, WiFi.<span class="hljs-built_in">localIP</span>().<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 打印本地IP地址</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dns: %s\n&quot;</span>, WiFi.<span class="hljs-built_in">dnsIP</span>().<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>());          <span class="hljs-comment">// 打印dns地址</span><br><br>  <span class="hljs-comment">// 设置MQTT服务器和端口号</span><br>  mqttClient.<span class="hljs-built_in">setServer</span>(mqttServer, <span class="hljs-number">1883</span>);<br><br>  <span class="hljs-comment">// 连接MQTT服务器</span><br>  <span class="hljs-built_in">connectMQTTServer</span>();<br><br>  <span class="hljs-comment">// Ticker定时对象</span><br>  ticker.<span class="hljs-built_in">attach</span>(<span class="hljs-number">1</span>, []()<br>                &#123; count++; &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 判断开发板是否成功连接服务器</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">connected</span>())<br>  &#123;<br>    <span class="hljs-comment">// 每隔三秒发布一次信息</span><br>    <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">3</span>)<br>    &#123;<br>      <span class="hljs-built_in">pubMQTTmsg</span>();<br>      count = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 保持客户端心跳</span><br>    mqttClient.<span class="hljs-built_in">loop</span>();<br>    <span class="hljs-comment">// printf(&quot;Okk\n&quot;);</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 重新尝试连接服务器</span><br>    <span class="hljs-built_in">connectMQTTServer</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Err\n&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="订阅单个话题"><a href="#订阅单个话题" class="headerlink" title="订阅单个话题"></a>订阅单个话题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Arduino.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WiFi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;PubSubClient.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *id = <span class="hljs-string">&quot;MagicEyes&quot;</span>;    <span class="hljs-comment">// WIFI名称</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *pswd = <span class="hljs-string">&quot;Zkl2002627&quot;</span>; <span class="hljs-comment">// WIFI密码</span><br><br><span class="hljs-comment">// broker-cn.emqx.io</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *mqttServer = <span class="hljs-string">&quot;broker-cn.emqx.io&quot;</span>;<br><br>WiFiClient wifiClient;<br><span class="hljs-function">PubSubClient <span class="hljs-title">mqttClient</span><span class="hljs-params">(wifiClient)</span></span>;<br><br><span class="hljs-comment">// 订阅指定主题</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">subscribeTopic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 建立订阅主题。主题名称以Taichi-Maker-Sub为前缀，后面添加设备的MAC地址。</span><br>  <span class="hljs-comment">// 这么做是为确保不同设备使用同一个MQTT服务器测试消息订阅时，所订阅的主题名称不同</span><br>  String topicString = <span class="hljs-string">&quot;Taichi-Maker-Sub-&quot;</span> + WiFi.<span class="hljs-built_in">macAddress</span>();<br>  <span class="hljs-type">char</span> subTopic[topicString.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>];<br>  <span class="hljs-built_in">strcpy</span>(subTopic, topicString.<span class="hljs-built_in">c_str</span>());<br><br>  <span class="hljs-comment">// 通过串口监视器输出是否成功订阅主题以及订阅的主题名称</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">subscribe</span>(subTopic))<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Subscrib Topic: %s\n&quot;</span>, subTopic);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Subscribe Fail...\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connectMQTTServer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 根据ESP32的MAC地址生成客户端ID（避免与其它ESP32的客户端ID重名）</span><br>  String clientId = <span class="hljs-string">&quot;esp32s3-&quot;</span> + WiFi.<span class="hljs-built_in">macAddress</span>();<br><br>  <span class="hljs-comment">// 连接MQTT服务器</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">connect</span>(clientId.<span class="hljs-built_in">c_str</span>()))<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MQTT Server Connected.&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server Address: &quot;</span>);<br>    <span class="hljs-built_in">printf</span>(mqttServer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ClientId:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, clientId.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">subscribeTopic</span>(); <span class="hljs-comment">// 订阅指定主题</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, mqttClient.<span class="hljs-built_in">state</span>());<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">3000</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 收到信息后的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveCallback</span><span class="hljs-params">(<span class="hljs-type">char</span> *topic, byte *payload, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Message Received [%d]&quot;</span>, topic);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (<span class="hljs-type">char</span>)payload[i]);<br>  &#125;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Message Length(Bytes) %d\n&quot;</span>, length);<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-type">char</span>)payload[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>  &#123; <span class="hljs-comment">// 如果收到的信息以“1”为开始</span><br>    <span class="hljs-comment">// digitalWrite(BUILTIN_LED, LOW); // 则点亮LED。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LED ON\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// digitalWrite(BUILTIN_LED, HIGH); // 否则熄灭LED。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LED OFF\n&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 初始化串口</span><br>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>  <span class="hljs-comment">// 初始化WIFI</span><br>  WiFi.<span class="hljs-built_in">begin</span>(id, pswd);<br>  <span class="hljs-comment">// 判断wifi是否连接成功</span><br>  <span class="hljs-keyword">while</span> (WiFi.<span class="hljs-built_in">status</span>() != WL_CONNECTED)<br>  &#123;<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;正在连接...\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接成功！\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address: %s\n&quot;</span>, WiFi.<span class="hljs-built_in">localIP</span>().<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 打印本地IP地址</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dns: %s\n&quot;</span>, WiFi.<span class="hljs-built_in">dnsIP</span>().<span class="hljs-built_in">toString</span>().<span class="hljs-built_in">c_str</span>());          <span class="hljs-comment">// 打印dns地址</span><br><br>  <span class="hljs-comment">// 设置MQTT服务器和端口号</span><br>  mqttClient.<span class="hljs-built_in">setServer</span>(mqttServer, <span class="hljs-number">1883</span>);<br>  <span class="hljs-comment">// 设置MQTT订阅回调函数</span><br>  mqttClient.<span class="hljs-built_in">setCallback</span>(receiveCallback);<br>  <span class="hljs-comment">// 连接MQTT服务器</span><br>  <span class="hljs-built_in">connectMQTTServer</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// 判断开发板是否成功连接服务器</span><br>  <span class="hljs-keyword">if</span> (mqttClient.<span class="hljs-built_in">connected</span>())<br>  &#123;<br>    <span class="hljs-comment">// 保持客户端心跳</span><br>    mqttClient.<span class="hljs-built_in">loop</span>();<br>    <span class="hljs-comment">// printf(&quot;Okk\n&quot;);</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 重新尝试连接服务器</span><br>    <span class="hljs-built_in">connectMQTTServer</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Err\n&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>再次感谢太极创客团队的开源教程！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>Arduino</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记丨7月：最近在学习网络编程...</title>
    <link href="/2024/07/14/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/7%E6%9C%88/README/"/>
    <url>/2024/07/14/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/7%E6%9C%88/README/</url>
    
    <content type="html"><![CDATA[<h3 id="杂记丨7月：最近在学习网络编程…"><a href="#杂记丨7月：最近在学习网络编程…" class="headerlink" title="杂记丨7月：最近在学习网络编程…"></a>杂记丨7月：最近在学习网络编程…</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>一直有一个机器人梦啊，这回不能再gugubird啦。只不过刚好碰上忙时，知识点零散，一点点慢慢积累吧。</p><hr><h3 id="【2024-07-14】找到一个有趣且强大的网络工具Socat"><a href="#【2024-07-14】找到一个有趣且强大的网络工具Socat" class="headerlink" title="【2024&#x2F;07&#x2F;14】找到一个有趣且强大的网络工具Socat"></a>【2024&#x2F;07&#x2F;14】找到一个有趣且强大的网络工具<code>Socat</code></h3><p><strong>Socat</strong>或<strong>SOcket CAT</strong>是一个基于 Linux 命令行&#x2F;终端的实用程序，用于在两个双向字节流之间建立和传输数据。</p><p>在linux环境<code>(Debian/Ubuntu)</code>下安装socat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sudo apt-get update</span><br><br>sudo apt-get install socat<br></code></pre></td></tr></table></figure><ul><li><strong>1.接着可以尝试一个简单的TCP通信测试</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 分别打开两个终端窗口</span><br><br><span class="hljs-comment"># 窗口1输入以下命令，监听端口5555</span><br>socat -d -d TCP-LISTEN:5555 -<br><br><span class="hljs-comment"># 窗口2输入以下命令，连接端口5555</span><br><span class="hljs-comment"># ip地址可以使用ifconfig指令查询</span><br><br><span class="hljs-comment"># 这条指令是全双工的</span><br><span class="hljs-comment"># 连接成功以后，可以在各自的窗口发言，信息会传送到对方的窗口！</span><br>socat -d -d TCP-CONNECT:192.168.26.163:5555 -<br><br><span class="hljs-comment"># 这条指令是单工的</span><br><span class="hljs-comment"># 连接成功以后，监听窗口只能听不能发，只有发送窗口可以发！</span><br>socat - TCP:192.168.26.163:5555<br><br><span class="hljs-comment"># 上述的所有TCP可以更换为UDP，就会得到UDP通信！</span><br></code></pre></td></tr></table></figure><!-- ![socat-TCP](images/杂记/2024年/7月/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/7%E6%9C%88/image.png" alt="socat-TCP"></p><ul><li><strong>2.创建两个虚拟串口并转发数据</strong></li></ul><p>打开一个新终端窗口，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat -d -d pty,raw,<span class="hljs-built_in">echo</span>=0 pty,raw,<span class="hljs-built_in">echo</span>=0<br></code></pre></td></tr></table></figure><p>返回结果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2024/07/14 20:39:00 socat[2297] N PTY is /dev/pts/1<br>2024/07/14 20:39:00 socat[2297] N PTY is /dev/pts/2<br>2024/07/14 20:39:00 socat[2297] N starting data transfer loop with FDs [5,5] and [7,7]<br></code></pre></td></tr></table></figure><p>创建了<code>/dev/pts/1</code>和<code>/dev/pts/2</code>两个串口，并且将两个串口连接起来，此时打开两个终端，在终端1输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 去到对应的文件夹</span><br><span class="hljs-built_in">cd</span> /dev/pts/<br><span class="hljs-built_in">cat</span> &lt; 1<br></code></pre></td></tr></table></figure><p>在另一个新终端，终端2中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 去到对应的文件夹</span><br><span class="hljs-built_in">cd</span> /dev/pts/<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;abc&quot;</span> &gt; 2<br></code></pre></td></tr></table></figure><p>此时在终端1上就会显示<code>abc</code>数据，此时说明<code>/dev/pts/2</code>把数据传输到了<code>/dev/pts/1</code>.</p><!-- ![socat-UART](images/杂记/2024年/7月/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/7%E6%9C%88/image-1.png" alt="socat-UART"></p><p><strong>上面创建的串口，在不同的机器上名称可能不一致，对于调试、测试来讲很麻烦，下面给出解决方法！</strong></p><ul><li><strong>3.创建“固定名称”的串口</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用link即可把创建的虚拟的串口映射到任何你有权限的位置（这里是home目录）</span><br> socat -d -d pty,raw,<span class="hljs-built_in">echo</span>=0,<span class="hljs-built_in">link</span>=<span class="hljs-variable">$HOME</span>/socatpty1 pty,raw,<span class="hljs-built_in">echo</span>=0,<span class="hljs-built_in">link</span>=<span class="hljs-variable">$HOME</span>/socatpty2 <br></code></pre></td></tr></table></figure><p>返回内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2024/07/14 20:57:47 socat[3041] N PTY is /dev/pts/1<br>2024/07/14 20:57:47 socat[3041] N PTY is /dev/pts/2<br>2024/07/14 20:57:47 socat[3041] N starting data transfer loop with FDs [5,5] and [7,7]<br></code></pre></td></tr></table></figure><p>创建串口并设置串口参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat -d -d pty,raw,b19200,csize=3,cstopb=1,parenb=1,parodd=1,<span class="hljs-built_in">echo</span>=0,<span class="hljs-built_in">link</span>=<span class="hljs-variable">$HOME</span>/socatpty1 pty,raw,b19200,csize=3,cstopb=1,parenb=1,parodd=1,<span class="hljs-built_in">echo</span>=0,<span class="hljs-built_in">link</span>=<span class="hljs-variable">$HOME</span>/socatpty2<br></code></pre></td></tr></table></figure><p>解释如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. b19200 <span class="hljs-comment"># 设置波特率为19200</span><br>2. csize3 <span class="hljs-comment"># 设置character size为8</span><br>3. cstopb=1 <span class="hljs-comment"># 设置两个停止位</span><br>4. parenb=1 <span class="hljs-comment"># 不进行奇偶检测</span><br>5. parodd=1 <span class="hljs-comment"># 奇校验</span><br></code></pre></td></tr></table></figure><p>类似参数还有很多很多，请查阅相关的帮助<a href="http://www.dest-unreach.org/socat/doc/socat.html">文档</a></p><!-- ![socat-UART](images/杂记/2024年/7月/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/%E6%9D%82%E8%AE%B0/2024%E5%B9%B4/7%E6%9C%88/image-2.png" alt="socat-UART"></p><hr><h3 id="【2024-07-16】浅薄地了解Cmake"><a href="#【2024-07-16】浅薄地了解Cmake" class="headerlink" title="【2024&#x2F;07&#x2F;16】浅薄地了解Cmake"></a>【2024&#x2F;07&#x2F;16】浅薄地了解<code>Cmake</code></h3><blockquote><p>最近要学习的东西用到很多makefile的知识，但是我横竖怎么写都不得心应手。那不如学学Cmake工具好了（其实是信号与系统学累了在摸鱼…</p></blockquote><p>找到一个关于<code>Cmake</code>的优良教程，阿里嘎多这位作者：<a href="https://subingwen.cn/cmake/CMake-primer/">教程戳我:)</a></p><hr><h3 id="【2024-7-27】tar：常用的文件打包和压缩工具"><a href="#【2024-7-27】tar：常用的文件打包和压缩工具" class="headerlink" title="【2024&#x2F;7&#x2F;27】tar：常用的文件打包和压缩工具"></a>【2024&#x2F;7&#x2F;27】tar：常用的文件打包和压缩工具</h3><blockquote><p>最近遇到镜像压缩、解压缩的小问题，找到这些tar常用的命令，这里统一收集一下。</p></blockquote><p>当然还有其他的工具比如zip、unzip等，这里只讲解tar，其他自行百度吧！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar [选项] [压缩文件名] [文件或目录...]<br></code></pre></td></tr></table></figure><p>常用的选项包括：</p><ul><li><code>-c</code>：创建压缩文件</li><li><code>-x</code>：提取压缩文件</li><li><code>-z</code>：使用<code>gzip</code>算法压缩文件</li><li><code>-j</code>：使用<code>bzip2</code>算法压缩文件</li><li><code>-J</code>：使用<code>xz</code>算法压缩文件</li><li><code>-f</code>：指定归档文件的名称</li><li><code>-v</code>：显示详细的处理信息</li></ul><p><code>-z -j -J</code>这三种参数如何选择？<br>如果对时间比较敏感，可以使用<code>-z</code>参数进行<code>gzip</code>压缩，虽然压缩率比较低，但是速度较快。<br>而如果您对压缩率比较看重，可以选择<code>-j</code>参数进行<code>bzip2</code>压缩，尽管速度较慢，但压缩率比较高。<br>如果您对压缩率要求非常高，可以选择<code>-J</code>参数进行<code>xz</code>压缩，这需要更长的时间。</p><p><br></br></p><p>下面提供几个常见的后缀名和对应的压缩和解压命令，大家不用过于纠结命令组合，以后看见相应的后缀直接用对应的命令就行。</p><ol><li><code>.tar.gz 或 .tgz</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 压缩：tar -czf package.tar.gz file1.txt file.txt directory<br>2 解压缩：tar -xzf package.tar.gz<br></code></pre></td></tr></table></figure><ol start="2"><li><code>.tar.bz2 或 .tbz2</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 压缩：tar -cjf package.tar.bz2 file1.txt file.txt directory<br>2 解压缩：tar -xjf package.tar.bz2<br></code></pre></td></tr></table></figure><ol start="3"><li><code>.tar.xz</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 压缩：tar -cJf package.tar.xz file1.txt file.txt directory<br>2 解压缩：tar -xJf package.tar.xz<br></code></pre></td></tr></table></figure><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>鸣谢文章的思路：<a href="https://blog.csdn.net/hitgavin/article/details/116162329">https://blog.csdn.net/hitgavin/article/details/116162329</a></li><li>鸣谢文章答疑解惑，我对此内容做了搬运：<a href="https://lianshaohua.blog.csdn.net/article/details/135709779">https://lianshaohua.blog.csdn.net/article/details/135709779</a></li><li>鸣谢文档：<a href="https://lceda001.feishu.cn/wiki/WXwJw77ZRitCiYkimVGcO5q5nGh">https://lceda001.feishu.cn/wiki/WXwJw77ZRitCiYkimVGcO5q5nGh</a></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Web</tag>
      
      <tag>Socat</tag>
      
      <tag>Cmake</tag>
      
      <tag>tar</tag>
      
      <tag>record</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ROS】ROS的搭建与安装</title>
    <link href="/2024/06/24/%E6%88%91%E7%9A%84ROS%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/ROS%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%AE%89%E8%A3%85/README/"/>
    <url>/2024/06/24/%E6%88%91%E7%9A%84ROS%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/ROS%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%AE%89%E8%A3%85/README/</url>
    
    <content type="html"><![CDATA[<h3 id="【ROS】ROS的搭建与安装"><a href="#【ROS】ROS的搭建与安装" class="headerlink" title="【ROS】ROS的搭建与安装"></a>【ROS】ROS的搭建与安装</h3><h3 id="【ROS】Setup-and-Installation"><a href="#【ROS】Setup-and-Installation" class="headerlink" title="【ROS】Setup and Installation"></a>【ROS】Setup and Installation</h3><h3 id="Author：-kkl"><a href="#Author：-kkl" class="headerlink" title="Author：@kkl"></a>Author：@kkl</h3><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><blockquote><p>PC端：Win11</p></blockquote><blockquote><p>虚拟机：VirturalBox<br>Ubuntu版本：20.04.6<br>ROS版本：noetic</p></blockquote><h3 id="虚拟机的准备"><a href="#虚拟机的准备" class="headerlink" title="虚拟机的准备"></a>虚拟机的准备</h3><p>virturalBox安装Ubuntu20.04的流程步骤：<a href="https://blog.csdn.net/xiangbing911/article/details/108614181">戳这里:)</a></p><p>virtualBox安装Ubuntu时看不到继续按钮的解决办法：<a href="https://blog.csdn.net/Ratib/article/details/128167397">戳这里:P</a></p><p>virtualBox共享文件夹解决方法：<a href="https://blog.csdn.net/qq_57209192/article/details/124697935">戳这儿:-0</a></p><ul><li>最最关键的就是在于增强功能包的安装，如果没有实现共享文件夹功能，请手动使用该命令重新安装增强功能包：<code>sudo apt-get install virtualbox-guest-dkms</code></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-ROS常规安装方法"><a href="#1-ROS常规安装方法" class="headerlink" title="1. ROS常规安装方法"></a>1. ROS常规安装方法</h3><p>ROS的安装主要是网络问题居多，以下找到一个手把手安装ROS的教程<a href="https://blog.csdn.net/qq_64671439/article/details/135287166">戳这里:)</a></p><p>解决<code>rosdep</code>安装时遇到的各种问题的方法<a href="https://blog.csdn.net/luoluonuoyasuolong/article/details/128999527">戳这里:0</a></p><h3 id="2-ROS安装的超快速方法-鱼香ROS"><a href="#2-ROS安装的超快速方法-鱼香ROS" class="headerlink" title="2. ROS安装的超快速方法 -&gt; 鱼香ROS"></a>2. ROS安装的超快速方法 -&gt; 鱼香ROS</h3><p>这个是最懒人的安装方法了，让我们齐说感谢大佬-&gt;<a href="https://blog.csdn.net/m0_73745340/article/details/135281023">教程戳这里:)</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>感谢以上教程的各位发布者！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ROS</tag>
      
      <tag>SLAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【树莓派】YOLOv5实时识别loopy全流程😒</title>
    <link href="/2024/06/19/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/06/19/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="【树莓派】YOLOv5实时识别loopy全流程😒"><a href="#【树莓派】YOLOv5实时识别loopy全流程😒" class="headerlink" title="【树莓派】YOLOv5实时识别loopy全流程😒"></a>【树莓派】YOLOv5实时识别loopy全流程😒</h3><h3 id="【Raspberry-PI】-YOLOv5-identifies-the-loopy-in-real-time"><a href="#【Raspberry-PI】-YOLOv5-identifies-the-loopy-in-real-time" class="headerlink" title="【Raspberry PI】 YOLOv5 identifies the loopy in real time"></a>【Raspberry PI】 YOLOv5 identifies the loopy in real time</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/loopy1.jpg"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8YOLOv5%E5%AE%9E%E6%97%B6%E8%AF%86%E5%88%ABloopy%E5%85%A8%E6%B5%81%E7%A8%8B/loopy2.jpg"></p><hr><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><ul><li>PC：Win11, GTX3060(4GB)</li><li>硬件：Raspberry Pi 4B</li><li>摄像头：中星微摄像头（型号：USB301PL）</li><li>镜像版本：2022-09-22-raspios-bullseye-arm64.img</li><li>树莓派Python版本：<code>3.9.2</code></li></ul></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>请提前确认摄像头和OpenCV是否可以正常使用，详情请查看我从前的文章<code>【树莓派】OpenCV的环境安装与基本使用</code>。</p><h2 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h2><ul><li>关联的Github仓库<a href="https://github.com/ZhangKeLiang0627/YOLOv5-loopy-RaspberryPi">戳这里</a>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">RaspberryPiDeployYOLOv5/<br>├─1.yolov5ForTrain <span class="hljs-comment"># 用于PC端进行模型训练</span><br>└─2.yolov5ForDetect <span class="hljs-comment"># 用于树莓派进行实时推理</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="一、准备运动"><a href="#一、准备运动" class="headerlink" title="一、准备运动"></a>一、准备运动</h2><h2 id="1-对树莓派"><a href="#1-对树莓派" class="headerlink" title="1. 对树莓派"></a>1. 对树莓派</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ol><li><p>Pytorch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装torch</span><br>pip install torch==1.8.1<br><span class="hljs-comment"># 安装torchvision</span><br>pip install torchvision==0.9.1<br></code></pre></td></tr></table></figure></li><li><p>YOLOv5</p></li></ol><ul><li><a href="https://github.com/ZhangKeLiang0627/YOLOv5-loopy-RaspberryPi">戳这里:)</a>下载YOLOv5的依赖，这是已经整理好适配此Python版本树莓派的包。</li><li>将下载完的<code>yolov5-master.zip</code>放到树莓派文件路径<code>home/pi/Download/</code>中，并输入命令<code>unzip yolov5-master.zip</code>将压缩包解压到当前目录。</li><li>解压完成后，<code>cd yolov5-master/</code>进入文件夹。</li><li>使用命令<code>pip install -r requirement.txt</code>安装依赖，时间会比较长，最终看见<code>Successfully</code>类似字样则表示安装成功。</li></ul><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><ul><li>下载：<a href="https://github.com/ZhangKeLiang0627/YOLOv5-loopy-RaspberryPi">戳这里:)</a>下载<code>yolov5s.pt</code>，这是YOLOv5的预训练权重文件，后续将使用此模型来进行示例测试。</li><li>文件传输：将此模型复制到之前解压好的<code>yolov5-master</code>文件夹当中。</li><li>运行代码：在<code>yolov5-master</code>文件夹中，运行命令<code>python detect.py</code>，倘若出现<code>Results saved to run/detect/expX</code>，代表代码执行成功，你可以前往此路径查看预测结果图片。</li></ul><h2 id="2-对Windows端PC"><a href="#2-对Windows端PC" class="headerlink" title="2. 对Windows端PC"></a>2. 对Windows端PC</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n yolov5_60 python=3.8<br><br>conda activate yolov5_60<br></code></pre></td></tr></table></figure><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><ol><li><p>Pytorch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118<br></code></pre></td></tr></table></figure></li><li><p>YOLOv5</p></li></ol><ul><li><a href="https://github.com/ZhangKeLiang0627/YOLOv5-loopy-RaspberryPi">戳这里:)</a>下载YOLOv5的依赖，这是在PC端训练使用的包，此包中已经含有<code>yolov5s.pt</code>。</li><li>解压完成后，进入文件夹。</li><li>使用命令<code>pip install -r requirement.txt</code>安装依赖，时间会比较长，最终看见<code>Successfully</code>类似字样则表示安装成功。发生报错不要紧，要是模块没有当前的版本，我们就挑一个稍微靠近的版本就行。</li><li>训练模型：<code>train.py</code>中的参数已经手动进行修改，使用命令<code>python train.py</code>，训练完成会在<code>runs/train/expX/weight</code>中生成训练好的模型，我们将<code>test.pt</code>扔到树莓派解压后的文件夹中即可。</li></ul><blockquote><p>常见报错</p><ul><li>报错：RuntimeError: result type Float can’t be cast to the desired output type __int64 -&gt; <a href="https://blog.csdn.net/qq_43573527/article/details/132963466">解决方法</a></li><li>报错：cache文件已存在 -&gt; 解决方法：前往<code>data/loopy/labels</code>删除所有文件后缀<code>.cache</code>的文件即可。</li></ul></blockquote><hr><h2 id="二、推理运动"><a href="#二、推理运动" class="headerlink" title="二、推理运动"></a>二、推理运动</h2><h3 id="1-对树莓派-1"><a href="#1-对树莓派-1" class="headerlink" title="1. 对树莓派"></a>1. 对树莓派</h3><p><code>cd home/pi/Download/yolov5-master/</code>，输入命令<code>python3 detect.py --weight best_loopy.pt --source 0</code>，注意<code>best_loopy.pt</code>即为我们在PC端训练好的模型！<code>--source 0</code>表示使用摄像头实时进行识别。</p><h3 id="2-对PC端"><a href="#2-对PC端" class="headerlink" title="2. 对PC端"></a>2. 对PC端</h3><p><code>python detect.py --weight best_loopy.pt --source 0</code></p><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>可可爱爱的loopy来自这里<a href="https://github.com/ZhangKeLiang0627/YOLOv8-loopy">数据集来源</a>。</li><li>关联的Github仓库<a href="https://github.com/ZhangKeLiang0627/YOLOv5-loopy-RaspberryPi">戳这里</a>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>RaspberryPi</tag>
      
      <tag>OpenCV</tag>
      
      <tag>YOLOv5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【树莓派】OpenCV的环境安装与基本使用</title>
    <link href="/2024/06/17/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84OpenCV%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84OpenCV%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/06/17/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84OpenCV%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84OpenCV%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="【树莓派】OpenCV的环境安装与基本使用"><a href="#【树莓派】OpenCV的环境安装与基本使用" class="headerlink" title="【树莓派】OpenCV的环境安装与基本使用"></a>【树莓派】OpenCV的环境安装与基本使用</h3><h3 id="【Raspberry-PI】-OpenCV-environment-installation-and-basical-usage"><a href="#【Raspberry-PI】-OpenCV-environment-installation-and-basical-usage" class="headerlink" title="【Raspberry PI】 OpenCV environment installation and basical usage"></a>【Raspberry PI】 OpenCV environment installation and basical usage</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><hr><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><ul><li>硬件：Raspberry Pi 4B</li><li>摄像头：中星微摄像头（型号：USB301PL）</li><li>镜像版本：2022-09-22-raspios-bullseye-arm64.img</li><li>Python版本：<code>3.9.2</code></li></ul></blockquote><hr><h2 id="摄像头安装"><a href="#摄像头安装" class="headerlink" title="摄像头安装"></a>摄像头安装</h2><p>我这里使用的是某宝随便淘来的<strong>linux免驱动USB摄像头</strong>，下面讲解几个安装摄像头时的注意事项：</p><ul><li>先将摄像头连接上树莓派，再将树莓派上电开机，不然树莓派无法识别设备。</li><li>输入<code>lsusb</code>命令查看当前的USB总线上面有没有挂载Camera字样的设备，如果有就说明摄像头连接成功了。</li><li>如果不是USB摄像头，可以输入<code>ls /dev/video*</code>命令，查看是否有<code>/dev/video0</code>设备。如果设备存在，则说明摄像头挂载成功。</li></ul><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装opencv</span><br>pip install opencv-python<br><br><span class="hljs-comment"># 由于opencv只支持 numpy v1.x 版本</span><br><span class="hljs-comment"># 这里进行numpy版本的统一</span><br>pip install numpy==1.19.3<br></code></pre></td></tr></table></figure><h2 id="环境验证"><a href="#环境验证" class="headerlink" title="环境验证"></a>环境验证</h2><ol><li><p>使用命令行<code>python3</code>，打开Python交互模式。</p></li><li><p>在Python交互模式中输入以下命令，对cv2模块进行验证，如果没有报错并显示出当前的cv2版本则环境已经安装成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>cv2.__version__<br></code></pre></td></tr></table></figure></li><li><p>在路径 <code>/home/pi/Downloads</code> 创建一个<code>testCV2.py</code>文件，并填入下方代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 调用摄像头‘0’一般是打开电脑自带摄像头，‘1’是打开外部摄像头（只有一个摄像头的情况）</span><br>width = <span class="hljs-number">1280</span><br>height = <span class="hljs-number">960</span><br>cap.<span class="hljs-built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, width)  <span class="hljs-comment"># 设置图像宽度</span><br>cap.<span class="hljs-built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, height)  <span class="hljs-comment"># 设置图像高度</span><br><span class="hljs-comment"># 显示图像</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <br>    ret, frame = cap.read()  <span class="hljs-comment"># 读取图像(frame就是读取的视频帧，对frame处理就是对整个视频的处理)</span><br>    <span class="hljs-comment"># print(ret)</span><br>    <span class="hljs-comment"># 例如将图像灰度化处理</span><br>    img=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 转灰度图</span><br>    <br>    cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>    <span class="hljs-comment"># 图像不处理的情况</span><br>    cv2.imshow(<span class="hljs-string">&quot;frame&quot;</span>, frame)    <br> <br>    input_str = cv2.waitKey(<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">if</span> input_str == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):  <span class="hljs-comment"># 如过输入的是q就break，结束图像显示，鼠标点击视频画面输入字符</span><br>        <span class="hljs-keyword">break</span><br>    <br>cap.release()  <span class="hljs-comment"># 释放摄像头</span><br>cv2.destroyAllWindows()  <span class="hljs-comment"># 销毁窗口</span><br></code></pre></td></tr></table></figure></li><li><p>最后在<strong>VNC远程登录模式</strong>或者在<strong>树莓派图形界面操作系统</strong>下，在命令行中输入指令<code>cd /home/pi/Downloads/</code>，接着执行指令<code>python3 testCV2.py</code>。幸运的话，你会看到摄像头捕捉到的原画面和经过处理的灰度画面两个窗口，按下<code>q</code>键即可退出代码程序。到这里OpenCV的环境安装和基本使用就完成啦！</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>RaspberryPi</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32S3接入百度在线语音合成</title>
    <link href="/2024/03/26/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/README/"/>
    <url>/2024/03/26/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/README/</url>
    
    <content type="html"><![CDATA[<h1 id="ESP32S3接入百度在线语音合成"><a href="#ESP32S3接入百度在线语音合成" class="headerlink" title="ESP32S3接入百度在线语音合成"></a>ESP32S3接入百度在线语音合成</h1><h2 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h2><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>使用ESP32S3接入百度在线语音合成，其实是为我后面的某个小项目做铺垫啦！这里记录一下实现的过程。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>主控：ESP32S3N16R8</li><li>平台：Arduino + PlatformIO + VScode</li></ul><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><blockquote><p>大部分内容都和语音识别那趴差不多，百度的语音识别和语音合成是共用同一个应用的，如果创建过了就直接使用相同的就行，密钥和token都是共用的，我就直接搬过来了，只有在POST的时候稍微有些区别，我也贴出了具体的代码和示例。</p></blockquote><ol><li>在百度智能云控制端选择<code>语音技术</code>并创建应用获取<code>API Key</code>和<code>Secret Key</code></li><li>根据创建应用生成的<code>API Key</code>和<code>Secret Key</code>来获取<code>access_token</code></li><li>在ESP32S3中发送POST请求API</li></ol><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-创建语音合成应用"><a href="#1-创建语音合成应用" class="headerlink" title="1. 创建语音合成应用"></a>1. 创建语音合成应用</h3><p>登录百度智能云的云账号，选择语音识别，创建一个新应用。<strong>（注意：分清楚百度账号还是云账号，这两个不一样的）</strong><br>百度智能云：<a href="https://login.bce.baidu.com/?redirect=https://console.bce.baidu.com/ai/#/ai/speech/app/list">https://login.bce.baidu.com/?redirect=https%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/speech/app/list</a></p><!-- ![](images/ESP32S3接入百度在线语音合成/image.png) --><!-- ![](images/ESP32S3接入百度在线语音合成/image-1.png) --><!-- ![](images/ESP32S3接入百度在线语音合成/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/image.png"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/image-1.png"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/image-2.png"></p><h3 id="2-根据创建应用生成的API-Key和Secret-Key来获取access-token"><a href="#2-根据创建应用生成的API-Key和Secret-Key来获取access-token" class="headerlink" title="2. 根据创建应用生成的API Key和Secret Key来获取access_token"></a>2. 根据创建应用生成的API Key和Secret Key来获取access_token</h3><p>创建好应用，在应用列表里会出现你刚刚创建的应用，当然<code>API Key</code>和<code>Secret Key</code>也有啦</p><!-- ![](images/ESP32S3接入百度在线语音合成/image-3.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/image-3.png"></p><p>有了<code>API Key</code>和<code>Secret Key</code>，下面我们可以在ESP32S3上进行GET请求得到access_token的代码！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 获取token */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gainToken</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>   </span><br><span class="hljs-function"></span>&#123;<br>    HTTPClient http_client; <span class="hljs-comment">// #include &lt;HTTPClient.h&gt;</span><br>    <span class="hljs-comment">//注意，要把下面网址中的your_apikey和your_secretkey替换成自己的API Key和Secret Key</span><br>    http_client.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=your_apikey&amp;client_secret=your_secretkey&quot;</span>);<br>    <span class="hljs-type">int</span> httpResponseCode = http_client.<span class="hljs-built_in">GET</span>();<br><br>    <span class="hljs-keyword">if</span>(httpResponseCode == HTTP_CODE_OK)<br>    &#123;<br>        String response = http_client.<span class="hljs-built_in">getString</span>();<br>        Serial.<span class="hljs-built_in">println</span>(response);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http_client.<span class="hljs-built_in">errorToString</span>(httpResponseCode).<span class="hljs-built_in">c_str</span>());<br>    &#125;<br>    http_client.<span class="hljs-built_in">end</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>请求成功会返回如下数据，我们主要关注<code>access_token</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;refresh_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;25.b55fe1d287227ca97aab219bb249b8ab.315360000.1798284651.282335-8574074&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2592000</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;public wise_adapt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;session_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9mzdDZXu3dENdFZQurfg0Vz8slgSgvvOAUebNFzyzcpQ5EnbxbF+hfG9DQkpUVQdh4p6HbQcAiz5RmuBAja1JJGgIdJI&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24.6c5e1ff107f0e8bcef8c46d3424a0e78.2592000.1485516651.282335-8574074&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;session_secret&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dfac94a3489fe9fca7c3221cbf7525ff&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>access_token</code>对应的值就是可用的token，每次申请的<code>token</code>有效期限为30天，过期就需要重新申请。所以咱定时更新<code>access_token</code>就行，不用每次调用语音识别或合成都申请一遍。</li></ul><h3 id="3-发送文本数据，通过POST请求发送到语音合成API上"><a href="#3-发送文本数据，通过POST请求发送到语音合成API上" class="headerlink" title="3. 发送文本数据，通过POST请求发送到语音合成API上"></a>3. 发送文本数据，通过POST请求发送到语音合成API上</h3><p>下面是数据上传的格式说明：</p><!-- ![](images/ESP32S3接入百度在线语音合成/image-4.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90/image-4.png"></p><p>下面是ESP32S3的具体实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> payload[<span class="hljs-number">8000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">/* 在线语音合成 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speechSynthesis</span><span class="hljs-params">(String inputText)</span></span><br><span class="hljs-function"></span>&#123;<br>  HTTPClient http_client;<br><br>  _LOG(<span class="hljs-string">&quot;[Synthesis] Start Synthesis!\r\n&quot;</span>);<br><br>  <span class="hljs-built_in">memset</span>(payload, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-built_in">strlen</span>(payload)); <span class="hljs-comment">// 将数组清空</span><br><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;tex=&quot;</span>); <span class="hljs-comment">// 合成的文本，UTF-8编码格式</span><br>  <span class="hljs-built_in">strcat</span>(payload, inputText.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 合成的文本，UTF-8编码格式</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;lan=zh&quot;</span>); <span class="hljs-comment">// 语言选择，目前只有中英文混合模式，填写固定值zh</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;cuid=hugokkl&quot;</span>); <span class="hljs-comment">// 识别码，随便几个字符，但最好唯一</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;ctp=1&quot;</span>); <span class="hljs-comment">// 客户端类型选择，web端填写固定值1</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;spd=7&quot;</span>); <span class="hljs-comment">// 语速，取值0-15，默认为5中语速</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;pit=5&quot;</span>); <span class="hljs-comment">// 音调，取值0-15，默认为5中语调</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;vol=15&quot;</span>); <span class="hljs-comment">// 音量，基础音库取值0-9，精品音库取值0-15，默认为5中音量</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;per=5118&quot;</span>); <span class="hljs-comment">// 基础音库，度丫丫=4，精品音库，度小鹿=5118</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;aue=5&quot;</span>); <span class="hljs-comment">// 3为mp3格式(默认)；4为pcm-16k；5为pcm-8k；6为wav（内容同pcm-16k）</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&amp;tok=24.fc3481a177dfe90487fa0c3ce0892530.2592000.1713939400.282335-57684431&quot;</span>); <span class="hljs-comment">// access_token</span><br><br>  http_client.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;http://tsn.baidu.com/text2audio&quot;</span>);<br><br>  http_client.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 5s超时时间</span><br>  <span class="hljs-type">int</span> httpResponseCode = http_client.<span class="hljs-built_in">POST</span>(payload);<br><br>  <span class="hljs-keyword">if</span> (httpResponseCode == HTTP_CODE_OK)<br>  &#123;<br>    WiFiClient response;<br>    <span class="hljs-type">uint32_t</span> streamLength = http_client.<span class="hljs-built_in">getSize</span>();<br>    _LOG(<span class="hljs-string">&quot;streamSize:%d\r\n&quot;</span>, streamLength);<br><br>    response = http_client.<span class="hljs-built_in">getStream</span>();<br><br>    <span class="hljs-keyword">while</span> (!response.<span class="hljs-built_in">available</span>()) <span class="hljs-comment">// 等待数据流可获取</span><br>    &#123;<br>    &#125;<br><br>    streamLength = <span class="hljs-built_in">min</span>(streamLength, _samples * <span class="hljs-number">2</span>);<br><br>    response.<span class="hljs-built_in">readBytes</span>((<span class="hljs-type">char</span> *)_rawData, streamLength);<br><br>    Speaker.<span class="hljs-built_in">playRaw</span>((<span class="hljs-type">int16_t</span> *)_rawData, streamLength / <span class="hljs-number">2</span>, <span class="hljs-number">8000</span>);<br><br>    _LOG(<span class="hljs-string">&quot;[Synthesis] All done!\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    _LOG(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http_client.<span class="hljs-built_in">errorToString</span>(httpResponseCode).<span class="hljs-built_in">c_str</span>());<br>  &#125;<br>  http_client.<span class="hljs-built_in">end</span>();<br><br>  _LOG(<span class="hljs-string">&quot;[Synthesis] Synthesis complete!\r\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>access_token默认有效期30天，单位是秒，生产环境注意及时刷新。刷新了旧的也能用（只要不超时）</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>这次没看教程（主要是搞语音合成的教程比较少）。所以！感谢我自己辛勤的劳作😋</p>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>语音合成</tag>
      
      <tag>Speaker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32S3接入文心一言</title>
    <link href="/2024/03/25/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/README/"/>
    <url>/2024/03/25/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/README/</url>
    
    <content type="html"><![CDATA[<h1 id="ESP32S3接入文心一言"><a href="#ESP32S3接入文心一言" class="headerlink" title="ESP32S3接入文心一言"></a>ESP32S3接入文心一言</h1><h2 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h2><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>使用ESP32S3接入文心一言，其实是为我后面的某个小项目做铺垫啦！这里记录一下实现的过程。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>主控：ESP32S3N16R8</li><li>平台：Arduino + PlatformIO + VScode</li></ul><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ol><li>在百度智能云的云千帆控制台并创建应用获取<code>API Key</code>和<code>Secret Key</code></li><li>根据创建应用生成的<code>API Key</code>和<code>Secret Key</code>来获取<code>access_token</code></li><li>在ESP32S3中发送POST请求API</li></ol><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-在百度智能云的云千帆控制台并创建应用获取API-Key和Secret-Key"><a href="#1-在百度智能云的云千帆控制台并创建应用获取API-Key和Secret-Key" class="headerlink" title="1. 在百度智能云的云千帆控制台并创建应用获取API Key和Secret Key"></a>1. 在百度智能云的云千帆控制台并创建应用获取<code>API Key</code>和<code>Secret Key</code></h3><p>首先要使用云账号登录百度智能云，然后进入千帆大模型平台，创建一个新应用。<strong>（注意：分清楚百度账号还是云账号，这两个不一样的）</strong></p><p>百度智能云千帆控制台：<a href="https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application">https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application</a></p><p>创建新应用：</p><!-- ![](images/ESP32S3接入文心一言/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image.png"></p><!-- ![](images/ESP32S3接入文心一言/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-1.png"></p><p>创建好应用以后就可以得到<code>API Key</code>和<code>Secret Key</code>！</p><!-- ![](images/ESP32S3接入文心一言/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-2.png"></p><h3 id="2-根据创建应用生成的API-Key和Secret-Key来获取access-token"><a href="#2-根据创建应用生成的API-Key和Secret-Key来获取access-token" class="headerlink" title="2. 根据创建应用生成的API Key和Secret Key来获取access_token"></a>2. 根据创建应用生成的<code>API Key</code>和<code>Secret Key</code>来获取<code>access_token</code></h3><p>进入API代码调试界面：</p><!-- ![](images/ESP32S3接入文心一言/image-3.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-3.png"></p><!-- ![](images/ESP32S3接入文心一言/image-4.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-4.png"></p><!-- ![](images/ESP32S3接入文心一言/image-5.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-5.png"></p><p>应用列表选择自己创建的ESP32S3智能语音助手</p><!-- ![](images/ESP32S3接入文心一言/image-6.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-6.png"></p><p>获取<code>access_token</code></p><!-- ![](images/ESP32S3接入文心一言/image-7.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-7.png"></p><p>指令格式：<code>&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:&quot;介绍一下名侦探柯南这部动画&quot;</code></p><!-- ![](images/ESP32S3接入文心一言/image-8.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-8.png"></p><p>调试结果如下：</p><!-- ![](images/ESP32S3接入文心一言/image-9.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/image-9.png"></p><h3 id="3-在ESP32S3中发送POST请求API"><a href="#3-在ESP32S3中发送POST请求API" class="headerlink" title="3. 在ESP32S3中发送POST请求API"></a>3. 在ESP32S3中发送POST请求API</h3><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp">String apiERNIEbotUrl = <span class="hljs-string">&quot;https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=xxxxxxxxx&quot;</span>; <span class="hljs-comment">// 把申请的access_token填上去</span><br>String inputText = <span class="hljs-string">&quot;你好！&quot;</span>;<br><br><span class="hljs-comment">/* 文心一言 */</span><br><span class="hljs-function">String <span class="hljs-title">getGPTResponse</span><span class="hljs-params">(String inputText)</span></span><br><span class="hljs-function"></span>&#123;<br>  HTTPClient http_client;<br><br>  http_client.<span class="hljs-built_in">begin</span>(apiERNIEbotUrl);<br>  http_client.<span class="hljs-built_in">addHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><br>  http_client.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-number">20000</span>); <span class="hljs-comment">// 20s的超时时间</span><br><br>  String payload = <span class="hljs-string">&quot;&#123;\&quot;messages\&quot;:[&#123;\&quot;role\&quot;: \&quot;user\&quot;,\&quot;content\&quot;: \&quot;&quot;</span> + inputText + <span class="hljs-string">&quot;\&quot;&#125;],\&quot;disable_search\&quot;: false,\&quot;enable_citation\&quot;: false&#125;&quot;</span>;<br><br>  <span class="hljs-type">int</span> httpResponseCode = http_client.<span class="hljs-built_in">POST</span>(payload);<br><br>  <span class="hljs-keyword">if</span> (httpResponseCode == HTTP_CODE_OK)<br>  &#123;<br>    String response = http_client.<span class="hljs-built_in">getString</span>();<br><br>    http_client.<span class="hljs-built_in">end</span>();<br>    _LOG(<span class="hljs-string">&quot;\r\n%s\r\n&quot;</span>, response.<span class="hljs-built_in">c_str</span>());<br><br>    <span class="hljs-comment">// Parse JSON response</span><br>    <span class="hljs-function">DynamicJsonDocument <span class="hljs-title">doc</span><span class="hljs-params">(<span class="hljs-number">2048</span>)</span></span>;<br>    <span class="hljs-built_in">deserializeJson</span>(doc, response);<br><br>    String outPutText = doc[<span class="hljs-string">&quot;result&quot;</span>];<br>    <span class="hljs-keyword">return</span> outPutText;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    _LOG(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http_client.<span class="hljs-built_in">errorToString</span>(httpResponseCode).<span class="hljs-built_in">c_str</span>());<br>    http_client.<span class="hljs-built_in">end</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[HTTP] GET... failed, error!&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>意外的顺利耶！Yapi😘</p><ul><li>要注意的是，文心一言的API新用户第一个月可以获得一张20元的优惠券有效期1个月，1个月以后就要付费使用文心一言啦！</li><li>access_token默认有效期30天，单位是秒，生产环境注意及时刷新。刷新了旧的也能用（只要不超时）</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>项目教程：<a href="https://blog.csdn.net/vor234/article/details/135372118">https://blog.csdn.net/vor234/article/details/135372118</a></p>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>文心一言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32S3接入百度在线语音识别</title>
    <link href="/2024/03/24/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/README/"/>
    <url>/2024/03/24/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/README/</url>
    
    <content type="html"><![CDATA[<h1 id="ESP32S3接入百度在线语音识别"><a href="#ESP32S3接入百度在线语音识别" class="headerlink" title="ESP32S3接入百度在线语音识别"></a>ESP32S3接入百度在线语音识别</h1><h2 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: kkl"></a>Author: kkl</h2><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>使用ESP32S3接入百度智能云实现在线语音识别，记录中间遇到的问题和实现流程。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>主控：ESP32S3N16R8</li><li>平台：Arduino + PlatformIO + VScode</li></ul><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><ol><li>在百度智能云控制端选择<code>语音识别</code>并创建应用获取<code>API Key</code>和<code>Secret Key</code></li><li>根据创建应用生成的<code>API Key</code>和<code>Secret Key</code>来获取<code>access_token</code></li><li>采集音频数据，打包数据，通过http协议将打包的数据（payload）POST请求发送语音识别的API上</li><li>接收返回的数据（response）</li></ol><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-创建语音识别应用"><a href="#1-创建语音识别应用" class="headerlink" title="1. 创建语音识别应用"></a>1. 创建语音识别应用</h3><p>登录百度智能云的云账号，选择语音识别，创建一个新应用。<strong>（注意：分清楚百度账号还是云账号，这两个不一样的）</strong><br>百度智能云：<a href="https://login.bce.baidu.com/?redirect=https://console.bce.baidu.com/ai/#/ai/speech/app/list">https://login.bce.baidu.com/?redirect=https%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F#/ai/speech/app/list</a></p><!-- ![](images/ESP32S3接入百度在线语音识别/image.png) --><!-- ![](images/ESP32S3接入百度在线语音识别/image-1.png) --><!-- ![](images/ESP32S3接入百度在线语音识别/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/image.png"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/image-1.png"><br><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/image-2.png"></p><h3 id="2-根据创建应用生成的API-Key和Secret-Key来获取access-token"><a href="#2-根据创建应用生成的API-Key和Secret-Key来获取access-token" class="headerlink" title="2. 根据创建应用生成的API Key和Secret Key来获取access_token"></a>2. 根据创建应用生成的API Key和Secret Key来获取access_token</h3><p>创建好应用，在应用列表里会出现你刚刚创建的应用，当然<code>API Key</code>和<code>Secret Key</code>也有啦</p><!-- ![](images/ESP32S3接入百度在线语音识别/image-3.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/ESP32S3%E6%8E%A5%E5%85%A5%E7%99%BE%E5%BA%A6%E5%9C%A8%E7%BA%BF%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/image-3.png"></p><p>有了<code>API Key</code>和<code>Secret Key</code>，下面我们可以在ESP32S3上进行GET请求得到access_token的代码！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 获取token */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gainToken</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>   </span><br><span class="hljs-function"></span>&#123;<br>    HTTPClient http_client; <span class="hljs-comment">// #include &lt;HTTPClient.h&gt;</span><br>    <span class="hljs-comment">//注意，要把下面网址中的your_apikey和your_secretkey替换成自己的API Key和Secret Key</span><br>    http_client.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=your_apikey&amp;client_secret=your_secretkey&quot;</span>);<br>    <span class="hljs-type">int</span> httpResponseCode = http_client.<span class="hljs-built_in">GET</span>();<br><br>    <span class="hljs-keyword">if</span>(httpResponseCode == HTTP_CODE_OK)<br>    &#123;<br>        String response = http_client.<span class="hljs-built_in">getString</span>();<br>        Serial.<span class="hljs-built_in">println</span>(response);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Serial.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http_client.<span class="hljs-built_in">errorToString</span>(httpResponseCode).<span class="hljs-built_in">c_str</span>());<br>    &#125;<br>    http_client.<span class="hljs-built_in">end</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>请求成功会返回如下数据，我们主要关注<code>access_token</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;refresh_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;25.b55fe1d287227ca97aab219bb249b8ab.315360000.1798284651.282335-8574074&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2592000</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;public wise_adapt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;session_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9mzdDZXu3dENdFZQurfg0Vz8slgSgvvOAUebNFzyzcpQ5EnbxbF+hfG9DQkpUVQdh4p6HbQcAiz5RmuBAja1JJGgIdJI&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24.6c5e1ff107f0e8bcef8c46d3424a0e78.2592000.1485516651.282335-8574074&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;session_secret&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dfac94a3489fe9fca7c3221cbf7525ff&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>access_token</code>对应的值就是可用的token，每次申请的<code>token</code>有效期限为30天，过期就需要重新申请。所以咱定时更新<code>access_token</code>就行，不用每次调用语音识别都申请一遍。</li></ul><h3 id="3-采集数据，通过POST请求发送到语音识别API上"><a href="#3-采集数据，通过POST请求发送到语音识别API上" class="headerlink" title="3. 采集数据，通过POST请求发送到语音识别API上"></a>3. 采集数据，通过POST请求发送到语音识别API上</h3><p>数据上传POST的方式有两种：JSON格式和RAW格式。这里我们使用JSON格式，下图为JSON格式上传的一些必要的参数说明：</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">可需</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">format</td><td align="center">String</td><td align="center">必填</td><td align="left">语音文件的格式，pcm&#x2F;wav&#x2F;amr&#x2F;m4a。不区分大小写。推荐pcm文件！</td></tr><tr><td align="center">rate</td><td align="center">int</td><td align="center">必填</td><td align="left">采样率，16000、8000，固定值</td></tr><tr><td align="center">channel</td><td align="center">int</td><td align="center">必填</td><td align="left">声道数，仅支持单声道，请填固定值1</td></tr><tr><td align="center">cuid</td><td align="center">String</td><td align="center">必填</td><td align="left">用户唯一标识，用来区分用户，计算UV值。建议填写能区分用户的机器MAC地址或IMEI码，长度为60字符以内。</td></tr><tr><td align="center">token</td><td align="center">String</td><td align="center">必填</td><td align="left">开放平台获取到的开发者[access_token]</td></tr><tr><td align="center">dev_pid</td><td align="center">int</td><td align="center">选填</td><td align="left">不填写lan参数生效，都不填写就默认1537（普通话，输入法模型）</td></tr><tr><td align="center">lm_id</td><td align="center">int</td><td align="center">选填</td><td align="left">自训练平台模型id，填dev_id &#x3D; 8001 或 8002 生效</td></tr><tr><td align="center">lan</td><td align="center">String</td><td align="center">选填，废弃参数</td><td align="left">历史兼容参数，已不再使用</td></tr><tr><td align="center">speech</td><td align="center">String</td><td align="center">必填</td><td align="left">本地语音文件的二进制语音数据，需要进行 base64 编码，与len参数一起使用</td></tr><tr><td align="center">len</td><td align="center">int</td><td align="center">必填</td><td align="left">本地语音文件的字节数，单位是字节（byte）</td></tr></tbody></table><p>图中对数据类型和内容说的很明确了，只需要按照这个格式打包好数据然后发送就行，下面是ESP32S3的具体实现代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> payload[<span class="hljs-number">160000</span>];<br><br><span class="hljs-comment">/* 在线语音识别 */</span><br><span class="hljs-function">String <span class="hljs-title">speechRecognition</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  HTTPClient http_client; <span class="hljs-comment">// #include &lt;HTTPClient.h&gt;</span><br><br>  _LOG(<span class="hljs-string">&quot;[Recognition] Start recognition!\r\n&quot;</span>);<br><br>  result = Mic.<span class="hljs-built_in">record</span>(_rawData, _samples); <span class="hljs-comment">// 录制声音</span><br>  _LOG(<span class="hljs-string">&quot;[Mic] record:%s\r\n&quot;</span>, (result == <span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>));<br>  <span class="hljs-keyword">while</span> (Mic.<span class="hljs-built_in">isRecording</span>()); <span class="hljs-comment">// 当录制完成时</span><br>  _LOG(<span class="hljs-string">&quot;[Mic] record is done!\r\n&quot;</span>);<br><br>  <span class="hljs-built_in">memset</span>(payload, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-built_in">strlen</span>(payload)); <span class="hljs-comment">// 将数组清空</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&#123;&quot;</span>);<br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;format\&quot;:\&quot;pcm\&quot;,&quot;</span>);<br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;rate\&quot;:16000,&quot;</span>); <span class="hljs-comment">// 采样率，如果采样率改变了，记得修改该值，只有16000、8000两个固定采样率</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;dev_pid\&quot;:1537,&quot;</span>); <span class="hljs-comment">// 中文普通话</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;channel\&quot;:1,&quot;</span>); <span class="hljs-comment">// 单声道</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;cuid\&quot;:\&quot;hugozkl\&quot;,&quot;</span>); <span class="hljs-comment">// 识别码，随便打几个字符，但最好唯一</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;token\&quot;:\&quot;24.ba06cf95edb0b0aee7bfb016209e5948.2592000.1713715897.282335-57684431\&quot;,&quot;</span>); <span class="hljs-comment">// token，这里需要修改成自己申请到的token</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;len\&quot;:65536,&quot;</span>); <span class="hljs-comment">// 数据长度，如果传输的数据长度改变了，记得修改该值，该值是ADC采集的数据字节数，不是base64编码后的长度</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;speech\&quot;:\&quot;&quot;</span>);<br>  <span class="hljs-built_in">strcat</span>(payload, base64::<span class="hljs-built_in">encode</span>((<span class="hljs-type">uint8_t</span> *)_rawData, <span class="hljs-number">65536</span>).<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// base64编码数据 // #include &quot;base64.h&quot;</span><br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>  <span class="hljs-built_in">strcat</span>(payload, <span class="hljs-string">&quot;&#125;&quot;</span>);<br><br>  <span class="hljs-comment">// HTTP POST</span><br>  <span class="hljs-type">int</span> httpResponseCode;<br>  http_client.<span class="hljs-built_in">begin</span>(<span class="hljs-string">&quot;http://vop.baidu.com/server_api&quot;</span>);<br>  http_client.<span class="hljs-built_in">addHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>  http_client.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 5s超时时间</span><br>  httpResponseCode = http_client.<span class="hljs-built_in">POST</span>(payload);<br><br>  <span class="hljs-keyword">if</span> (httpResponseCode == HTTP_CODE_OK)<br>  &#123;<br>    String response = http_client.<span class="hljs-built_in">getString</span>();<br><br>    http_client.<span class="hljs-built_in">end</span>();<br>    _LOG(<span class="hljs-string">&quot;\r\n%s\r\n&quot;</span>, response.<span class="hljs-built_in">c_str</span>());<br><br>    <span class="hljs-comment">// Parse JSON response</span><br>    <span class="hljs-function">DynamicJsonDocument <span class="hljs-title">doc</span><span class="hljs-params">(<span class="hljs-number">2048</span>)</span></span>; <span class="hljs-comment">// #include &lt;ArduinoJson.h&gt;</span><br>    <span class="hljs-built_in">deserializeJson</span>(doc, response);<br><br>    String outPutText = doc[<span class="hljs-string">&quot;result&quot;</span>];<br>    <span class="hljs-comment">// 去掉首尾的[&quot;&quot;]</span><br>    outPutText = outPutText.<span class="hljs-built_in">substring</span>(<span class="hljs-number">2</span>);<br>    outPutText = outPutText.<span class="hljs-built_in">substring</span>(<span class="hljs-number">0</span>, outPutText.<span class="hljs-built_in">length</span>() - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> outPutText;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    _LOG(<span class="hljs-string">&quot;[HTTP] GET... failed, error: %s\n&quot;</span>, http_client.<span class="hljs-built_in">errorToString</span>(httpResponseCode).<span class="hljs-built_in">c_str</span>());<br>    http_client.<span class="hljs-built_in">end</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;error&gt;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POST发送数据有一个固定头部：<code>Content-Type:application/json</code>，POST前需要设置一下，代码中已经有展示。</p><h3 id="4-接收数据"><a href="#4-接收数据" class="headerlink" title="4. 接收数据"></a>4. 接收数据</h3><p>在上一步代码中实现了接收数据，这里列一下返回的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;corpus_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7349831540333925029&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;你好，你是谁？&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;593363272001711266008&quot;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;corpus_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7349831596084473860&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;现在多少点？&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;671001951581711266021&quot;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;corpus_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7349831639168589351&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success.&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;err_no&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;深圳天气如何？&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;13152229661711266031&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>数据发送成功则会返回正确的识别数据，当然声音信号不好时返回的语音识别也会不准确。</li><li>谨记，返回的语音识别结果是<code>UTF-8</code>方式编码，所以代码的编码最好也改为<code>UTF-8</code>编码格式。</li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>百度智能云的语音识别服务是可以免费领取到一定使用次数的，15万次，足够我们测试使用，记得开始测试前先领取一下，不然会出现返回<code>报错：&#123;&#39;err_msg&#39;: &#39;request pv too much&#39;, &#39;err_no&#39;: 3305, &#39;sn&#39;: &#39;876137091191590632079&#39; &#125;</code>，报错原因多半是免费次数没领取或者用完了要开通付费功能。</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>项目教程：<a href="https://blog.csdn.net/wojueburenshu/article/details/119244390">https://blog.csdn.net/wojueburenshu/article/details/119244390</a></p>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>语音识别</tag>
      
      <tag>Mic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Lvgl中添加自定义字体和图片</title>
    <link href="/2024/03/21/Lvgl%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87/README/"/>
    <url>/2024/03/21/Lvgl%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87/README/</url>
    
    <content type="html"><![CDATA[<h1 id="在Lvgl中添加自定义字体和图片"><a href="#在Lvgl中添加自定义字体和图片" class="headerlink" title="在Lvgl中添加自定义字体和图片"></a>在Lvgl中添加自定义字体和图片</h1><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>仅仅<strong>保证</strong>对于<code>X-TRACK</code>项目的自定义字体和图片的有效使用哦！</p><hr><h2 id="Font-convert-字体格式转换成-c文件"><a href="#Font-convert-字体格式转换成-c文件" class="headerlink" title="Font convert - 字体格式转换成.c文件"></a>Font convert - 字体格式转换成.c文件</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>首先我们要访问到Lvgl官方网站上的<strong>Online Font Converter</strong>.</p><p>网址：<a href="https://lvgl.io/tools/fontconverter">https://lvgl.io/tools/fontconverter</a></p><p>然后我们会看到以下页面！</p><!-- ![](images/Lvgl添加自定义字体和图片/image.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/Lvgl%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87/image.png"></p><blockquote><ol><li>Name</li></ol></blockquote><p>填写.c文件的名字，如<code>font_smliey_36</code>，36表示字号大小，这样就清晰明了！</p><blockquote><ol start="2"><li>Size</li></ol></blockquote><p>填写字号大小，刚刚我们名字写了<code>font_smliey_36</code>，字号是36，那我们这里就填写36px的字号大小，统一格式规范。</p><blockquote><ol start="3"><li>Bpp(bit-per-piel)</li></ol></blockquote><p>填写Bpp为4，这个值会让字体看起来更顺滑而且占据的内存空间相对不大（填别的也行，自己尝试对比一下</p><blockquote><ol start="4"><li>Fallback</li></ol></blockquote><p>这里填写和Name一样的<code>font_smliey_36</code>就行啦！</p><blockquote><ol start="5"><li>三个选项框都不要勾选！</li></ol></blockquote><p>不然生成的字体在<code>X-TRACK</code>没法用！</p><blockquote><ol start="6"><li>TTF&#x2F;WOFF file</li></ol></blockquote><p>在这里选择我们准备好的字体文件，推荐用<code>ttf</code>格式。</p><blockquote><ol start="7"><li>Range</li></ol></blockquote><p>这里是设置范围来选择你的.c文件需要包含哪些文字（Symbols），我们不用这个，这里空着，我们直接在下面的Symbols栏里面写我们需要的字。</p><blockquote><ol start="8"><li>Symbols</li></ol></blockquote><p>在这里我们填入希望在Lvgl里使用的文字，比方说我想要在Lvgl里显示<code>鸡你太美</code>，那我就需要在这个栏里填入<code>鸡你太美</code>。</p><blockquote><ol start="9"><li>点击红色的Convert按钮等待.c文件的渲染和下载即可！</li></ol></blockquote><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>首先打开刚刚生成的.c文件，如<code>font_smiley_36.c</code></p><ol><li>找到注释<code>KERNING</code>和注释<code>ALL CUSTOM DATA</code>之间的一大串，注释掉或者删掉！</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 里面注释掉或者删掉！</span><br><span class="hljs-comment">/*-----------------</span><br><span class="hljs-comment"> *    KERNING</span><br><span class="hljs-comment"> *----------------*/</span><br><br><br><span class="hljs-comment">/*Map glyph_ids to kern left classes*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> kern_left_class_mapping[] =<br>&#123;<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>    <span class="hljs-number">7</span><br>&#125;;<br><br><span class="hljs-comment">/*Map glyph_ids to kern right classes*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> kern_right_class_mapping[] =<br>&#123;<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>,<br>    <span class="hljs-number">6</span><br>&#125;;<br><br><span class="hljs-comment">/*Kern values between classes*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int8_t</span> kern_class_values[] =<br>&#123;<br>    <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-12</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-17</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>,<br>    <span class="hljs-number">-12</span>, <span class="hljs-number">0</span><br>&#125;;<br><br><br><span class="hljs-comment">/*Collect the kern class&#x27; data in one place*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">lv_font_fmt_txt_kern_classes_t</span> kern_classes =<br>&#123;<br>    .class_pair_values   = kern_class_values,<br>    .left_class_mapping  = kern_left_class_mapping,<br>    .right_class_mapping = kern_right_class_mapping,<br>    .left_class_cnt      = <span class="hljs-number">7</span>,<br>    .right_class_cnt     = <span class="hljs-number">6</span>,<br>&#125;;<br><br><span class="hljs-comment">/*--------------------</span><br><span class="hljs-comment"> *  ALL CUSTOM DATA</span><br><span class="hljs-comment"> *--------------------*/</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将注释<code>ALL CUSTOM DATA</code>和注释<code>PUBLIC FONT</code>之间的一大坨，用以下代码替换掉！</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 用它们替换掉原来的一大坨！</span><br><span class="hljs-comment">/*--------------------</span><br><span class="hljs-comment"> *  ALL CUSTOM DATA</span><br><span class="hljs-comment"> *--------------------*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LV_VERSION_CHECK(8, 0, 0)</span><br><span class="hljs-comment">/*Store all the custom data of the font*/</span><br><span class="hljs-type">static</span>  <span class="hljs-type">lv_font_fmt_txt_glyph_cache_t</span> cache;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">lv_font_fmt_txt_dsc_t</span> font_dsc = &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">lv_font_fmt_txt_dsc_t</span> font_dsc = &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    .glyph_bitmap = glyph_bitmap,<br>    .glyph_dsc = glyph_dsc,<br>    .cmaps = cmaps,<br>    .kern_dsc = <span class="hljs-literal">NULL</span>,<br>    .kern_scale = <span class="hljs-number">0</span>,<br>    .cmap_num = <span class="hljs-number">1</span>,<br>    .bpp = <span class="hljs-number">4</span>,<br>    .kern_classes = <span class="hljs-number">0</span>,<br>    .bitmap_format = <span class="hljs-number">0</span>,<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LV_VERSION_CHECK(8, 0, 0)</span><br>    .cache = &amp;cache<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-comment">/*-----------------</span><br><span class="hljs-comment"> *  PUBLIC FONT</span><br><span class="hljs-comment"> *----------------*/</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>最后，删除注释<code>PUBLIC FONT</code>下的<code>.fallback</code>和<code>.user_data</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 删除以下两条！</span><br><span class="hljs-comment">/*-----------------</span><br><span class="hljs-comment"> *  PUBLIC FONT</span><br><span class="hljs-comment"> *----------------*/</span><br><br>    <span class="hljs-comment">// ...</span><br><br>    .fallback = &amp;font_smiley_36,<br>    .user_data = <span class="hljs-literal">NULL</span>,<br></code></pre></td></tr></table></figure><ol start="4"><li>最后拿去Lvgl仿真或者MCU跑一下，基本上没有问题啦！</li></ol><h2 id="Pictures-convert-图片格式转换成-c文件"><a href="#Pictures-convert-图片格式转换成-c文件" class="headerlink" title="Pictures convert - 图片格式转换成.c文件"></a>Pictures convert - 图片格式转换成.c文件</h2><blockquote><p>LVGL官方在线图片转换器(LVGL Online Image Converter): <a href="https://lvgl.io/tools/imageconverter">https://lvgl.io/tools/imageconverter</a></p></blockquote><p>这里主要讲解使用代码中的变量（存储着像素值的C数组）进行图像显示。</p><p>首先，我们打开LVGL官方在线图片转换器，可以看到以下最新（截止2024.12.26）的应用界面：</p><!-- ![](images/Lvgl添加自定义字体和图片/image-1.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/Lvgl%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87/image-1.png"></p><blockquote><ol><li>Select image file(s)：选择图片文件，可批量选择，记得修改文件名，因为稍后生成的c文件是和图片文件同名的</li></ol></blockquote><blockquote><ol start="2"><li>Color format：设置颜色格式</li></ol></blockquote><!-- ![](images/Lvgl添加自定义字体和图片/image-2.png) --><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/Lvgl%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E7%89%87/image-2.png"></p><ul><li>一般的彩色图片，选择<code>CF_TRUE_COLOR_ALPHA</code></li><li>如果想要省空间，图片想要显示成纯白色的，可以选择<code>CF_INDEXED_X_BIT</code>，<code>X</code>越大图片内存越大也越清晰，<code>X</code>越小图片内存越小锯齿越明显</li><li>如果想要省空间，图片想要显示成纯黑色的，可以选择<code>CF_ALPHA_X_BIT</code>，<code>X</code>越大图片内存越大也越清晰，<code>X</code>越小图片内存越小锯齿越明显</li></ul><blockquote><ol start="3"><li>Output format：可以选择输出的文件格式，C数组或者bin文件（bin文件需要配合LVGL的文件系统使用），这里选择C数组（C array）即可</li></ol></blockquote><blockquote><ol start="4"><li>Dither images (can improve quality)：加入图像抖动算法，可以提升图像最终质量（这里不打勾）</li></ol></blockquote><blockquote><ol start="5"><li>Output in big-endian format：以<code>big-endian</code>格式输出（这里不打勾）</li></ol></blockquote><p>全部选择好了之后就可以点击<code>Convert</code>即可！</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><ul><li>鸣谢：<a href="https://blog.csdn.net/weixin_45677295/article/details/137949968">https://blog.csdn.net/weixin_45677295/article/details/137949968</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lvgl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Power By Hugo@kkl</title>
    <link href="/2024/01/01/WelcomePage/hello-world/"/>
    <url>/2024/01/01/WelcomePage/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><h1 id="Welcome-to-MyBlog"><a href="#Welcome-to-MyBlog" class="headerlink" title="Welcome to MyBlog"></a>Welcome to MyBlog</h1><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><h3 id="Wallpaper’s-Source-Internet-Thanks"><a href="#Wallpaper’s-Source-Internet-Thanks" class="headerlink" title="Wallpaper’s Source: Internet, Thanks!!!"></a>Wallpaper’s Source: Internet, Thanks!!!</h3><hr><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/杂记/2024年/8月/image-0.gif" alt="---" width = "300" height = "150" style="border-radius: 10px;"></div><div class="group-image-wrap"><img src="/images/杂记/2024年/8月/image-1.gif" alt="---" width = "300" height = "150" style="border-radius: 10px;"></div></div></div><hr>]]></content>
    
    
    
    <tags>
      
      <tag>SayHi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【树莓派】远程登录方法</title>
    <link href="/2023/12/28/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/"/>
    <url>/2023/12/28/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="My-Raspberry-Pi"><a href="#My-Raspberry-Pi" class="headerlink" title="My Raspberry Pi"></a>My Raspberry Pi</h1><h1 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h1><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><ul><li>硬件：raspberry Pi 4B</li><li>镜像版本：2022-09-22-raspios-bullseye-arm64.img</li></ul></blockquote><hr><h2 id="镜像烧录"><a href="#镜像烧录" class="headerlink" title="镜像烧录"></a>镜像烧录</h2><ul><li>这步就是平常的烧录过程，推荐使用官方的烧录工具，这样前期可以排很多坑（这些坑后面我们会逐一提到）</li></ul><hr><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul><li><strong>初次登录的时，这个地方有个大坑！</strong></li></ul><blockquote><p>最新版的树莓派系统（2022年4月以及以后发布的），<strong>没有了初始化的用户名和密码</strong>，以前用户名是pi，密码是raspberry，但是这次需要进系统之后才能设置。</p></blockquote><blockquote><p>意思就是，你如果初次登录，如果没有用图形化界面，无法创建你的个人用户，你也无法像以前一样直接使用默认账号密码进行登录。</p></blockquote><blockquote><p><strong>解决方法</strong>：</p><ul><li>使用官方的烧录工具，烧录的时候会让你配置初始账号密码。</li><li>外接屏幕、键鼠，使用图形化界面开机配置。</li></ul></blockquote><ul><li>我们重点来了解一下第三种方法，<strong>使用串口无屏幕的登录</strong>。</li></ul><ol><li>往烧录好镜像的SD卡根目录下新建一个文件<code>userconf.txt</code></li><li>文件内写入<code>pi:$6$/4.VdYgDm7RJ0qM1$FwXCeQgDKkqrOU3RIRuDSKpauAbBvP11msq9X58c8Que2l1Dwq3vdJMgiZlQSbEXGaY5esVHGBNbCxKLVNqZW1</code><blockquote><p>这一段意思就是告诉系统，新建一个用户<br>用户名：pi<br>密码：raspberry</p></blockquote></li><li>最后把SD卡插回到树莓派上，重新上电，就可以用这个用户密码登录啦！</li></ol><h3 id="串口登录"><a href="#串口登录" class="headerlink" title="串口登录"></a>串口登录</h3><ul><li><p>串口登录我们需要准备一个USB-TTL Link！</p></li><li><p>排针连接图（<strong>此时TypeC口朝向我们时，即USB-A口朝向右手边时</strong>）：</p><blockquote><p><strong>&#x2F; * * G T R * * * * * * * * * * * * * * &#x2F;</strong><br><strong>&#x2F; * * * * * * * * * * * * * * * * * * * &#x2F;</strong><br><strong>G-&gt;GND &#x2F; T-&gt;TXD &#x2F; R-&gt;RXD</strong></p></blockquote></li><li><p>接着检查烧录好镜像的SD卡根目录下的<code>cmdline.txt</code></p><blockquote><p>如果没有<code>console=serial0,115200</code>就自己在最前面加上去，用一个空格隔开和其他的指令就行</p></blockquote></li><li><p>接着修改烧录好镜像的SD卡根目录下的<code>config.txt</code></p><blockquote><p>在该文件的最后一行加上<code>dtoverlay=pi3-miniuart-bt</code></p></blockquote></li><li><p>这时连接串口就会打印login页面信息啦，记得串口连接选择<strong>波特率为115200，无流控模式</strong>噢！</p></li><li><p>如果没有任何东西显示出来，回去逐一检查，检查硬件是不是插错啦，要<strong>Link的Tx对Pi的Rx，Link的Rx对Pi的Tx</strong>！</p></li></ul><h3 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h3><p>树莓派初次配置SSH登录其实也挺麻烦的，下面演示一下配置步骤。</p><ul><li><p>在烧录好镜像的SD卡根目录下新建文件<code>ssh</code>，空文件就行，命名好以后不用去动它</p></li><li><p>同样的在根目录下再新建一个空文件<code>wpa_supplicant.conf</code></p></li><li><p>使用编译器打开，我这里使用<code>Vscode</code></p></li><li><p>打开以后输入以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs conf">country=CN<br>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=1<br> <br>network=&#123;<br>    ssid=&quot;EMMA&quot;<br>    psk=&quot;12345678&quot;<br>    priority=1<br>&#125;<br> <br>network=&#123;<br>    ssid=&quot;HUGO&quot;<br>    psk=&quot;12345678&quot;<br>    priority=2<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>解释一下：<br><code>ssid</code>是将要连接的wifi的名字，不能有中文！<br><code>psk</code>是将要连接的wifi的密码<br><code>priority</code>是连接的优先级，优先级数字大的wifi优先连接<br>你可以按照格式来记录多个wifi，注意优先级不要都相同。</p></blockquote></li><li><p>上述步骤完成以后，把SD卡插回树莓派中运行，<code>ssh</code>和<code>wpa_supplicant.conf</code>文件都会自动被写入系统，写入成功后再次用电脑打开SD卡这两个文件会消失不见。如果你要添加或者修改wifi，你需要把<code>wpa_supplicant.conf</code>文件重新写一遍，重复上述操作，新的文件会自动覆盖旧的；<code>ssh</code>不用重新创建，之前创建过了就可以了。</p></li><li><p>重新给树莓派上电进入系统以后，你可能会发现以下问题警告<code>Wi-Fi is currently blocked by rfkill. Use raspi-config to set the country before use.</code></p></li><li><p>这是我们没有设置无线局域网所在国家，于是我们输入指令<code>sudo raspi-config nonint do_wifi_country CN</code>，顺利的话再输入指令<code>ifconfig</code>会查看到wlan0已经被分配了ip地址！</p></li><li><p>如果平时在同一局域网下我们不知道树莓派ip地址是多少，我们可以在Windows<code>win+R</code>输入cmd打开命令行，输入指令<code>ping raspberrypi -4</code>，可以查询同一局域网当中的树莓派的ip地址。</p></li><li><p>拿到ip地址就可以愉快的远程访问啦！</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">login as: pi<br>password: raspberry<br></code></pre></td></tr></table></figure><p><img src="https://hugokkl.oss-cn-shenzhen.aliyuncs.com/blog/images/MyRaspberryPiLearningGuide/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%96%B9%E6%B3%95/image.png"></p><h3 id="VNC远程桌面登录"><a href="#VNC远程桌面登录" class="headerlink" title="VNC远程桌面登录"></a>VNC远程桌面登录</h3><ul><li>问题1：VNC Viewer显示<code>Cannot currently show the desktop</code></li></ul><blockquote><p><strong>问题分析</strong>：</p></blockquote><p>出现这个无法显示远程桌面的问题，其实是树莓派配置分辨率的关系，树莓派默认使用了最小分辨率，然后VNC不支持这么小的，咱改一下就行。</p><blockquote><p><strong>解决方法</strong>：</p></blockquote><ul><li><code>sudo raspi-config</code>打开设置界面</li><li>按方向键向下选择到<code>Display Options</code></li><li>接着继续选择<code>VNC Resolution</code></li><li>接着选择除了<code>640x480</code>以外的分辨率</li><li>然后回车确定，方向键左右选择<code>finish</code>退出，然后确认reboot重启，选择<code>yes</code></li><li>最后等待重启就行啦！</li></ul><hr><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>请参照<strong>登录</strong>章节当中的<strong>SSH登录</strong>！</p>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>RaspberryPi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的Linux驱动学习笔记 - IMX6ULL</title>
    <link href="/2023/12/13/MyLinuxLearningGuide/MyLinuxLearningGuide%20-%20IMX6ULL/"/>
    <url>/2023/12/13/MyLinuxLearningGuide/MyLinuxLearningGuide%20-%20IMX6ULL/</url>
    
    <content type="html"><![CDATA[<h3 id="我的Linux驱动学习笔记-IMX6ULL"><a href="#我的Linux驱动学习笔记-IMX6ULL" class="headerlink" title="我的Linux驱动学习笔记 - IMX6ULL"></a>我的Linux驱动学习笔记 - IMX6ULL</h3><h3 id="MyLinuxLearningGuide-IMX6ULL"><a href="#MyLinuxLearningGuide-IMX6ULL" class="headerlink" title="MyLinuxLearningGuide - IMX6ULL"></a>MyLinuxLearningGuide - IMX6ULL</h3><h3 id="By-kkl"><a href="#By-kkl" class="headerlink" title="By @kkl"></a>By @kkl</h3><p class="note note-warning">该笔记目前处于积极开发阶段。</p><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>PC：Win11<br>虚拟机：Ubuntu18.04<br>开发板：正点原子IMX6ULL开发板emmc-512MB</p></blockquote><blockquote><p>镜像：</p><ol><li>出厂镜像：linux-imx-4.1.15-2.1.0-g3dc0a4b-v2.7</li><li>教程镜像：linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4</li></ol></blockquote><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>用于不同启动方式的拨码开关设置：</p><ul><li>USB_OTG启动(0 1 0 0 0 0 0 0)<br>该启动方式主要用于mfg固化系统，烧录镜像。</li></ul><p class="note note-warning">注意：从USB_OTG启动时，开发板上如果有SD卡，要先把SD卡拔出来，上电后再重新插上SD卡，否则会影响镜像的烧录。</p><ul><li><p>从TF(SDcard)卡启动(1 0 0 0 0 0 1 0)<br>该启动方式主要用于从TF(SDcard)卡启动内核。</p></li><li><p>从eMMC启动(1 0 1 00 1 1 0)<br>该启动方式主要用于从eMMC启动内核。</p></li></ul><h3 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h3><p>烧录方法请查看<strong>I.MX6U用户快速体验V2.6 P25</strong></p><ol><li>出厂镜像：linux-imx-4.1.15-2.1.0-g3dc0a4b-v2.7</li></ol><ul><li>可以通过<code>【正点原子】阿尔法Linux开发板（A盘）-基础资料\05、开发工具\04、正点原子MFG_TOOL出厂固件烧录工具\mfgtool</code>进行烧录。</li></ul><ol start="2"><li>教程镜像：linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4</li></ol><ul><li><p>可以通过<code>【正点原子】阿尔法Linux开发板（A盘）-基础资料\08、系统镜像\02、教程系统镜像\02、V2.4版本及以后的底板\mfgtool(study)</code>进行烧录。</p></li><li><p>烧录结束以后，重启以后是无法成功加载系统的，需要在Uboot中重新配置一下环境变量，如下：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用Type-C数据线连接开发板的串口和个人PC</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用MobaXterm，Serial连接，波特率设置为115200</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开发板上电，在Uboot准备加载内核前的倒计时结束前，按回车键留在Uboot</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">依次输入以下命令，修改环境变量</span><br><br>setenv bootcmd &#x27;mmc dev 1;fatload mmc 1:1 80800000 zImage;fatload mmc 1:1 83000000 imx6ull-alientek-emmc.dtb;bootz 80800000 - 83000000&#x27;<br><br>setenv bootargs &#x27;console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw&#x27;<br><br>saveenv<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置好环境变量后，重新上电启动内核，就可以成功进入系统啦！</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上述内容来自【正点原子】阿尔法Linux开发板（A盘）-基础资料\08、系统镜像\02、教程系统镜像\02、V2.4版本及以后的底板\mfgtool(study)\【EMMC-bootcmd-bootargs】.txt or 【NAND-bootcmd-bootargs】.txt</span><br></code></pre></td></tr></table></figure><p class="note note-success">当然，你可以使用该工具 <b>mfgtool(study)</b> 烧录你自己制作的镜像。<br></br>只要把 <b>mfgtool(study)\Profiles\Linux\OS Firmware\files\boot</b> 路径下的对应镜像和u-boot修改成你制作的就可以啦，但是名字要和原来的同名噢！！！</p><h3 id="通过命令行更新emmc的内核和设备树固件"><a href="#通过命令行更新emmc的内核和设备树固件" class="headerlink" title="通过命令行更新emmc的内核和设备树固件"></a>通过命令行更新emmc的内核和设备树固件</h3><h4 id="更新原理"><a href="#更新原理" class="headerlink" title="更新原理"></a>更新原理</h4><p>因为Linux内核和设备树是在uboot运行的时候被从emmc加载到内存当中去的，所以Linux系统正在运行的时候，我们是可以修改emmc中存放的固件的，然后reset等待重启即可。</p><h4 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h4><ol><li>查看emmc分区</li></ol><p>使用命令<code>fdisk -l</code>查看分区信息</p><p>在使用mfg tool烧录之后，emmc会有两个分区，第一个分区是FAT32文件系统<code>/dev/mmcblk1p1</code>，用来存放kernel和设备树，第二个分区是Linux文件系统，用来存放根文件系统</p><ol start="2"><li>更新固件</li></ol><ul><li>使用命令<code>mount /dev/mmcblk1p1 /mnt</code>挂载emmc分区</li><li>接着使用<code>ls /mnt/</code>就可以看到设备树dtb文件和zImage已经出现</li><li>然后使用cp命令将自己最新的文件（可以只替换其中一个或两个）替换掉旧的</li><li>最后通过<code>umount /mnt</code>卸载emmc分区</li></ul><ol start="3"><li>测试</li></ol><ul><li>按下板载的reset按键或者命令行输入<code>reboot</code>进行重启</li><li>重启之后可以通过<code>uname</code>命令或者查找设备树信息的方式检查是否替换成功。</li></ul><hr><h2 id="配网"><a href="#配网" class="headerlink" title="配网"></a>配网</h2><ul><li><p><code>cd /etc/</code>去到此文件夹当中</p></li><li><p>编写<code>wpa_supplicant.conf</code></p><blockquote><p>ctrl_interface&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant<br>update_config&#x3D;1</p><p>network&#x3D;{<br> ssid&#x3D;”MagicEyes”<br> psk&#x3D;”12345678”<br>}</p></blockquote></li><li><p><code>vi wpa_supplicant.conf</code>用vi打开这个文件配置你的网络</p></li><li><p><code>modprobe 8188eu.ko</code>加载 RTL8188EUS 驱动模块（USB-WiFi-RTL8188EUS）</p></li><li><p><code>wpa_supplicant -D wext -c /etc/wpa_supplicant.conf -i wlan0 &amp;</code>使用 wpa_supplicant 工具让 RTL8188 USB WIFI 连接到热点上</p></li><li><p><code>udhcpc -i wlan0</code>从路由器获取IP地址，执行了这一步才可以得到分配的IP地址</p></li><li><p><code>ifconfig wlan0</code>查看IP地址</p></li></ul><p><br></br></p><ul><li><p><code>ping [-I wlan0的IP地址] www.baidu.com</code>可以使用这个指令测试WiFi是否工作正常，[]的内容可以省略，-I 是指定执行 ping 操作的网卡 IP 地址，我们可以指定要使用的 wlan0 去 ping 百度网站。</p></li><li><p>更加详细的内容在<strong>驱动开发指南P1765</strong></p></li></ul><p class="note note-warning">注意！RTL8188EUS 请使用 8188eu.ko 驱动，RTL8188CUS 请使用 8192cu.ko 驱动！</p><p>在出厂镜像中，默认加载的是RTL8188CUS驱动，所以要手动cd到对应的文件夹加载RTL8188EUS驱动模块：</p><ul><li><code>cd /lib/modules/4.1.15-g3dc0a4b/kernel/drivers/net/wireless/rtlwifi/rtl8188EUS</code></li><li><code>insmod 8188eu.ko</code></li></ul><h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><h3 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h3><ul><li><code>Uboot</code>和内核的编译步骤：</li></ul><blockquote><ol><li><code>distclean</code>清理工程</li><li><code>make xxx_defconfig</code>使用默认配置文件配置工程</li><li><code>make menuconfig</code>打开配置界面，进行配置</li><li><code>make -j12</code>编译所有文件，<code>-j12</code>表示十二核编译</li></ol><ul><li>编译的时间会比较长</li></ul></blockquote><ul><li><strong>Warning:</strong></li></ul><blockquote><p><strong>内核的解压和编译绝对不可以在共享文件夹里进行！</strong><br>否则会出现无法软链接的情况，比如<code>ln: failed to create symbolic link &#39;./dt-bindings&#39;: Operation not permitted</code><br>因为共享文件夹是windows和linux的的共享目录，而windows下的文件系统，不支持linux的<code>symbolic link</code>!</p></blockquote><ul><li>实践</li></ul><blockquote><ol><li>出厂镜像：linux-imx-4.1.15-2.1.0-g3dc0a4b-v2.7</li></ol></blockquote><ul><li>这里的编译的内核选用<code>linux-imx-4.1.15-2.1.0-g3dc0a4b-v2.7.tar.bz2</code>即正点原子imx6ull的出厂镜像</li><li>解压方法：<code>tar -vxjf xxx.tar.bz2</code></li><li>注意！编译内核时，请先安装Poky交叉编译工具链（具体参照<strong>用户快速体验P115</strong>）</li><li>执行<code>linux-imx-4.1.15-2.1.0-g3dc0a4b-v2.7</code>文件夹内的<code>build.sh</code>一键全编译。</li><li>最后请使用<strong>04、正点原子MFG_TOOL出厂固件烧录工具</strong>进行开发板的烧录哦！</li></ul><blockquote><ol start="2"><li>教程镜像：linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4</li></ol></blockquote><ul><li>这里的编译的内核选用<code>linux-imx-rel_imx_4.1.15_2.1.1_ga_alientek_v2.4.tar.bz2</code>即正点原子imx6ull的教程镜像</li><li>解压方法：<code>tar -vxjf xxx.tar.bz2</code></li></ul><h2 id="驱动开发"><a href="#驱动开发" class="headerlink" title="驱动开发"></a>驱动开发</h2><ul><li>Linux驱动有<strong>两种运行方式</strong>，<strong>第一种</strong>就是将驱动<strong>编译进Linux内核</strong>中，这样当Linux内核启动的时候就会自动运行驱动程序。<strong>第二种</strong>就是<strong>将驱动编译成模块</strong>(Linux下模块扩展名为.ko)，在Linux内核启动以后使用<code>insmod</code>或<code>modprobe</code>命令加载驱动模块，使用<code>rmmod</code>或<code>modprobe -r</code>命令卸载驱动模块。</li></ul><h3 id="驱动模块的加载与卸载"><a href="#驱动模块的加载与卸载" class="headerlink" title="驱动模块的加载与卸载"></a>驱动模块的加载与卸载</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>Linux的驱动程序可以编译到<code>kernel</code>里面（也就是<code>zImage</code>），也可以编译为模块<code>.ko</code>。测试的时候只需要加载<code>.ko</code>模块就可以。</li><li>编写驱动时的注意事项<blockquote><ul><li>编译驱动的时候需要用到Linux内核源码！因此要解压缩Linux内核源码，编译Linux内核源码！编译完成会得到<code>zImage</code>和<code>.dtb</code>设备树。需要使用编译后得到的<code>zImage</code>和<code>.dtb</code>启动系统。</li></ul></blockquote></li></ul><h4 id="驱动模块的Makefile"><a href="#驱动模块的Makefile" class="headerlink" title="驱动模块的Makefile"></a>驱动模块的Makefile</h4><ul><li>Makefile的通用写法<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Makefile">KERNELDIR := /home/embedfire/kl_files/linux/IMX6ULL/linux<br>CURRENT_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br>obj-m := chrdevbase.o<br><br>build : kernel_modules<br><br><span class="hljs-section">kernel_modules:</span><br><span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KERNELDIR)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> modules<br><span class="hljs-section">clean:</span><br><span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KERNELDIR)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> clean<br></code></pre></td></tr></table></figure></li><li>注意要修改<code>c_cpp_properties.json</code>当中的路径哦！（修改了你就可以写代码的时候有补全，不管它对模块的编译和应用没影响）</li></ul><h4 id="驱动模块的编译"><a href="#驱动模块的编译" class="headerlink" title="驱动模块的编译"></a>驱动模块的编译</h4><ul><li><p><code>make</code>在Makefile存放的目录下执行该命令进行编译，编译完成后生成<code>.ko</code>模块</p></li><li><p><code>make clean</code>用于清理编译生成的模块等文件</p></li><li><p>请在使用<code>make</code>命令之前先使用此命令选择交叉工具链<code>source /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi</code></p></li><li><p>编译应用<code>arm-linux-gnueabihf-gcc chrdevbaseApp.c -o chrdevbaseApp</code></p></li></ul><h4 id="模块加载和卸载命令"><a href="#模块加载和卸载命令" class="headerlink" title="模块加载和卸载命令"></a>模块加载和卸载命令</h4><blockquote><p>模块的加载</p></blockquote><ul><li><code>insmod</code>具体用法：<code>insmod xxx.ko</code></li><li><code>modprobe</code>具体用法：<code>modprobe xxx</code>，记得使用之前用<code>depmod</code>刷新当前的模块变量哦！</li><li>加载完成可以使用<code>cat /proc/devices</code>查看模块的设备号哦！</li></ul><blockquote><p>模块的卸载</p></blockquote><ul><li><code>rmmod</code>具体用法：<code>rmmod xxx.ko</code></li><li><code>modprobe -r</code>具体用法：<code>modprobe -r xxx</code></li></ul><h4 id="字符设备驱动-基于设备树的GPIO高低电平驱动模块编写"><a href="#字符设备驱动-基于设备树的GPIO高低电平驱动模块编写" class="headerlink" title="字符设备驱动 - 基于设备树的GPIO高低电平驱动模块编写"></a>字符设备驱动 - 基于设备树的GPIO高低电平驱动模块编写</h4><p>Plus：驱动编写完成进行测试的时候要多次加载卸载来测试驱动的稳健性，如果一两次加载卸载可以成功，试多几次就不行了，可能是我们在驱动编写的时候没有注销、摧毁设备，没有释放内存导致的，这时就需要我们回去修改驱动相关代码啦！</p><h5 id="具体编写流程"><a href="#具体编写流程" class="headerlink" title="具体编写流程"></a>具体编写流程</h5><ul><li><p>编写设备结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module_dev</span>&#123;</span><br><span class="hljs-type">dev_t</span> devid; <span class="hljs-comment">// 设备号</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span> <span class="hljs-comment">// cdev</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-keyword">class</span>;</span> <span class="hljs-comment">// 类</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">device</span>;</span> <span class="hljs-comment">// 设备</span><br><span class="hljs-type">int</span> major; <span class="hljs-comment">// 主设备号</span><br><span class="hljs-type">int</span> minor; <span class="hljs-comment">// 次设备号</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_node</span> *<span class="hljs-title">nd</span>;</span> <span class="hljs-comment">// 设备节点</span><br><span class="hljs-type">int</span> module_gpio; <span class="hljs-comment">// module设备所使用的GPIO编号</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module_dev</span> <span class="hljs-title">module</span>;</span> <span class="hljs-comment">/* module 设备 */</span><br></code></pre></td></tr></table></figure></li><li><p>编写<code>module_open</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">module_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br>filp-&gt;private_data = &amp;module; <span class="hljs-comment">/* 设置私有数据 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写<code>module_read</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">module_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写<code>module_write</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">module_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *offt)</span><br>&#123;<br><span class="hljs-comment">/* ...... */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写<code>module_release</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">led_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写设备操作函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">module_fops</span> =</span> &#123;<br>.owner = THIS_MODULE,<br>.open = module_open,<br> .read = module_read,<br> .write = module_write,<br> .release = module_release,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>编写驱动入口函数<code>_module_init</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODULE_CNT 1 <span class="hljs-comment">// 设备号个数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODULE_NAME <span class="hljs-string">&quot;module&quot;</span> <span class="hljs-comment">// 名字</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init _module_init(<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-comment">/* 设置module设备所使用的GPIO */</span><br><span class="hljs-comment">// 1.获取设备节点（gpio子系统节点）</span><br>module.nd = of_find_node_by_path(<span class="hljs-string">&quot;/module&quot;</span>);<br><span class="hljs-comment">// 判断设备节点是否获取成功</span><br><span class="hljs-keyword">if</span>(module.nd == <span class="hljs-literal">NULL</span>) <br>&#123;<br> printk(<span class="hljs-string">&quot;module node cant not found!\r\n&quot;</span>);<br> <span class="hljs-keyword">return</span> -EINVAL; <span class="hljs-comment">// 获取失败返回失败值</span><br> &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>printk(<span class="hljs-string">&quot;module node has been found!\r\n&quot;</span>);<br> &#125;<br><br><span class="hljs-comment">// 2.获取设备树中的gpio属性，得到module所使用的gpio编号</span><br>module.module_gpio = of_get_named_gpio(module.nd, <span class="hljs-string">&quot;module-gpio&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(module.module_gpio &lt; <span class="hljs-number">0</span>)<br>&#123;<br> printk(<span class="hljs-string">&quot;can&#x27;t get module-gpio&quot;</span>);<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br> printk(<span class="hljs-string">&quot;module-gpio num = %d\r\n&quot;</span>, module.module_gpio);<br><br><span class="hljs-comment">// 3.其他设置，比如设置gpio的电平输出状态等</span><br><br><span class="hljs-comment">/* 注册字符设备驱动 */</span><br><span class="hljs-comment">// 1.创建设备号</span><br><span class="hljs-keyword">if</span> (module.major)<br>&#123; <br><span class="hljs-comment">/* 定义了设备号 */</span><br> module.devid = MKDEV(module.major, <span class="hljs-number">0</span>);<br> register_chrdev_region(module.devid, MODULE_CNT,MODULE_NAME);<br> &#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br><span class="hljs-comment">/* 没有定义设备号 */</span><br> alloc_chrdev_region(&amp;module.devid, <span class="hljs-number">0</span>, MODULE_CNT, MODULE_NAME); <span class="hljs-comment">/* 申请设备号 */</span><br> module.major = MAJOR(module.devid); <span class="hljs-comment">/* 获取分配号的主设备号 */</span><br> module.minor = MINOR(module.devid); <span class="hljs-comment">/* 获取分配号的次设备号 */</span><br> &#125;<br> printk(<span class="hljs-string">&quot;module major=%d,minor=%d\r\n&quot;</span>,module.major,module.minor);<br><br><span class="hljs-comment">// 2.初始化 cdev</span><br>module.cdev.owner = THIS_MODULE;<br>cdev_init(&amp;module.cdev, &amp;module_fops);<br><br><span class="hljs-comment">// 3.添加一个 cdev</span><br>cdev_add(&amp;module.cdev, module.devid, MODULE_CNT);<br><br><span class="hljs-comment">// 4.创建类</span><br>module.class = class_create(THIS_MODULE, MODULE_NAME);<br> <span class="hljs-keyword">if</span> (IS_ERR(module.class))<br>&#123;<br> <span class="hljs-keyword">return</span> PTR_ERR(module.class);<br> &#125;<br><br><span class="hljs-comment">// 5.创建设备</span><br>module.device = device_create(module.class, <span class="hljs-literal">NULL</span>, module.devid, <span class="hljs-literal">NULL</span>, MODULE_NAME);<br> <span class="hljs-keyword">if</span> (IS_ERR(module.device))<br>&#123;<br> <span class="hljs-keyword">return</span> PTR_ERR(module.device);<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写驱动出口函数<code>_module_exit</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit _module_exit(<span class="hljs-type">void</span>)<br>&#123;<br> <span class="hljs-comment">/* 注销字符设备驱动 */</span><br> cdev_del(&amp;module.cdev); <span class="hljs-comment">/* 删除 cdev */</span><br> unregister_chrdev_region(module.devid, MODULE_CNT); <span class="hljs-comment">/* 注销设备号 */</span><br><br> device_destroy(module.class, module.devid); <span class="hljs-comment">/* 注销设备 */</span><br> class_destroy(module.class); <span class="hljs-comment">/* 注销类 */</span><br>&#125;<br><br><span class="hljs-comment">/* 将自己编写的驱动出入口函数注册进API当中 */</span><br>module_init(_module_init); <br>module_exit(_module_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>); <span class="hljs-comment">// 添加版权信息</span><br>MODULE_AUTHOR(<span class="hljs-string">&quot;kkl&quot;</span>); <span class="hljs-comment">// 添加作者信息</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="通用的i2c-dev驱动-基于设备树的I2C驱动模块编写"><a href="#通用的i2c-dev驱动-基于设备树的I2C驱动模块编写" class="headerlink" title="通用的i2c_dev驱动 - 基于设备树的I2C驱动模块编写"></a>通用的i2c_dev驱动 - 基于设备树的I2C驱动模块编写</h4><h5 id="具体编写流程（基于ap3216c光传感器"><a href="#具体编写流程（基于ap3216c光传感器" class="headerlink" title="具体编写流程（基于ap3216c光传感器"></a>具体编写流程（基于ap3216c光传感器</h5><ul><li><p>编写设备结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ap3216c_dev</span> &#123;</span><br><span class="hljs-type">dev_t</span> devid; <span class="hljs-comment">// 设备号</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span> <span class="hljs-comment">// cdev</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-keyword">class</span>;</span> <span class="hljs-comment">// 类</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">device</span>;</span> <span class="hljs-comment">// 设备</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_node</span> *<span class="hljs-title">nd</span>;</span> <span class="hljs-comment">// 设备节点</span><br><span class="hljs-type">int</span> major; <span class="hljs-comment">// 主设备号</span><br><span class="hljs-type">void</span> *private_data; <span class="hljs-comment">// 私有数据</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ir, als, ps;<span class="hljs-comment">// 三个光传感器数据</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ap3216c_dev</span> <span class="hljs-title">ap3216cdev</span>;</span><br></code></pre></td></tr></table></figure></li><li><p>编写I2C读多个寄存器函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 从ap3216c读取多个寄存器数据</span><br><span class="hljs-comment"> * @param - dev: ap3216c设备</span><br><span class="hljs-comment"> * @param - reg: 要读取的寄存器首地址</span><br><span class="hljs-comment"> * @param - val: 读取到的数据</span><br><span class="hljs-comment"> * @param - len: 要读取的数据长度</span><br><span class="hljs-comment"> * @return: 操作结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ap3216c_read_regs</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ap3216c_dev *dev, u8 reg, <span class="hljs-type">void</span> *val, <span class="hljs-type">int</span> len)</span><br>&#123;<br><span class="hljs-comment">/* ...... */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写I2C写多个寄存器函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 向ap3216c多个寄存器写入数据</span><br><span class="hljs-comment"> * @param - dev: ap3216c设备</span><br><span class="hljs-comment"> * @param - reg: 要写入的寄存器首地址</span><br><span class="hljs-comment"> * @param - val: 要写入的数据缓冲区</span><br><span class="hljs-comment"> * @param - len: 要写入的数据长度</span><br><span class="hljs-comment"> * @return: 操作结果</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-type">static</span> s32 <span class="hljs-title function_">ap3216c_write_regs</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ap3216c_dev *dev, u8 reg, u8 *buf, u8 len)</span><br>&#123;<br><span class="hljs-comment">/* ...... */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写设备文件打开函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 打开设备</span><br><span class="hljs-comment"> * @param - inode: 传递给驱动的inode</span><br><span class="hljs-comment"> * @param - filp: 设备文件，file结构体有个叫做private_data的成员变量</span><br><span class="hljs-comment"> * @return: 0 成功;其他 失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ap3216c_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br><span class="hljs-comment">/* 一般在open的时候将private_data指向设备结构体 */</span> <br>filp-&gt;private_data = &amp;ap3216cdev;<br><span class="hljs-comment">/* 初始化AP3216C */</span><br>ap3216c_write_reg(&amp;ap3216cdev, AP3216C_SYSTEMCONG, <span class="hljs-number">0x04</span>); <span class="hljs-comment">// 复位ap3216c</span><br>mdelay(<span class="hljs-number">50</span>); <span class="hljs-comment">// AP3216C复位最少10ms</span><br>ap3216c_write_reg(&amp;ap3216cdev, AP3216C_SYSTEMCONG, <span class="hljs-number">0X03</span>); <span class="hljs-comment">// 开启ALS、PS+IR </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写设备文件读取函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 从设备读取数据 </span><br><span class="hljs-comment"> * @param - filp: 要打开的设备文件(文件描述符)</span><br><span class="hljs-comment"> * @param - buf: 返回给用户空间的数据缓冲区</span><br><span class="hljs-comment"> * @param - cnt: 要读取的数据长度</span><br><span class="hljs-comment"> * @param - offt: 相对于文件首地址的偏移</span><br><span class="hljs-comment"> * @return: 读取的字节数，如果为负值，表示读取失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">ap3216c_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> cnt, <span class="hljs-type">loff_t</span> *off)</span><br>&#123;<br><span class="hljs-type">short</span> data[<span class="hljs-number">3</span>];<br><span class="hljs-type">long</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ap3216c_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> ap3216c_dev *)filp-&gt;private_data;<br><br>ap3216c_readdata(dev);<br><br>data[<span class="hljs-number">0</span>] = dev-&gt;ir;<br>data[<span class="hljs-number">1</span>] = dev-&gt;als;<br>data[<span class="hljs-number">2</span>] = dev-&gt;ps;<br>err = copy_to_user(buf, data, <span class="hljs-keyword">sizeof</span>(data));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写设备释放函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 关闭/释放设备</span><br><span class="hljs-comment"> * @param - filp: 要关闭的设备文件(文件描述符)</span><br><span class="hljs-comment"> * @return: 0 成功;其他 失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ap3216c_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写设备操作函数集合结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">ap3216c_ops</span> =</span> &#123;<br> .owner = THIS_MODULE,<br> .open = ap3216c_open,<br> .read = ap3216c_read,<br> .release = ap3216c_release,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>编写I2C驱动的匹配函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* @description: i2c驱动的probe函数，当驱动与设备匹配以后此函数就会执行      </span><br><span class="hljs-comment">* @param - client: i2c设备</span><br><span class="hljs-comment">* @param - id: i2c设备ID</span><br><span class="hljs-comment">* @return: 0-&gt;成功; 其他负值-&gt;失败</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ap3216c_probe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_client *client, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> i2c_device_id *id)</span><br>&#123;<br><span class="hljs-comment">// 1.构建设备号</span><br><span class="hljs-keyword">if</span> (ap3216cdev.major)<br>&#123;<br>ap3216cdev.devid = MKDEV(ap3216cdev.major, <span class="hljs-number">0</span>);<br>register_chrdev_region(ap3216cdev.devid, AP3216C_CNT, AP3216C_NAME);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>alloc_chrdev_region(&amp;ap3216cdev.devid, <span class="hljs-number">0</span>, AP3216C_CNT, AP3216C_NAME);<br>ap3216cdev.major = MAJOR(ap3216cdev.devid);<br>&#125;<br><br><span class="hljs-comment">// 2.注册设备</span><br>cdev_init(&amp;ap3216cdev.cdev, &amp;ap3216c_ops);<br>cdev_add(&amp;ap3216cdev.cdev, ap3216cdev.devid, AP3216C_CNT);<br><br><span class="hljs-comment">// 3.创建类</span><br>ap3216cdev.class = class_create(THIS_MODULE, AP3216C_NAME);<br><span class="hljs-keyword">if</span> (IS_ERR(ap3216cdev.class))<br>&#123;<br><span class="hljs-keyword">return</span> PTR_ERR(ap3216cdev.class);<br>&#125;<br><br><span class="hljs-comment">// 4.创建设备</span><br>ap3216cdev.device = device_create(ap3216cdev.class, <span class="hljs-literal">NULL</span>, ap3216cdev.devid, <span class="hljs-literal">NULL</span>, AP3216C_NAME);<br><span class="hljs-keyword">if</span> (IS_ERR(ap3216cdev.device))<br>&#123;<br><span class="hljs-keyword">return</span> PTR_ERR(ap3216cdev.device);<br>&#125;<br><br>ap3216cdev.private_data = client;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写I2C驱动的移除函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: i2c驱动的remove函数，移除i2c驱动的时候此函数会执行</span><br><span class="hljs-comment"> * @param - client: i2c设备</span><br><span class="hljs-comment"> * @return: 0-&gt;成功; 其他负值-&gt;失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ap3216c_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_client *client)</span><br>&#123;<br><span class="hljs-comment">/* 删除设备 */</span><br>cdev_del(&amp;ap3216cdev.cdev);<br>unregister_chrdev_region(ap3216cdev.devid, AP3216C_CNT);<br><br><span class="hljs-comment">/* 注销掉类和设备 */</span><br>device_destroy(ap3216cdev.class, ap3216cdev.devid);<br>class_destroy(ap3216cdev.class);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建匹配列表和I2C驱动结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 传统匹配方式ID列表 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_device_id</span> <span class="hljs-title">ap3216c_id</span>[] =</span> &#123;<br>&#123;<span class="hljs-string">&quot;alientek,ap3216c&quot;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">/* 设备树匹配列表 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">of_device_id</span> <span class="hljs-title">ap3216c_of_match</span>[] =</span> &#123;<br>&#123; .compatible = <span class="hljs-string">&quot;alientek,ap3216c&quot;</span> &#125;,<br>&#123; <span class="hljs-comment">/* Sentinel */</span> &#125;<br>&#125;;<br><br><span class="hljs-comment">/* i2c驱动结构体 */</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_driver</span> <span class="hljs-title">ap3216c_driver</span> =</span> &#123;<br>.probe = ap3216c_probe,<br>.remove = ap3216c_remove,<br>.driver = &#123;<br>.owner = THIS_MODULE,<br>   .name = <span class="hljs-string">&quot;ap3216c&quot;</span>,<br>   .of_match_table = ap3216c_of_match, <br>   &#125;,<br>.id_table = ap3216c_id,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>编写驱动出入口函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 驱动入口函数</span><br><span class="hljs-comment"> * @param: 无</span><br><span class="hljs-comment"> * @return: 无</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">ap3216c_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>ret = i2c_add_driver(&amp;ap3216c_driver);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description: 驱动出口函数</span><br><span class="hljs-comment"> * @param: 无</span><br><span class="hljs-comment"> * @return: 无</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">ap3216c_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>i2c_del_driver(&amp;ap3216c_driver);<br>&#125;<br><br><span class="hljs-comment">/* module_i2c_driver(ap3216c_driver) */</span><br><br>module_init(ap3216c_init);<br>module_exit(ap3216c_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;kkl&quot;</span>);<br><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="设备树"><a href="#设备树" class="headerlink" title="设备树"></a>设备树</h2><ul><li>VScode设备树高亮插件：devicetree</li></ul><h3 id="pinctrl子系统"><a href="#pinctrl子系统" class="headerlink" title="pinctrl子系统"></a>pinctrl子系统</h3><ol><li><p>在<code>iomuxc</code>中创建pinctrl节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs devicetree">pinctrl_test: testgrp &#123;<br><br>/* 具体的PIN信息 */<br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>添加”fsl,pins”属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs devicetree">pinctrl_test: testgrp &#123;<br>fsl,pins = &lt;<br>/* 设备所使用的 PIN 配置信息 */<br>MX6UL_PAD_GPIO1_IO00__GPIO1_IO00 config /* config 是具体设置值 */<br>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h3 id="gpio子系统"><a href="#gpio子系统" class="headerlink" title="gpio子系统"></a>gpio子系统</h3><ol><li>在根节点<code>/</code>下创建gpio设备子节点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs devicetree">test &#123;<br>/* 节点内容 */<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>添加pinctrl信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs devicetree">test &#123;<br>pinctrl-names = &quot;default&quot;; /* 添加pinctrl-name属性，描述pinctrl名字为&quot;default&quot; */<br>pinctrl-0 = &lt;&amp;pinctrl_test&gt;; /* 添加pinctrl-0节点，表示test设备所使用的Pin信息保存在pinctrl_test节点当中 */<br>/* 其他节点内容 */<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>添加gpio属性信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs devicetree">test &#123;<br>pinctrl-names = &quot;default&quot;; /* 添加pinctrl-name属性，描述pinctrl名字为&quot;default&quot; */<br>pinctrl-0 = &lt;&amp;pinctrl_test&gt;; /* 添加pinctrl-0节点，表示test设备所使用的Pin信息保存在pinctrl_test节点当中 */<br>gpio = &lt;&amp;gpio1 0 GPIO_ACTIVE_LOW&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="长定时（P1260）"><a href="#长定时（P1260）" class="headerlink" title="长定时（P1260）"></a>长定时（P1260）</h4><h4 id="短延时Delay（P1260）"><a href="#短延时Delay（P1260）" class="headerlink" title="短延时Delay（P1260）"></a>短延时Delay（P1260）</h4><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="打开有管理员权限的文件管理器"><a href="#打开有管理员权限的文件管理器" class="headerlink" title="打开有管理员权限的文件管理器"></a>打开有管理员权限的文件管理器</h3><ul><li><code>sudo nautilus</code></li></ul><h3 id="删除非空文件夹"><a href="#删除非空文件夹" class="headerlink" title="删除非空文件夹"></a>删除非空文件夹</h3><ul><li><code>rm -r xxx</code>-r的意思就是递归操作，将会删除该文件夹下的所有子文件夹和文件！</li></ul><h3 id="查看dmesg日志信息"><a href="#查看dmesg日志信息" class="headerlink" title="查看dmesg日志信息"></a>查看dmesg日志信息</h3><ul><li><code>dmesg</code>把从启动开始到当前是所有日志都打印出来</li><li><code>dmesg | tail</code>默认打印最近的十条日志</li><li><code>dmesg | tail -20</code>打印最近的二十条日志</li></ul><h3 id="挂载SD卡"><a href="#挂载SD卡" class="headerlink" title="挂载SD卡"></a>挂载SD卡</h3><ol><li>通过<code>fdisk -l</code>确定sd卡的存在</li><li>创建一个空文件夹，我选择<code>/mnt/mmc</code></li><li>挂载sd卡到新创建的空文件夹<code>mount /dev/mmcblk0p1 /mnt/mmc</code></li></ol><ul><li>卸载可以使用<code>umount /mnt/mmc</code>，注意卸载的时候你所在的当前目录不能是&#x2F;mnt，否则会卸载失败的。</li></ul><h3 id="复制非空文件夹"><a href="#复制非空文件夹" class="headerlink" title="复制非空文件夹"></a>复制非空文件夹</h3><ul><li><code>cp -r /home/packageA/* /home/packageB/</code> 或者<code>cp /home/packageA/* /home/packageB/</code>是把packageA中的文件都复制到packageB中</li><li><code>cp -r /home/packageA/ /home/cp/packageB/</code> 是直接把packageA文件夹复制到packageB中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">Linux cp（英文全拼：copy file）命令主要用于复制文件或目录。<br><br>语法<br>cp [options] source dest<br>或<br><br>cp [options] source... directory<br>参数说明：<br><br>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。<br>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。<br>-f：覆盖已经存在的目标文件而不给出提示。<br>-i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。<br>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。<br>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。<br>-l：不复制文件，只是生成链接文件。<br>实例<br>使用指令 cp 将当前目录 test/ 下的所有文件复制到新目录 newtest 下，输入如下命令：<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> –r <span class="hljs-built_in">test</span>/ newtest</span>          <br>注意：用户使用该指令复制目录时，必须使用参数 -r 或者 -R 。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>IMX6ULL</tag>
      
      <tag>驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的FreeRTOS使用指南</title>
    <link href="/2023/12/09/MyFreeRTOSLearningGuide/MyFreeRTOSLearningGuide/"/>
    <url>/2023/12/09/MyFreeRTOSLearningGuide/MyFreeRTOSLearningGuide/</url>
    
    <content type="html"><![CDATA[<h1 id="我的FreeRTOS使用指南"><a href="#我的FreeRTOS使用指南" class="headerlink" title="我的FreeRTOS使用指南"></a>我的FreeRTOS使用指南</h1><h1 id="MyFreeRTOS-LearningGuide"><a href="#MyFreeRTOS-LearningGuide" class="headerlink" title="MyFreeRTOS-LearningGuide"></a>MyFreeRTOS-LearningGuide</h1><h2 id="By-kkl"><a href="#By-kkl" class="headerlink" title="By @kkl"></a>By @kkl</h2><hr><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>本指南着重于FreeRTOS的API从入门到入土的所有用法（Maybe<br>不会太深究底层的内核实现，可能有一些相关性强的会Q一下<br>会讲一些我学习RTOS的时候卡关的地方，或者是觉得莫名其妙的、理解困难的点<br>主张一个，看着就能用，或者是看着看着就会用，而且用的还一溜一溜的FreeRTOS指南</p></blockquote><hr><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>MCU: STM32F405（现在是二三年十二月，最近才十元钱每片，以前单价十多元我还傻乎乎地买了好多…悲</li><li>工程: 标准库 + VScode + Keil（标准开局</li><li>版本: FreeRTOSv9.0.0</li></ul><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>讲讲我们提前必须要知道的一些知识点和概念，不然后面看到代码会直接懵圈。</li></ul><blockquote><p><strong>1.堆栈</strong></p><ul><li>简单来说就是内存动态分配的问题，比方说你代码跑起来之后，会在某函数里面创建<code>临时变量</code>（也叫<code>局部变量</code>）的时候，就会用上堆栈。</li><li><strong>栈(Stack)</strong> ：就是在某个函数创建的<code>临时变量</code>的内存是编译器自动给你分配的。当这个函数执行完毕，编译器自动帮你释放了这个<code>临时变量</code>的内存。</li><li>栈也用在触发中断的时候，用于保护现场（当前函数地址啊寄存器值啊，方便从中断回来的时候还原现场哈。</li><li>当然栈的使用还包括你函数参数<code>eg: void Func(int Temp[256])</code>这里的变量<code>Temp[256]</code>也是编译器自动帮你申请内存。所以为啥有时候移植一些大型库的时候你什么都配置好了函数也没有出错编译器却报错，原因可能是库当中的某些函数申请的<code>局部变量</code>太大，而你的栈分配的太小导致的。</li><li><strong>堆(Heap)</strong> ：就是malloc或者new，简单说就是malloc，你自己分配内存，当然也要你自己去释放free，生命周期结束不释放内存，会造成内存泄漏。</li><li><strong>静态区(Static)</strong> ：就是你放<code>全局变量</code>或者<code>static修饰的变量</code>的地方啦。<blockquote><ul><li>那么在FreeRTOS中各个任务都有自己的堆栈，一般呢我们只管写这个任务需要多大的堆栈，FreeRTOS会自动帮我们从RAM中申请内存。包括信号量、队列这些都是。</li><li><code>configSUPPORT_STATIC_ALLOCATION</code>为0的时候，FreeRTOS会使用<code>heap_x.c(x为 1~5)</code>中的动态内存管理函数来自动申请RAM；当此宏定义为1的时候，用户可以给FreeRTOS指定一块静态RAM内存，你就可以执行类似<code>xTaskCreateStatic</code>的函数啦。一般咱们写0就行（默认也是写0的</li><li><code>configTOTAL_HEAP_SIZE</code></li><li><code>#define XXX_STK_SIZE 256</code>意思是设置XXX任务的堆栈大小为256*4(字节&#x2F;byte</li></ul></blockquote></li></ul></blockquote><blockquote><p><strong>2.位和字节</strong></p><ul><li><strong>位(bit)</strong></li><li><strong>字节(Byte)</strong> ：1 byte &#x3D; 8 bit</li><li>在单片机中可以简单的把<code>byte</code>理解成<code>char</code>类型或者<code>unsigned char</code>类型</li></ul></blockquote><blockquote><p><strong>3.钩子</strong></p><ul><li>ChatGPT说，FreeRTOS的钩子函数(Hooks)是一组可由用户自定义的回调函数</li></ul></blockquote><blockquote><p><strong>4.优先级</strong></p><ul><li>使用FreeRTOS最好把优先级分组选择为<code>NVIC_PriorityGroup_4</code>，寄存器的4位bit都设置为抢占优先级，这样就有 0~15 共16个抢占优先级可供选择。因为FreeRTOS的中断配置里不能处理亚优先级（排队优先级）的这种情况。</li><li>任务优先级</li><li>FreeRTOS的任务优先级是0最不优先，越大越优先，和中断优先级相反的哈！</li></ul></blockquote><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-1-中断屏蔽"><a href="#1-1-中断屏蔽" class="headerlink" title="1.1 中断屏蔽"></a>1.1 中断屏蔽</h3><ul><li><code>configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY</code>此宏用来设置FreeRTOS系统可以管理的最大优先级。可以自由设置，正点原子设置为5，我也设置为5。也就是说抢占优先级小于5的中断不归FreeRTOS管理。</li><li><code>configMAX_SYSCALL_INTERRUPT_PRIORITY</code>此宏用来设置FreeRTOS系统可以管理的最小优先级。可以自由设置，正点原子和我都设置成15。也就是说抢占优先级大于15的中断不归FreeRTOS管理，当然STM32的优先级只有 0~15 哈。</li><li>所以上述两个宏加起来的意思就是，<strong>抢占优先级为 0-4 的中断不归FreeRTOS调度，抢占优先级 5-15 的中断服从FreeRTOS的调度。</strong></li><li><em>Plus: 不归FreeRTOS调度的中断，不可以调用FreeRTOS的API哦，不可以哦！打咩！</em></li></ul><h3 id="1-2-开关中断"><a href="#1-2-开关中断" class="headerlink" title="1.2 开关中断"></a>1.2 开关中断</h3><h3 id="1-3-临界段代码（临界区）"><a href="#1-3-临界段代码（临界区）" class="headerlink" title="1.3 临界段代码（临界区）"></a>1.3 临界段代码（临界区）</h3><h4 id="1-3-1-任务级临界段代码保护"><a href="#1-3-1-任务级临界段代码保护" class="headerlink" title="1.3.1 任务级临界段代码保护"></a>1.3.1 任务级临界段代码保护</h4><ul><li>函数<code>taskENTER_CRITICAL()</code>进入临界区和<code>taskEXIT_CRITICAL()</code>退出临界区，是任务级的临界段代码保护。保护这两个函数包夹的区域不会受到中断的打扰。</li><li><strong>Important1: 这两个函数是成对使用的哦！不可以只用其中一个，它们必须成双成对的出现！就是说，你调用了多少次进入临界段，你就要调用多少次退出临界段来抵消！否则中断会一直被屏蔽！</strong></li><li><strong>Important2: 临界区的代码一定要精简！因为进入了临界区意味着关闭了FreeRTOS可以调度的所有中断，你不精简一点，噼里啪啦一大长串，执行好几秒，可能会导致这些中断得不到及时的响应！</strong></li><li>使用场景：任务创建、硬件层初始化、重要的实时性高的代码段…</li><li>任务级临界段代码保护的使用方法如下:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">testFunction</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        taskENTER_CRITICAL(); <span class="hljs-comment">// 进入临界区</span><br><br>        <span class="hljs-comment">// 你的代码段...</span><br>        <span class="hljs-comment">// 这里是临界区，代码不会受到中断的打断...</span><br><br>        taskEXIT_CRITICAL(); <span class="hljs-comment">// 退出临界区</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-3-2-中断级临界段代码保护"><a href="#1-3-2-中断级临界段代码保护" class="headerlink" title="1.3.2 中断级临界段代码保护"></a>1.3.2 中断级临界段代码保护</h4><ul><li>函数<code>taskENTER_CRITICAL_FROM_ISR()</code>进入中断临界区和<code>taskEXIT_CRITICAL_FROM_ISR(x)</code>退出中断临界区，是中断级临界段代码保护。</li><li>和任务级临界段代码保护差不多，只不过这里呢，<strong>进入中断临界区函数</strong>会返回一个Value，执行<strong>退出中断临界区函数</strong>的时候要把得到的Value传给它。Value记录的就是你屏蔽的其他的中断的优先级。<strong>反正你要记住进入中断临界段时接收这个Value，并在退出中断临界段的时候把这个Value放回去！</strong></li><li><strong>Important: 也是讲究成双成对出现的！一定要注意！</strong></li><li>运用场景：实时性要求最高的代码段（你看，你在中断里打开临界区，屏蔽了自己以外的所有FreeRTOS管理的中断，防止了中断嵌套的情况发生，保护在中断临界区的代码不被打扰</li><li>中断级临界段代码保护的使用方法如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 定时器3中断服务函数 </span><br><span class="hljs-comment">// 假设定时器3的抢占优先级在FreeRTOS的调度范围内</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">TIM3_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> Status_Value = taskENTER_CRITICAL_FROM_ISR();<br><br>        <span class="hljs-comment">// 你的代码段...</span><br>        <span class="hljs-comment">// 这里是中断临界区，屏蔽所有可被FreeRTOS调度的中断...</span><br><br>        taskEXIT_CRITICAL_FROM_ISR(Status_Value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="2-1-任务状态"><a href="#2-1-任务状态" class="headerlink" title="2.1 任务状态"></a>2.1 任务状态</h3><ul><li>运行态</li><li>就绪态</li><li>阻塞态</li><li>挂起态</li></ul><hr><h3 id="2-2-任务的创建"><a href="#2-2-任务的创建" class="headerlink" title="2.2 任务的创建"></a>2.2 任务的创建</h3><h4 id="2-2-1-任务创建的API函数"><a href="#2-2-1-任务创建的API函数" class="headerlink" title="2.2.1 任务创建的API函数"></a>2.2.1 任务创建的API函数</h4><blockquote><p>函数 <strong><code>xTaskCreate()</code></strong> ，又名你会用的最多的函数。</p><ul><li>用于动态创建一个任务，RAM会自行从FreeRTOS的堆中分配出来。</li></ul></blockquote><ul><li><code>xTaskCreate()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值 pdPASS-&gt;任务创建成功 / errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY-&gt;堆内存不足，创建任务失败</span><br>BaseType_t <span class="hljs-title function_">xTaskCreate</span><span class="hljs-params">( TaskFunction_t          pxTaskCode, <span class="hljs-comment">// 任务函数</span></span><br><span class="hljs-params">                        <span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span>      pcName, <span class="hljs-comment">// 任务名字</span></span><br><span class="hljs-params">                        <span class="hljs-type">const</span> <span class="hljs-type">uint16_t</span>          usStackDepth, <span class="hljs-comment">// 任务堆栈大小，实际申请到的堆栈是usStackDepth的4倍</span></span><br><span class="hljs-params">                        <span class="hljs-type">void</span> * <span class="hljs-type">const</span>            pvParameters, <span class="hljs-comment">// 传递给任务函数的参数</span></span><br><span class="hljs-params">                        UBaseType_t             uxPriority, <span class="hljs-comment">// 任务优先级</span></span><br><span class="hljs-params">                        TaskHandle_t * <span class="hljs-type">const</span>    pxCreatedTask <span class="hljs-comment">// 任务句柄</span></span><br><span class="hljs-params">                        )</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-任务删除的API函数"><a href="#2-2-2-任务删除的API函数" class="headerlink" title="2.2.2 任务删除的API函数"></a>2.2.2 任务删除的API函数</h4><blockquote><p>函数 <strong><code>xTaskDelete()</code></strong></p><ul><li>删除一个用<code>xTaskCreate()</code>或者<code>xTaskCreateStatic()</code>创建的任务。</li><li>任务被删除之后，任务不复存在，关于被删除的任务的句柄不能再被使用，除非这个任务重新创建起来。</li><li>如果任务是由<code>xTaskCreate()</code>创建的（由动态方法创建），那么任务被删除以后，任务的堆栈将在<strong>空闲任务</strong>中得到<strong>释放</strong>，所以删除动态方法创建的任务以后要给空闲任务一些时间来释放空间哦！</li></ul></blockquote><ul><li><code>xTaskDelete()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 无返回值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vTaskDelete</span><span class="hljs-params">( TaskHandle_t xTaskToDelete )</span> <span class="hljs-comment">// xTaskToDelete是要被删除的任务的任务句柄</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-任务创建与删除的程序示例（动态方法）"><a href="#2-2-3-任务创建与删除的程序示例（动态方法）" class="headerlink" title="2.2.3 任务创建与删除的程序示例（动态方法）"></a>2.2.3 任务创建与删除的程序示例（动态方法）</h4><ul><li>简单的总结分析一下此例程的流程，因为这是我们使用 FreeRTOS 写的第一个程序，很多习惯是我们后面要用到的。比如使用任务宏定义任务优先级，堆栈大小等，一般有关一个任务的东西我们的放到一起，比如任务堆栈、任务句柄、任务函数声明等，这样方便修改。这些东西可以放到一个.h 头文件里面去，只是例程里面任务数比较少，所以就直接放到 main.c 文件里面了，要是工程比较大的话最好做一个专用的头文件来管理。</li></ul><h4 id="2-2-4-任务创建与删除的程序示例（静态方法）"><a href="#2-2-4-任务创建与删除的程序示例（静态方法）" class="headerlink" title="2.2.4 任务创建与删除的程序示例（静态方法）"></a>2.2.4 任务创建与删除的程序示例（静态方法）</h4><ul><li>和动态方法比较不同的是，想要使用静态方法，你必须自己实现两个接口函数<code>vApplicationGetIdleTaskMemory()</code>和<code>vApplicationGetTimerTaskMemory()</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 空闲任务任务堆栈 // 分配了静态的RAM啦</span><br><span class="hljs-type">static</span> StackType_t IdleTaskStack[configMINIMAL_STACK_SIZE];<br><span class="hljs-comment">// 空闲任务控制块</span><br><span class="hljs-type">static</span> StaticTask_t IdleTaskTCB;<br><br><span class="hljs-comment">// 定时器服务任务堆栈 // 分配了静态的RAM啦</span><br><span class="hljs-type">static</span> StackType_t TimerTaskStack[configTIMER_TASK_STACK_DEPTH];<br><span class="hljs-comment">// 定时器服务任务控制块</span><br><span class="hljs-type">static</span> StaticTask_t TimerTaskTCB;<br><br><span class="hljs-comment">// 获取空闲任务地任务堆栈和任务控制块内存，因为本例程使用的</span><br><span class="hljs-comment">// 静态内存，因此空闲任务的任务堆栈和任务控制块的内存就应该</span><br><span class="hljs-comment">// 有用户来提供，FreeRTOS提供了接口函数vApplicationGetIdleTaskMemory()</span><br><span class="hljs-comment">// 实现此函数即可。</span><br><span class="hljs-comment">// ppxIdleTaskTCBBuffer:任务控制块内存</span><br><span class="hljs-comment">// ppxIdleTaskStackBuffer:任务堆栈内存</span><br><span class="hljs-comment">// pulIdleTaskStackSize:任务堆栈大小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vApplicationGetIdleTaskMemory</span><span class="hljs-params">( StaticTask_t **ppxIdleTaskTCBBuffer,</span><br><span class="hljs-params">    StackType_t **ppxIdleTaskStackBuffer,</span><br><span class="hljs-params">    <span class="hljs-type">uint32_t</span> *pulIdleTaskStackSize)</span><br>&#123;<br>*ppxIdleTaskTCBBuffer = &amp;IdleTaskTCB;<br>*ppxIdleTaskStackBuffer = IdleTaskStack;<br>*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;<br>&#125;<br><br><span class="hljs-comment">// 获取定时器服务任务的任务堆栈和任务控制块内存</span><br><span class="hljs-comment">// ppxTimerTaskTCBBuffer:任务控制块内存</span><br><span class="hljs-comment">// ppxTimerTaskStackBuffer:任务堆栈内存</span><br><span class="hljs-comment">// pulTimerTaskStackSize:任务堆栈大小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vApplicationGetTimerTaskMemory</span><span class="hljs-params">(StaticTask_t **ppxTimerTaskTCBBuffer,</span><br><span class="hljs-params">    StackType_t **ppxTimerTaskStackBuffer,</span><br><span class="hljs-params">    <span class="hljs-type">uint32_t</span> *pulTimerTaskStackSize)</span><br>&#123;<br>*ppxTimerTaskTCBBuffer = &amp;TimerTaskTCB;<br>*ppxTimerTaskStackBuffer = TimerTaskStack;<br>*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-x-x-任务控制块"><a href="#2-x-x-任务控制块" class="headerlink" title="2.x.x 任务控制块"></a>2.x.x 任务控制块</h4><h4 id="2-x-x-任务堆栈"><a href="#2-x-x-任务堆栈" class="headerlink" title="2.x.x 任务堆栈"></a>2.x.x 任务堆栈</h4><hr><h3 id="2-3-任务挂起和恢复"><a href="#2-3-任务挂起和恢复" class="headerlink" title="2.3 任务挂起和恢复"></a>2.3 任务挂起和恢复</h3><h4 id="2-3-1-任务挂起的API函数"><a href="#2-3-1-任务挂起的API函数" class="headerlink" title="2.3.1 任务挂起的API函数"></a>2.3.1 任务挂起的API函数</h4><blockquote><p>函数 <strong><code>vTaskSuspend()</code></strong></p><ul><li>该函数用于将某个任务设置为挂起态，任务挂起以后就不会被运行，直到使用<code>vTaskResume()</code>或者<code>xTaskResumeFromISR()</code>结束任务的挂起态。</li></ul></blockquote><ul><li><code>vTaskSuspend()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 无返回值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vTaskSuspend</span><span class="hljs-params">( TaskHandle_t xTaskToSuspend )</span> <span class="hljs-comment">// xTaskToSuspend将要被挂起任务的任务句柄 </span><br>                                                 <span class="hljs-comment">// 注意！如果参数为NULL，表示挂起任务自己。</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-任务恢复的API函数"><a href="#2-3-2-任务恢复的API函数" class="headerlink" title="2.3.2 任务恢复的API函数"></a>2.3.2 任务恢复的API函数</h4><blockquote><p>函数 <strong><code>vTaskResume()</code></strong> ，在主程序中调用</p><ul><li>该函数可以也只可以将先前使用<code>vTaskSuspend()</code>函数挂起的任务恢复到就绪态。</li></ul></blockquote><ul><li><code>vTaskResume()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 无返回值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">vTaskResume</span><span class="hljs-params">( TaskHandle_t xTaskToResume )</span> <span class="hljs-comment">// 将要被恢复任务的任务句柄</span><br></code></pre></td></tr></table></figure><blockquote><p>函数 <strong><code>xTaskResumeFromISR()</code></strong> ，在中断函数中调用</p><ul><li>该函数是<code>vTaskResume()</code>函数的中断版本，需要在中断里调用哈。</li><li>该函数可以也只可以将先前使用<code>vTaskSuspend()</code>函数挂起的任务恢复到就绪态。</li></ul></blockquote><ul><li><code>xTaskResumeFromISR()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：pdTRUE-&gt;恢复的任务优先级 &gt;= 当前任务的优先级，所以在退出中断函数后要进行一次上下文切换</span><br><span class="hljs-comment">// 返回值：pdFALSE-&gt;恢复的任务优先级 &lt; 当前任务的优先级，所以在退出中断函数后不需要进行一次上下文切换</span><br>BaseType_t <span class="hljs-title function_">xTaskResumeFromISR</span><span class="hljs-params">( TaskHandle_t xTaskToResume )</span> <span class="hljs-comment">// 将要被恢复任务的任务句柄</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3-任务挂起和恢复程序示例"><a href="#2-3-3-任务挂起和恢复程序示例" class="headerlink" title="2.3.3 任务挂起和恢复程序示例"></a>2.3.3 任务挂起和恢复程序示例</h4><hr><h3 id="3-1-列表和列表项"><a href="#3-1-列表和列表项" class="headerlink" title="3.1 列表和列表项"></a>3.1 列表和列表项</h3><h4 id="3-1-1-列表"><a href="#3-1-1-列表" class="headerlink" title="3.1.1 列表"></a>3.1.1 列表</h4><p>为啥要有列表？不是已经可以创建任务运行任务了吗？我的理解是，在做一些大型项目的时候，往往要根据不同的场景执行不同的任务，有时任务比较多了，创建任务和删除任务这些操作就变得弯弯绕绕了。这个时候把任务们归类进不同的列表中，那我切换运用场景的时候，直接切换目前正在执行的列表就行啦！就不用一个一个对任务进行操作，避免了麻烦。</p><ul><li>列表，是FreeRTOS中的一个数据结构，和链表有点像，是被用做跟踪FreeRTOS中的任务的</li><li>列表项就是存放在列表当中的项目</li><li>列表相当于链表，列表项相当于节点，FreeRTOS中的列表是一个双向环形链表</li><li>常见的列表包括：就绪列表、阻塞列表、挂起列表（目前自己做列表的情况比较少，都是RTOS自动帮我们做好的）</li></ul><h4 id="3-1-2-列表项"><a href="#3-1-2-列表项" class="headerlink" title="3.1.2 列表项"></a>3.1.2 列表项</h4><ul><li>列表项，就是存放在列表中的项目。</li><li>FreeRTOS提供了两种列表项：列表项和迷你列表项。</li></ul><hr><h3 id="4-1-调度器"><a href="#4-1-调度器" class="headerlink" title="4.1 调度器"></a>4.1 调度器</h3><blockquote><p>函数 <strong><code>vTaskStartScheduler()</code></strong> ，开启任务调度器</p><ul><li>在<code>main()</code>函数里，创建好所需的任务后，即可调用<code>vTaskStartScheduler()</code>让任务开始运行吧。</li></ul></blockquote><blockquote><p>函数 <strong><code>vTaskEndScheduler()</code></strong> ，关闭任务调度器</p></blockquote><blockquote><p>函数 <strong><code>vTaskSuspendAll()</code></strong> ，挂起任务调度器，就是挂起所有任务</p></blockquote><blockquote><p>函数 <strong><code>vTaskResumeAll()</code></strong> ，恢复任务调度器，就是恢复所有任务</p></blockquote><h3 id="4-2-空闲任务"><a href="#4-2-空闲任务" class="headerlink" title="4.2 空闲任务"></a>4.2 空闲任务</h3><blockquote><ul><li>调用<code>vTaskStartScheduler()</code>时候，此函数会自动创建一个名为<code>IDLE</code>的任务，这个就是空闲任务！它是FreeRTOS系统自动创建的，不需要用户手动创建。而且任务调动器启动以后必须至少有一个任务在运行中，所以这也是空闲任务存在的意义之一。</li><li>空闲任务的优先级最低，是0！任务函数为<code>prvIdleTask()</code>（是啥？</li><li>空闲任务的作用如下：<blockquote><ul><li>如果系统有任务被删除，被删除的任务的堆栈和任务控制块的内存会在空闲任务中得到释放哦！</li><li>运行用户设置的空闲任务钩子函数（？啥是钩子</li><li>判断是否开启低功耗tickless模式，如果开启的话还需要做相应的处理（？</li></ul></blockquote></li></ul></blockquote><h3 id="4-3-延时函数"><a href="#4-3-延时函数" class="headerlink" title="4.3 延时函数"></a>4.3 延时函数</h3><blockquote><p>函数 <strong><code>xTaskDelay()</code></strong> ，延时多少时间，用于固定延时（常用的普通的延时函数）</p></blockquote><blockquote><p>函数 <strong><code>xTaskDelayUntil()</code></strong> ，每隔多少时间执行一次函数，用于周期性执行</p></blockquote><hr><h3 id="5-1-队列"><a href="#5-1-队列" class="headerlink" title="5.1 队列"></a>5.1 队列</h3><ul><li>队列是任务到任务、任务到中断、中断到任务数据交流的一种机制（消息传递</li><li>写队列和读队列的api函数都会自动进入临界区操作的</li><li>在队列中可以存储数量有限、大小固定的数据。队列中的每一个数据叫做“队列项目”，队列能够存储“队列项目”的最大数量成为队列的长度</li></ul><h3 id="5-2-二值信号量"><a href="#5-2-二值信号量" class="headerlink" title="5.2 二值信号量"></a>5.2 二值信号量</h3><ul><li><p>二值信号量：其实就是一个只有一个队列项的队列，这个特殊的队列要么是满的，要么是空的，这正好是二值！</p></li><li><p>任务和中断使用这个特殊队列不用在乎队列中存的是什么消息，只需要知道这个队列是满的还是空的，就可以利用这个机制来完成任务与中断之间的同步！</p></li></ul><h4 id="5-2-1-二值信号量创建的API函数"><a href="#5-2-1-二值信号量创建的API函数" class="headerlink" title="5.2.1 二值信号量创建的API函数"></a>5.2.1 二值信号量创建的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreCreateBinary()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreCreateBinary()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：NULL-&gt;信号量创建失败；其他-&gt;创建成功的信号量的句柄</span><br>SemaphoreHandle_t <span class="hljs-title function_">xSemaphoreCreateBinary</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br></code></pre></td></tr></table></figure><h4 id="5-2-2-二值信号量释放的API函数"><a href="#5-2-2-二值信号量释放的API函数" class="headerlink" title="5.2.2 二值信号量释放的API函数"></a>5.2.2 二值信号量释放的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreGive()</code></strong> ，任务级信号量释放函数<br>函数 <strong><code>xSemaphoreGiveISR()</code></strong> ，中断级信号量释放函数</p></blockquote><ul><li><code>xSemaphoreGive()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：errQUEUE_FULL-&gt;信号量释放失败；pdPASS-&gt;信号量释放成功</span><br><span class="hljs-comment">// 参数： xSemaphore-&gt;要释放的信号量句柄</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreGive</span><span class="hljs-params">( SemaphoreHandle_t xSemaphore )</span> <br></code></pre></td></tr></table></figure><ul><li><code>xSemaphoreGiveISR()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：errQUEUE_FULL-&gt;信号量释放失败；pdPASS-&gt;信号量释放成功</span><br><span class="hljs-comment">// 参数：xSemaphore-&gt;要释放的信号量句柄</span><br><span class="hljs-comment">// 参数：pxHigherPriorityTaskWoken-&gt;标记退出此函数是否进行任务切换，用户要做的就是</span><br><span class="hljs-comment">// 提供一个变量来保存这个值，在退出中断函数前判断一下这个变量，当这个值为pdTRUE时</span><br><span class="hljs-comment">// 在退出中断函数之前一定要做一次任务切换taskYIELD()！</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreGiveISR</span><span class="hljs-params">( SemaphoreHandle_t xSemaphore, BaseType_t* pxHigherPriorityTaskWoken )</span> <br></code></pre></td></tr></table></figure><h4 id="5-2-3-二值信号量获取的API函数"><a href="#5-2-3-二值信号量获取的API函数" class="headerlink" title="5.2.3 二值信号量获取的API函数"></a>5.2.3 二值信号量获取的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreTake()</code></strong> ，任务级信号量释放函数<br>函数 <strong><code>xSemaphoreTakeISR()</code></strong> ，中断级信号量释放函数</p></blockquote><ul><li><code>xSemaphoreTake()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：pdFALSE-&gt;信号量获取失败；pdTRUE-&gt;信号量获取成功</span><br><span class="hljs-comment">// 参数： xSemaphore-&gt;要释放的信号量句柄</span><br><span class="hljs-comment">// 参数：xBlockTime-&gt;阻塞时间</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreTake</span><span class="hljs-params">( SemaphoreHandle_t xSemaphore, TickType_t xBlockTime )</span> <br></code></pre></td></tr></table></figure><ul><li><code>xSemaphoreTakeISR()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：pdFALSE-&gt;信号量获取失败；pdTRUE-&gt;信号量获取成功</span><br><span class="hljs-comment">// 参数：xSemaphore-&gt;要获取信号量句柄</span><br><span class="hljs-comment">// 参数：pxHigherPriorityTaskWoken-&gt;标记退出此函数是否进行任务切换，用户要做的就是</span><br><span class="hljs-comment">// 提供一个变量来保存这个值，在退出中断函数前判断一下这个变量，当这个值为pdTRUE时</span><br><span class="hljs-comment">// 在退出中断函数之前一定要做一次任务切换taskYIELD()！</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreTakeISR</span><span class="hljs-params">( SemaphoreHandle_t xSemaphore, BaseType_t* pxHigherPriorityTaskWoken )</span> <br></code></pre></td></tr></table></figure><h3 id="5-3-计数型信号量"><a href="#5-3-计数型信号量" class="headerlink" title="5.3 计数型信号量"></a>5.3 计数型信号量</h3><ul><li>计数型信号量就是读取这个队列项的数值，获取信号量的时候自减，释放信号量的时候自增，本质就是一个带值的二值信号量</li></ul><h4 id="5-3-1-计数型信号量创建的API函数"><a href="#5-3-1-计数型信号量创建的API函数" class="headerlink" title="5.3.1 计数型信号量创建的API函数"></a>5.3.1 计数型信号量创建的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreCreateCounting()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreCreateCounting()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：NULL-&gt;计数型信号量创建失败；其他-&gt;创建成功的计数型信号量的句柄</span><br><span class="hljs-comment">// 参数：uxMaxCount-&gt;计数信号量的最大值，当信号量值等于此值时，释放信号量会失败，因为已经满了</span><br><span class="hljs-comment">// 参数：uxInitialCount-&gt;计数信号量的初值</span><br>SemaphoreHandle_t <span class="hljs-title function_">xSemaphoreCreateCounting</span><span class="hljs-params">(UBaseType_t uxMaxCount, UBaseType_t uxInitialCount)</span> <br></code></pre></td></tr></table></figure><h4 id="5-3-2-计数型信号量释放与获取的API函数"><a href="#5-3-2-计数型信号量释放与获取的API函数" class="headerlink" title="5.3.2 计数型信号量释放与获取的API函数"></a>5.3.2 计数型信号量释放与获取的API函数</h4><p><strong>计数型信号量的释放和获取与二值信号量相同！请看5.2.2和5.2.3！</strong></p><h3 id="5-4-互斥信号量"><a href="#5-4-互斥信号量" class="headerlink" title="5.4 互斥信号量"></a>5.4 互斥信号量</h3><ul><li>但是呢，使用二值信号量可能会导致优先级反转的问题，这个时候我们可以使用！互斥信号量！</li><li>互斥信号量其实就是一个拥有优先级继承的二值信号量。</li><li>注意：创建互斥信号量时，会主动释放一次信号量！就是你可以直接获取到！而二值信号量和计数型信号量不行，它们需要手动释放第一次信号量。</li><li><strong>互斥信号量有优先级继承机制，所以只能用在任务中，不能用于中断服务函数中！</strong></li></ul><h4 id="5-4-1-互斥信号量创建的API函数"><a href="#5-4-1-互斥信号量创建的API函数" class="headerlink" title="5.4.1 互斥信号量创建的API函数"></a>5.4.1 互斥信号量创建的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreCreateMutex()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreCreateMutex()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：NULL-&gt;信号量创建失败；其他-&gt;创建成功的信号量的句柄</span><br>SemaphoreHandle_t <span class="hljs-title function_">xSemaphoreCreateMutex</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br></code></pre></td></tr></table></figure><h4 id="5-4-2-互斥信号量释放与获取的API函数"><a href="#5-4-2-互斥信号量释放与获取的API函数" class="headerlink" title="5.4.2 互斥信号量释放与获取的API函数"></a>5.4.2 互斥信号量释放与获取的API函数</h4><p><strong>互斥信号量的释放和获取与二值信号量相同！请看5.2.2和5.2.3！</strong></p><h3 id="5-5-递归互斥信号量"><a href="#5-5-递归互斥信号量" class="headerlink" title="5.5 递归互斥信号量"></a>5.5 递归互斥信号量</h3><ul><li>递归互斥信号量可以看作一个特殊的互斥信号量，已经获取了互斥信号量的任务就不能再次获取这个互斥信号量，但是递归互斥信号量不同，已经获取了递归互斥信号量的任务可以再次获取这个递归互斥任务而且次数不限！一个任务使用函数xSemaphoreTakeRecursive()成功的获取了多少次递归互斥信号量就得使用函数xSemaphoreGiveRecursive()释放多少次！</li><li>注意：要使用递归互斥信号量的话宏configUSE_RECURSIVE_MUTEXES必须为1！</li></ul><h4 id="5-5-1-递归互斥信号量创建的API函数"><a href="#5-5-1-递归互斥信号量创建的API函数" class="headerlink" title="5.5.1 递归互斥信号量创建的API函数"></a>5.5.1 递归互斥信号量创建的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreCreateRecursiveMutex()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreCreateRecursiveMutex()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：NULL-&gt;信号量创建失败；其他-&gt;创建成功的信号量的句柄</span><br>SemaphoreHandle_t <span class="hljs-title function_">xSemaphoreCreateRecursiveMutex</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br></code></pre></td></tr></table></figure><h4 id="5-5-2-递归互斥信号量释放的API函数"><a href="#5-5-2-递归互斥信号量释放的API函数" class="headerlink" title="5.5.2 递归互斥信号量释放的API函数"></a>5.5.2 递归互斥信号量释放的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreGiveRecursive()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreGiveRecursive()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：pdFAIL-&gt;信号量释放失败；pdPASS-&gt;信号量释放成功</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreGiveRecursive</span><span class="hljs-params">( QueueHandle_t xMutex )</span> <br></code></pre></td></tr></table></figure><h4 id="5-5-3-递归互斥信号量获取的API函数"><a href="#5-5-3-递归互斥信号量获取的API函数" class="headerlink" title="5.5.3 递归互斥信号量获取的API函数"></a>5.5.3 递归互斥信号量获取的API函数</h4><blockquote><p>函数 <strong><code>xSemaphoreTakeRecursive()</code></strong> ，在主程序中调用</p></blockquote><ul><li><code>xSemaphoreTakeRecursive()</code>一览：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 返回值：pdFAIL-&gt;信号量获取失败；pdPASS-&gt;信号量获取成功</span><br>BaseType_t <span class="hljs-title function_">xSemaphoreTakeRecursive</span><span class="hljs-params">( QueueHandle_t xMutex, TickType_t xTicksTowait )</span> <br></code></pre></td></tr></table></figure><hr><h3 id="6-1-任务通知"><a href="#6-1-任务通知" class="headerlink" title="6.1 任务通知"></a>6.1 任务通知</h3><blockquote><p>任务通知的优势</p></blockquote><ul><li><strong>效率更高</strong>！如果使用任务通知来模拟二值信号量，速度快45%（官方测试）！</li><li><strong>使用内存更小</strong>，使用其他方法时都要先创建对应的结构体，使用任务通知时无需额外创建结构体</li></ul><blockquote><p>任务通知的劣势</p></blockquote><ul><li><strong>无法在中断服务函数中获得任务通知</strong>，你只能在中断服务函数中发送任务通知</li><li><strong>无法广播给多个任务（只能一个）</strong>，任务通知只能是被指定的一个任务接收并处理</li><li><strong>无法缓存多个数据（只能一个）</strong>，任务通知是通过更新任务通知值来发送数据的，任务结构体中只有一个任务通知值，只能保持一个数据</li></ul><h4 id="6-1-1-任务通知模拟二值信号量"><a href="#6-1-1-任务通知模拟二值信号量" class="headerlink" title="6.1.1 任务通知模拟二值信号量"></a>6.1.1 任务通知模拟二值信号量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 任务发起通知 */</span><br>xTaskNotifyGive(yourTaskHandler);<br><br><span class="hljs-comment">/* 任务接收通知 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">yourTask</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvPaeameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 接收任务成功后pdTRUE-&gt;任务通知值清零，portMAX_DELAY-&gt;死等，没任务通知就阻塞</span><br>        <span class="hljs-keyword">if</span>(ulTaskNotifyTake(pdTRUE, portMAX_DELAY))<br>        &#123;<br>            <span class="hljs-comment">// do your task</span><br>        &#125;<br>    &#125;<br>    xTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-2-任务通知模拟计数型信号量"><a href="#6-1-2-任务通知模拟计数型信号量" class="headerlink" title="6.1.2 任务通知模拟计数型信号量"></a>6.1.2 任务通知模拟计数型信号量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 任务发起通知 */</span><br>xTaskNotifyGive(yourTaskHandler);<br><br><span class="hljs-comment">/* 任务接收通知 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">yourTask</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvPaeameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> rev = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 接收任务成功后pdFALSE-&gt;任务通知值自减，portMAX_DELAY-&gt;死等，没任务通知就阻塞</span><br>        rev = ulTaskNotifyTake(pdFALSE, portMAX_DELAY);<br>        <span class="hljs-keyword">if</span>(rev)<br>        &#123;<br>            <span class="hljs-comment">// do your task</span><br>        &#125;<br>    &#125;<br>    xTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-3-任务通知模拟消息邮箱（传值）"><a href="#6-1-3-任务通知模拟消息邮箱（传值）" class="headerlink" title="6.1.3 任务通知模拟消息邮箱（传值）"></a>6.1.3 任务通知模拟消息邮箱（传值）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 任务发起通知 */</span><br><span class="hljs-comment">// valForTransfer-&gt;你想要传送的变量值，eSetValueWithOverwrite-&gt;设置成可覆写模式</span><br>xTaskNotify(yourTaskHandler, valForTransfer, eSetValueWithOverwrite);<br><br><span class="hljs-comment">/* 任务接收通知 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">yourTask</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvPaeameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> notifyVal = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 接收任务成功后，portMAX_DELAY-&gt;死等，没任务通知就阻塞</span><br>        xTaskNotifyWait(<span class="hljs-number">0</span><span class="hljs-comment">/*传入值不改变*/</span>, <span class="hljs-number">0xFFFFFFFF</span><span class="hljs-comment">/*退出函数后传入值清零*/</span>, &amp;notifyVal, portMAX_DELAY);<br>        <span class="hljs-keyword">switch</span>(notifyVal)<br>        &#123;<br>            <span class="hljs-comment">// do your task</span><br>        &#125;<br>    &#125;<br>    xTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-4-任务通知模拟事件标志组"><a href="#6-1-4-任务通知模拟事件标志组" class="headerlink" title="6.1.4 任务通知模拟事件标志组"></a>6.1.4 任务通知模拟事件标志组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 任务发起通知 */</span><br><span class="hljs-comment">// EVENTBIT_X-&gt;你想要通知的第几个bit，eSetBits-&gt;设置成事件标志组模式</span><br>xTaskNotify(yourTaskHandler, EVENTBIT_0<span class="hljs-comment">/* 通知bit0 */</span>, eSetBits);<br><br>xTaskNotify(yourTaskHandler, EVENTBIT_1<span class="hljs-comment">/* 通知bit1 */</span>, eSetBits);<br><br><span class="hljs-comment">/* 任务接收通知 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">yourTask</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvPaeameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> notifyVal = <span class="hljs-number">0</span>, eventBit = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 接收任务成功后，portMAX_DELAY-&gt;死等，没任务通知就阻塞</span><br>        xTaskNotifyWait(<span class="hljs-number">0</span><span class="hljs-comment">/*传入值不改变*/</span>, <span class="hljs-number">0xFFFFFFFF</span><span class="hljs-comment">/*退出函数后传入值清零*/</span>, &amp;notifyVal, portMAX_DELAY);<br>        <span class="hljs-keyword">if</span>(notifyVal &amp; EVENTBIT_0)<br>        &#123;<br>            eventBit |= EVENTBIT_0;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(notifyVal &amp; EVENTBIT_1)<br>        &#123;<br>            eventBit |= EVENTBIT_1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(eventBit == (EVENTBIT_0 | EVENTBIT_1))<br>        &#123;<br>            <span class="hljs-comment">// do your task</span><br>        &#125;<br>    &#125;<br>    xTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内核控制函数"><a href="#内核控制函数" class="headerlink" title="内核控制函数"></a>内核控制函数</h3><h4 id="任务切换的API函数"><a href="#任务切换的API函数" class="headerlink" title="任务切换的API函数"></a>任务切换的API函数</h4><blockquote><p>函数 <strong><code>taskYIELD()</code></strong> ，此函数用于进行任务切换，用的最多的就是出中断的优先级切换时</p></blockquote><h4 id="进入、退出临界区的API函数"><a href="#进入、退出临界区的API函数" class="headerlink" title="进入、退出临界区的API函数"></a>进入、退出临界区的API函数</h4><blockquote><p>函数 <strong><code>taskENTER_CRITICAL()</code></strong> ，进入临界区，用于任务级</p></blockquote><blockquote><p>函数 <strong><code>taskENTER_CRITICAL_FROM_ISR()</code></strong> ，进入临界区，用于中断级</p></blockquote><blockquote><p>函数 <strong><code>taskEXIT_CRITICAL()</code></strong> ，退出临界区，用于任务级</p></blockquote><blockquote><p>函数 <strong><code>taskEXIT_CRITICAL_FROM_ISR()</code></strong> ，退出临界区，用于中断级</p></blockquote><h4 id="中断打开、关闭的API函数"><a href="#中断打开、关闭的API函数" class="headerlink" title="中断打开、关闭的API函数"></a>中断打开、关闭的API函数</h4><blockquote><p>函数 <strong><code>taskENABLE_INTERRUPTS()</code></strong> ，打开中断</p></blockquote><blockquote><p>函数 <strong><code>taskDISABLE_INTERRUPTS()</code></strong> ，关闭中断</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FreeRTOS</tag>
      
      <tag>MCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git与VScode联合使用的源代码管理指南</title>
    <link href="/2023/12/09/GitxVScode-CodeManageGuide/GitxVScode-CodeManageGuide/"/>
    <url>/2023/12/09/GitxVScode-CodeManageGuide/GitxVScode-CodeManageGuide/</url>
    
    <content type="html"><![CDATA[<h2 id="GitxVScode-CodeManageGuide"><a href="#GitxVScode-CodeManageGuide" class="headerlink" title="GitxVScode-CodeManageGuide"></a>GitxVScode-CodeManageGuide</h2><h3 id="Git与VScode联合使用的源代码管理指南"><a href="#Git与VScode联合使用的源代码管理指南" class="headerlink" title="Git与VScode联合使用的源代码管理指南"></a>Git与VScode联合使用的源代码管理指南</h3><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><del>建议有一点Git管理基础的人使用！至少你得Github有号吧，是吧（玩笑！</del></li><li>这些指令其实并不常用，我们只是稍作理解，剩下的交给Vscode点点点吧！</li></ul><hr><h2 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h2><ol><li>Git Graph</li></ol><p>可以清晰地看到存储仓库的每一次提交(Commit)，每一个分支(Branch)，和每一次合并的记录，非常nice！<br>同时可以很方便的查询每一次的记录，进行文件代码比对。</p><ol start="2"><li>GitLens</li></ol><p>可以直接在源代码里看到每一行代码的更改时间！</p><ol start="3"><li>GitHistory</li></ol><p>和Git Graph功能类似，细节注重点不太一样。</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="提交-Commit"><a href="#提交-Commit" class="headerlink" title="提交(Commit)"></a>提交(Commit)</h3><p>这个操作我们使用VScode自带的源代码管理来完成。<br>暂存我们所需的修改之后点击提交，接着会跳转到<code>COMMIT_EDITMSG</code>文件页面，顾名思义就是提交编辑信息。<br>你可以在这个文件最顶部写一些你这次提交的一些消息备注。写完保存，关掉这个文件页面，即可完成一次提交！</p><blockquote><p> <code>git add .</code>添加所有被修改文件到暂存更改区<br><code>git commit -m &quot;massage&quot;</code> 提交暂存更改区的内容作为一个新版本，<code>massage</code>为该版本的关键字<br><code>-m</code>的作用就是可以不弹窗直接写关键字，如果你只输入<code>git commit</code>就会弹出一个窗口让你填写该版本的关键字。</p></blockquote><h3 id="推送-Push"><a href="#推送-Push" class="headerlink" title="推送(Push)"></a>推送(Push)</h3><blockquote><p>这个操作需要我们的VScode关联自己的Github仓库后才可以使用。</p></blockquote><p>提交之后，提交记录会暂存在我们本地的仓库内，如果想要把提交记录推送至Github，我们只需要在VScode的源代码管理里选择推送即可。</p><p>如果你Github没有创建相关的仓库，VScode也会弹窗让你创建的！</p><h3 id="签出到-Checkout"><a href="#签出到-Checkout" class="headerlink" title="签出到(Checkout)"></a>签出到(Checkout)</h3><blockquote><p><code>git checkout branch_name</code>切换分支。<br>切换分支的时候要保证当前暂存区没有需要修改的文件哦！可以用<code>git status</code>确保现在的状态是<code>clean</code>，否则就会切换分支失败了。</p></blockquote><h3 id="版本回退-Reset"><a href="#版本回退-Reset" class="headerlink" title="版本回退(Reset)"></a>版本回退(Reset)</h3><p>有3种常用的回退方式，分别是<code>soft</code>, <code>mixed</code>, <code>hard</code></p><p>第一种：</p><p><code>soft</code>回退方式只会把Head指针往回指到你回退的版本，然后你仓库里的文件不会发生任何的增删，状态大概就是你已经commit了，但是没有push的状态。（？不知道理解的对不对</p><blockquote><p><code>git reset --soft &lt;Hash&gt;</code>（这里<code>&lt;Hash&gt;</code>是你的版本号哈！</p></blockquote><p>第二种：</p><p><code>mixed</code>回退方式，会把Head指针往回指到我们希望回退到的版本，然后仓库里的文件也不会发生任何的增删（暂时），为什么说是暂时呢？因为它把你这个回退版本之后所有的commit都放回了暂存更改区，你就可以在暂存更改区里决定要恢复什么文件，恢复什么代码啦！</p><blockquote><p><code>git reset --mixed &lt;Hash&gt;</code></p></blockquote><p>第三种：</p><p><code>hard</code>回退方式，会把Head指针往回指到我们希望回退到的版本，然后该版本号以后的版本统统都会不见使用<code>git log</code>时就看不见当前回退版本以后的版本号了（所以要谨慎！</p><blockquote><p><code>git reset --hard &lt;Hash&gt;</code></p></blockquote><p>这种回退方式会简单粗暴的把你本地仓库回退版本的什么文件啊什么代码原封不动地一字不拉地归还它的原样！<br>当然，你仍然可以通过<code>git reflog</code>找回从前的版本号，然后使用<code>git reset --hard &lt;Hash&gt;</code>跳回去，<strong>理论上，你的代码不会丢，</strong> nice！</p><blockquote><p><code>git reset --hard HEAD^</code>表示硬回退到<strong>上一个</strong>版本<br>同理<code>HEAD^^</code>表示<strong>上上个</strong>版本，<code>HEAD^^^</code>表示<strong>上上上个</strong>版本，而且你也可以用<code>HEAD~3</code>表示<strong>上上上个</strong>版本噢！</p></blockquote><h2 id="辅助操作"><a href="#辅助操作" class="headerlink" title="辅助操作"></a>辅助操作</h2><h3 id="记录查看"><a href="#记录查看" class="headerlink" title="记录查看"></a>记录查看</h3><ul><li><code>git log</code></li></ul><blockquote><p><code>git log</code>用来查看commit提交历史记录。<br><code>git log --graph</code>这条命令使用了就会有优雅的树状图可以看啦（也不算是树状图，反正就是图形化显示<br>在终端按<code>Q</code>键退出日志哦！</p></blockquote><ul><li><code>git reflog</code></li></ul><blockquote><p>用来查看Git仓库的所有git命令操作的历史记录，比如你用过的<code>reset</code>, <code>checkout</code>, <code>commit</code>, <code>push</code> 的记录都能在这里看到。</p></blockquote><ul><li><code>git status</code></li></ul><blockquote><p>用来查看本地仓库状态。</p></blockquote><h3 id="清除已经被跟踪的文件"><a href="#清除已经被跟踪的文件" class="headerlink" title="清除已经被跟踪的文件"></a>清除已经被跟踪的文件</h3><p>如果文件已经被 Git 跟踪（即已经提交到仓库），那么修改<code>.gitignore</code>文件将不会对这些文件产生任何效果。你需要先从 Git 的跟踪列表中移除这些文件。你可以使用：</p><blockquote><p><code>git rm --cached &lt;file&gt;</code>，清除单个文件.<br><code>git rm -r --cached &lt;file&gt;</code>，清除文件夹以及文件夹内的所有内容.</p></blockquote><h3 id="分支查找"><a href="#分支查找" class="headerlink" title="分支查找"></a>分支查找</h3><ul><li><code>git branch</code></li></ul><blockquote><p><code>git branch</code>用来查看当前所在的分支。<br><code>git branch -v</code>用来查看当前所在分支最后一次提交的版本号和版本关键字。<br><code>git branch branch_name</code>用来创建名字为<code>branch_name</code>的新分支。</p></blockquote><h3 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h3><ul><li><code>git clone</code></li></ul><blockquote><p><code>git clone &lt;address&gt;</code>老熟人了，打开一个文件夹，打开它的命令行窗口，你就敲上面的命令，<code>&lt;address&gt;</code>是被克隆的远程仓库的地址。就这个命令可以完成目前所有开源项目90%的克隆。<br><code>git clone --recursive &lt;address&gt;</code>剩下的10%就比较专业一点，可能人家远程代码库里运用了别人的子项目，你直接克隆下来就是个空文件夹，所以你就需要用这个命令来<strong>递归</strong>克隆！把别人子项目的内容也可以克隆下来！</p></blockquote><h3 id="本地仓库初始化"><a href="#本地仓库初始化" class="headerlink" title="本地仓库初始化"></a>本地仓库初始化</h3><ul><li><code>git init</code></li></ul><blockquote><p>在该文件夹下初始化git仓库.</p></blockquote><h3 id="本地仓库全局配置"><a href="#本地仓库全局配置" class="headerlink" title="本地仓库全局配置"></a>本地仓库全局配置</h3><ul><li><code>git config</code></li></ul><p>在初始化完成Git本地仓库后，开始正式使用前，是需要有一些全局设置的，如用户名、邮箱等：</p><blockquote><p><code>git config --global user.name &quot;your name&quot;</code>用于设置全局用户名<br><code>git config --global uer.email &quot;your email&quot;</code>用于设置全局邮箱<br>其中，<code>--global</code>指定全局配置，不使用该参数，则为当前所在仓库配置。</p></blockquote><p>于是可以如下配置：</p><blockquote><p><code>git config --global user.name &quot;xxx&quot;</code><br><code>git config --global uer.email &quot;xxx.example.com&quot;</code></p></blockquote><p>可以输入以下两条指令，检查用户名和邮箱是否输入正确。</p><blockquote><p><code>git config user.name</code><br><code>git config user.email</code></p></blockquote><!-- > 我的Github用户名和邮箱： --><script >function checkPassword() {  var password = document.getElementById("password").value;  if (password === "0000") {  document.getElementById("user").style.display = "block";  } else {  alert("不准偷看！！！");  document.getElementById("user").style.display = "none";  }}</script><body title="哒咩">  口令是什么？  <input type="password" id="password">  <button onclick="checkPassword()" style="border-radius: 5px;">确认</button>  <div id="user" style="display: none;">    <p>俺滴Github用户名：ZhangKeLiang0627</p>    <p>俺滴Github邮箱：111654293+ZhangKeLiang0627@users.noreply.github.com</p>  </div></body><style>  input[type="password"] {    padding: 3px;    margin: 5px;    border: 1px solid #ccc;    border-radius: 5px;  }  #user {    display: none;    background-color: #f4f4f4;    padding: 5px;    margin-top: 10px;    border-radius: 5px;    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);  }</style>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为STM32添加Lua脚本</title>
    <link href="/2023/11/14/%E4%B8%BASTM32%E6%B7%BB%E5%8A%A0Lua%E8%84%9A%E6%9C%AC/README/"/>
    <url>/2023/11/14/%E4%B8%BASTM32%E6%B7%BB%E5%8A%A0Lua%E8%84%9A%E6%9C%AC/README/</url>
    
    <content type="html"><![CDATA[<h2 id="为STM32添加Lua脚本🤗"><a href="#为STM32添加Lua脚本🤗" class="headerlink" title="为STM32添加Lua脚本🤗"></a>为STM32添加Lua脚本🤗</h2><h2 id="软件：keil"><a href="#软件：keil" class="headerlink" title="软件：keil"></a>软件：keil</h2><h2 id="所需库环境：Malloc-Fatfs"><a href="#所需库环境：Malloc-Fatfs" class="headerlink" title="所需库环境：Malloc, Fatfs"></a>所需库环境：Malloc, Fatfs</h2><ul><li>声明，这里使用的是正点原子家的源码，感谢开源！</li><li>上述库环境是为了实现Lua能够从外置存储介质读取文件所准备的，如果没有需求可以不用。</li></ul><h2 id="主控：STM32F401RET6"><a href="#主控：STM32F401RET6" class="headerlink" title="主控：STM32F401RET6"></a>主控：STM32F401RET6</h2><ul><li>运行频率：84MHz</li><li>ROM:512KB</li><li>RAM:96KB</li></ul><h2 id="移植版本：Lua-v5-3"><a href="#移植版本：Lua-v5-3" class="headerlink" title="移植版本：Lua-v5.3"></a>移植版本：<a href="https://github.com/lua/lua/tree/v5.3">Lua-v5.3</a></h2><ul><li>具体版本是Lua-v5.3.5</li></ul><h2 id="关于Lua"><a href="#关于Lua" class="headerlink" title="关于Lua"></a>关于Lua</h2><p>Lua 语言是由巴西里约热内卢天主教大学 ([Pontifical Catholic University of Rio de janeiro ) 里的一个研究小组与 1993年开发的一种<strong>轻量小巧</strong>的<strong>脚本（弱语言）语言</strong>，用标准 C 语言编写，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>作为一种扩展语言，Lua 没有“主”程序的概念：它嵌入在宿主客户端中运行，称为嵌入程序或简称为宿主。（通常这个宿主是单机lua程序） <strong>宿主程序可以调用函数执行一段Lua代码，可以读写Lua变量，可以注册Lua代码调用的C函数</strong>。通过使用 C 函数，可以增强 Lua 以应对广泛的不同领域，从而创建共享语法框架的定制编程语言。</p><ul><li>简单来说，Lua是一种轻量级的基于C编写的运行高效的脚本语言（解释性语言like：Python、shell、Matlab等。</li><li>在单片机环境下移植Lua，因为Lua和C的超级无敌兼容性，相当于你同时拥有了两种语言加持（C和Lua），你可以直接用Lua内部提供的几个简单的API，使得C内运行Lua脚本，特别方便，避免了重复烧录的麻烦。</li><li><strong>Lua解释器的移植，最小占用ROM: 70KB，占用RAM: 7.5KB(很小很小)</strong></li><li>简单的lua程序跟C程序效率比是1：100。而lua运算量越大。与C程序效率差距就越小。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>在github上拉取Lua-v5.3的版本库: <a href="https://github.com/lua/lua/tree/v5.3">lua&#x2F;lua at v5.3</a></li><li>建立一个基于主控STM32F401RET6的Keil文件(已经有的话就不需要，直接哐哐移植)</li></ol><h2 id="开始移植"><a href="#开始移植" class="headerlink" title="开始移植"></a>开始移植</h2><h4 id="移植Lua库文件"><a href="#移植Lua库文件" class="headerlink" title="移植Lua库文件"></a>移植Lua库文件</h4><ol><li>将github上拉取的 lua-5.3 文件夹移入工程文件夹。</li><li>打开Keil，点击魔术棒，将..\lua-5.3 相对路径添加到环境变量。</li><li>点击三个盒子，创建一个文件夹命名为Lua，将..\lua-5.3 相对路径下的所有.c文件（除了Lua.c和Luac.c以外，如果有的话，没有就不管）添加到其中。</li><li>更改 loslib.c 文件下部分内容：</li></ol><blockquote><ol><li>将 <strong>os_exit(lua_State * L)</strong> 函数中 <strong>if(L) exit(status)</strong> 注释，并添加 <strong>status&#x3D;status</strong> 语句。</li><li>添加 <strong>time(time_t *time)</strong> 和 <strong>system(const char * string)</strong> 。</li><li>将魔术棒里的 <strong>Use MicroLIB</strong> 模式关闭（不打勾！）。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">os_exit</span> <span class="hljs-params">(lua_State *L)</span> &#123;<br>  <span class="hljs-type">int</span> status;<br>  <span class="hljs-keyword">if</span> (lua_isboolean(L, <span class="hljs-number">1</span>))<br>    status = (lua_toboolean(L, <span class="hljs-number">1</span>) ? EXIT_SUCCESS : EXIT_FAILURE);<br>  <span class="hljs-keyword">else</span><br>    status = (<span class="hljs-type">int</span>)luaL_optinteger(L, <span class="hljs-number">1</span>, EXIT_SUCCESS);<br>  <span class="hljs-keyword">if</span> (lua_toboolean(L, <span class="hljs-number">2</span>))<br>    lua_close(L);<br><span class="hljs-comment">/* &#x27;if&#x27; to avoid warnings for unreachable &#x27;return&#x27; */</span><br>  <span class="hljs-comment">//if (L) exit(status);  </span><br><br>  status=status;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">time_t</span> <span class="hljs-title function_">time</span><span class="hljs-params">(<span class="hljs-type">time_t</span> *time)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-built_in">string</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li>最后可以去<strong>linit.c</strong>注释一些用不到的Lua库，当然，不注释也不会影响太大。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">** these libs are loaded by lua.c and are readily available to any Lua</span><br><span class="hljs-comment">** program</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> luaL_Reg loadedlibs[] = &#123;<br>  &#123;<span class="hljs-string">&quot;_G&quot;</span>, luaopen_base&#125;,<br>  &#123;LUA_LOADLIBNAME, luaopen_package&#125;,<br>  &#123;LUA_COLIBNAME, luaopen_coroutine&#125;,<br>  &#123;LUA_TABLIBNAME, luaopen_table&#125;,<br><span class="hljs-comment">//  &#123;LUA_IOLIBNAME, luaopen_io&#125;,</span><br><span class="hljs-comment">//  &#123;LUA_OSLIBNAME, luaopen_os&#125;,</span><br>  &#123;LUA_STRLIBNAME, luaopen_string&#125;,<br>  &#123;LUA_MATHLIBNAME, luaopen_math&#125;,<br>  &#123;LUA_UTF8LIBNAME, luaopen_utf8&#125;,<br><span class="hljs-comment">//  &#123;LUA_DBLIBNAME, luaopen_debug&#125;,</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(LUA_COMPAT_BITLIB)</span><br>  &#123;LUA_BITLIBNAME, luaopen_bit32&#125;,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#123;<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="添加retarget-c"><a href="#添加retarget-c" class="headerlink" title="添加retarget.c"></a>添加retarget.c</h4><blockquote><ul><li>放哪随意，我基于正点原子的工程放在了system的文件夹中</li><li>引进这个库的目的是为了实现Lua从外置的存储介质中获取文件内容，我们需要用Fatfs的API去实现Lua所需的fopen、fclose、fread等函数（如果没有这个需求，可以跳过此步骤）</li><li>声明本次移植使用的Fatfs，来自正点原子的Fatfs实验源码，好用爱用，给个好评。</li></ul></blockquote>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-e064c6af" role="button" aria-expanded="false" aria-controls="collapse-e064c6af">        <div class="fold-arrow">▶</div>retarget.c 源码内容      </div>      <div class="fold-collapse collapse" id="collapse-e064c6af">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;rt_sys.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;usart.h&quot;</span></span><br><br><span class="hljs-comment">// 是否将fopen与FatFS关联起来</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FATFS_EN 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ff.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// #pragma import(__use_no_semihosting) // 禁用半主机模式 //已经在usart.c中定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> import(__use_no_semihosting_swi) <span class="hljs-comment">// 即不使用半主机模式，防止程序进入软件中断</span></span><br><span class="hljs-comment">// #pragma import(_main_redirection)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDIN 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDOUT 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDERR 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IS_STD(fh) ((fh) &gt;= 0 &amp;&amp; (fh) &lt;= 2)</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * These names are used during library initialization as the</span><br><span class="hljs-comment"> * file names opened for stdin, stdout, and stderr.</span><br><span class="hljs-comment"> * As we define _sys_open() to always return the same file handle,</span><br><span class="hljs-comment"> * these can be left as their default values.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> __stdin_name[] = <span class="hljs-string">&quot;:kkl&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> __stdout_name[] = <span class="hljs-string">&quot;kkl&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> __stderr_name[] = <span class="hljs-string">&quot;kkl&quot;</span>;<br><br>FILEHANDLE _sys_open(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> openmode)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    BYTE mode;<br>    FIL *fp;<br>    FRESULT fr;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> (name == __stdin_name)<br>        <span class="hljs-keyword">return</span> STDIN;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name == __stdout_name)<br>    &#123;<br>        uart_init(<span class="hljs-number">115200</span>); <span class="hljs-comment">// 初始化串口 (在main函数执行前执行)</span><br>        <span class="hljs-keyword">return</span> STDOUT;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name == __stderr_name)<br>        <span class="hljs-keyword">return</span> STDERR;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">sizeof</span>(FILEHANDLE) &lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span> *))<br>    &#123;<br>        USART1_SendBuf(<span class="hljs-string">&quot;sizeof(FILEHANDLE) should be no less than sizeof(void *)!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    fp = ff_memalloc(<span class="hljs-keyword">sizeof</span>(FIL)); <span class="hljs-comment">// 使用自己的malloc函数替换</span><br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">/* http://elm-chan.org/fsw/ff/doc/open.html */</span><br>    <span class="hljs-keyword">if</span> (openmode &amp; OPEN_W)<br>    &#123;<br>        mode = FA_CREATE_ALWAYS | FA_WRITE;<br>        <span class="hljs-keyword">if</span> (openmode &amp; OPEN_PLUS)<br>            mode |= FA_READ;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (openmode &amp; OPEN_A)<br>    &#123;<br>        mode = FA_OPEN_APPEND | FA_WRITE;<br>        <span class="hljs-keyword">if</span> (openmode &amp; OPEN_PLUS)<br>            mode |= FA_READ;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        mode = FA_READ;<br>        <span class="hljs-keyword">if</span> (openmode &amp; OPEN_PLUS)<br>            mode |= FA_WRITE;<br>    &#125;<br><br>    fr = f_open(fp, name, mode);<br>    <span class="hljs-keyword">if</span> (fr == FR_OK)<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">uintptr_t</span>)fp;<br><br>    ff_memfree(fp); <span class="hljs-comment">// 使用自己的free函数替换</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> _sys_close(FILEHANDLE fh)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    FRESULT fr;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">if</span> (IS_STD(fh))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fh == STDOUT)<br>            <span class="hljs-comment">// usart_deinit();</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    fr = f_close((FIL *)fh);<br>    <span class="hljs-keyword">if</span> (fr == FR_OK)<br>    &#123;<br>        ff_memfree((<span class="hljs-type">void</span> *)fh);<span class="hljs-comment">// 使用自己的free函数替换</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> _sys_write(FILEHANDLE fh, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">unsigned</span> len, <span class="hljs-type">int</span> mode)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    FRESULT fr;<br>    UINT bw;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">if</span> (fh == STDIN)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (fh == STDOUT || fh == STDERR)<br>    &#123;<br>        USART1_SendBuf((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)buf);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    fr = f_write((FIL *)fh, buf, len, &amp;bw);<br>    <span class="hljs-keyword">if</span> (fr == FR_OK)<br>        <span class="hljs-keyword">return</span> len - bw;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> _sys_read(FILEHANDLE fh, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">unsigned</span> len, <span class="hljs-type">int</span> mode)<br>&#123;<br>    <span class="hljs-comment">// char ch;</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    FRESULT fr;<br>    UINT br;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">if</span> (fh == STDIN)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; len)<br>        &#123;<br>            <span class="hljs-comment">//     ch = usart_receive(); // 这里需要实现串口收到字符串传入buf的功能</span><br>            <span class="hljs-comment">//     if (isprint(ch))</span><br>            <span class="hljs-comment">//     &#123;</span><br>            <span class="hljs-comment">//         buf[i++] = ch;</span><br>            <span class="hljs-comment">//         usart_send(ch);</span><br>            <span class="hljs-comment">//     &#125;</span><br>            <span class="hljs-comment">//     else if (ch == &#x27;\r&#x27;)</span><br>            <span class="hljs-comment">//     &#123;</span><br>            <span class="hljs-comment">//         buf[i++] = &#x27;\n&#x27;;</span><br>            <span class="hljs-comment">//         usart_send(&#x27;\n&#x27;);</span><br>            <span class="hljs-comment">//         break;</span><br>            <span class="hljs-comment">//     &#125;</span><br>            <span class="hljs-comment">//     else if (i &gt; 0 &amp;&amp; ch == &#x27;\b&#x27;)</span><br>            <span class="hljs-comment">//     &#123;</span><br>            <span class="hljs-comment">//         i--;</span><br>            <span class="hljs-comment">//         usart_send_string(&quot;\b \b&quot;, 3);</span><br>            <span class="hljs-comment">//     &#125;</span><br>            i--;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> len - i;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fh == STDOUT || fh == STDERR)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    fr = f_read((FIL *)fh, buf, len, &amp;br);<br>    <span class="hljs-keyword">if</span> (fr == FR_OK)<br>        <span class="hljs-keyword">return</span> len - br;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 检查句柄是否为终端</span><br><span class="hljs-type">int</span> _sys_istty(FILEHANDLE fh)<br>&#123;<br>    <span class="hljs-keyword">return</span> IS_STD(fh);<br>&#125;<br><br><span class="hljs-type">int</span> _sys_seek(FILEHANDLE fh, <span class="hljs-type">long</span> pos)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    FRESULT fr;<br><br>    <span class="hljs-keyword">if</span> (!IS_STD(fh))<br>    &#123;<br>        fr = f_lseek((FIL *)fh, pos);<br>        <span class="hljs-keyword">if</span> (fr == FR_OK)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 刷星句柄关联的缓冲区</span><br><span class="hljs-type">int</span> _sys_ensure(FILEHANDLE fh)<br>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 返回文件当前长度</span><br><span class="hljs-type">long</span> _sys_flen(FILEHANDLE fh)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> FATFS_EN</span><br>    <span class="hljs-keyword">if</span> (!IS_STD(fh))<br>        <span class="hljs-keyword">return</span> f_size((FIL *)fh);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 在usart.c中定义了，注释防止重复定义</span><br><span class="hljs-comment">// void _sys_exit(int status)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">////while(1);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-type">int</span> _sys_tmpnam(<span class="hljs-type">char</span> *name, <span class="hljs-type">int</span> fileno, <span class="hljs-type">unsigned</span> maxlength)<br>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 将一个字符写入控制台</span><br><span class="hljs-type">void</span> _ttywrch(<span class="hljs-type">int</span> ch)<br>&#123;<br>    USART1_SendChar(ch);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span><br>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldname, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newname)</span><br>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义main函数argv的内容</span><br><span class="hljs-type">char</span> *_sys_command_string(<span class="hljs-type">char</span> *cmd, <span class="hljs-type">int</span> len)<br>&#123;<br>    <span class="hljs-comment">// 可以把命令行内容放入大小为len的cmd缓存区然后返回</span><br>    <span class="hljs-comment">// 也可以直接返回一个字符串</span><br>    <span class="hljs-comment">// return &quot;./foo -f bar&quot;;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 在loslib.c中已有定义，防止重复定义，这里注释掉</span><br><span class="hljs-comment">// time_t time(time_t * time)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//return 0;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">clock_t</span> <span class="hljs-title function_">clock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="排查错误"><a href="#排查错误" class="headerlink" title="排查错误"></a>排查错误</h2><p>因为我用的是正点原子的USART的代码，它们家是没有勾<strong>Use MicroLIB</strong> 模式的，一些配置会重复，所以我们要自己改一些东西，不然编译没法通过。</p><ul><li>打开usart.c，更改以下部分内容：</li></ul><blockquote><ol><li>注释<strong>FILE __stdout;</strong></li></ol></blockquote><p>因为移植了Lua解释器，所以我们的<strong>堆栈分配</strong>应该相应的分配更大一些。</p><ul><li>打开启动文件（<strong>startup_stm32f40_41xxx.s</strong>），更改以下部分内容：</li></ul><blockquote><ol><li>修改栈：<strong>Stack_Size      EQU     0x00001000 &#x2F;&#x2F;4k &#x2F;&#x2F;不行就改成0x00004000</strong></li><li>修改堆：<strong>Heap_Size       EQU     0x00002c00 &#x2F;&#x2F;11k &#x2F;&#x2F;不行就改成0x00004000</strong></li></ol></blockquote><ul><li>打开<strong>luaconf.h</strong></li></ul><blockquote><ol><li>添加 <strong>#define LUA_32BITS</strong></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@@ LUA_32BITS enables Lua with 32-bit integers and 32-bit floats. You</span><br><span class="hljs-comment">** can also define LUA_32BITS in the make file, but changing here you</span><br><span class="hljs-comment">** ensure that all software connected to Lua will be compiled with the</span><br><span class="hljs-comment">** same configuration.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* #define LUA_32BITS */</span><br> <span class="hljs-meta">#<span class="hljs-keyword">define</span> LUA_32BITS</span><br></code></pre></td></tr></table></figure><p>OK！这时候再编译应该不会有报错，是可以通过的！</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 将C函数注册成Lua可调用的函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lua_led_on</span><span class="hljs-params">(lua_State * L)</span><br>&#123;<br>LED0 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 将C函数注册成Lua可调用的函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lua_print_hello</span><span class="hljs-params">(lua_State * L)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello this is lua!\r\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 将C函数注册成Lua可调用的函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">luaL_Reg</span> <span class="hljs-title">mylib</span>[] =</span><br>&#123;<br>&#123;<span class="hljs-string">&quot;led_on&quot;</span>,lua_led_on&#125;,<br>&#123;<span class="hljs-string">&quot;print_hello&quot;</span>,lua_print_hello&#125;,<br>&#123;<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">/* 编写Lua脚本 */</span><br><span class="hljs-comment">/* 这个程序中，我们点亮了led，同时打印了Hello this is lua!\r\n */</span><br><span class="hljs-comment">/* 接着，程序的主导权就会归还给c继续执行c程序 */</span><br><span class="hljs-comment">/* 当然你也可以直接在这里写个 while 循环，这样后面的c程序都不再执行，直至退出循环 */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> LUA_SCRIPT_GLOBAL_ON[]=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">led_on()\</span><br><span class="hljs-string">print_hello()\</span><br><span class="hljs-string">&quot;</span>;<br><br><span class="hljs-comment">/* 运行Lua脚本 */</span><br><span class="hljs-comment">/* 将这个函数丢到程序里面去，比方说main函数里头 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_file_script</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>lua_State *L;<br>L = luaL_newstate();<br>luaopen_base(L);<br>luaL_setfuncs(L, mylib, <span class="hljs-number">0</span>); <span class="hljs-comment">// 使我们注册的函数生效</span><br>luaL_dostring(L, LUA_SCRIPT_GLOBAL_ON); <span class="hljs-comment">// 执行我们写的Lua文本脚本程序</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Lua还有更多的可玩性，上面的仅仅只是其中一种 - <strong>luaL_dostring</strong>！</p><p>下面再介绍一种 - <strong>luaL_dofile</strong>！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lua_led_on</span><span class="hljs-params">(lua_State * L)</span><br>&#123;<br>LED0 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lua_print_hello</span><span class="hljs-params">(lua_State * L)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello this is lua!\r\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">luaL_Reg</span> <span class="hljs-title">mylib</span>[] =</span><br>&#123;<br>&#123;<span class="hljs-string">&quot;led_on&quot;</span>,lua_led_on&#125;,<br>&#123;<span class="hljs-string">&quot;print_hello&quot;</span>,lua_print_hello&#125;,<br>&#123;<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_file_script</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> res;<br>lua_State *L;<br>L = luaL_newstate(); <span class="hljs-comment">//创建Lua虚拟机</span><br>luaopen_base(L); <span class="hljs-comment">// 配置基本环境</span><br>luaL_openlibs(L); <span class="hljs-comment">// 注册所使用到的各种Lua库</span><br>luaL_setfuncs(L, mylib, <span class="hljs-number">0</span>); <span class="hljs-comment">// 注册函数</span><br><br>res = luaL_dofile(L, <span class="hljs-string">&quot;1:/test.lua&quot;</span>); <span class="hljs-comment">// 这里我事先把test.lua存储到了外部flash里，所以这里可以写具体位置去读取并运行这个文件</span><br><span class="hljs-keyword">if</span>(res) <span class="hljs-comment">// 返回1，说明读取失败，返回0，为读取成功</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;err\r\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok\r\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Lua调用C函数的注意事项：<br>对于可被Lua调用的C函数而言，其接口必须遵循Lua要求的形式，即<br><strong>typedef int (lua_CFunction)(lua_State* L);</strong><br>接收一个参数Lua_State*，即Lua的状态，返回值表示压入栈中的结果个数。</p></blockquote><p>如果想要注册有传入参数且有返回值的函数，可以参考以下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(lua_State *L)</span><br>&#123;<br><span class="hljs-type">int</span> count;<br><span class="hljs-type">int</span> x,y,res;<br><br>x = lua_tointeger(L,<span class="hljs-number">1</span>);<span class="hljs-comment">//获取Lua传递的参数</span><br>y = lua_tointeger(L,<span class="hljs-number">2</span>);<br><br>res = x + y;<span class="hljs-comment">//计算x+y</span><br><br>lua_pushnumber(L,res);<span class="hljs-comment">//结果压入栈中，供Lua提取</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//返回参数个数！！这是通知LUA调用者有一个值返回</span><br>&#125;<br><br><span class="hljs-comment">//Lua中调用</span><br>local res<br>res = Add(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br>print(<span class="hljs-string">&quot;Result = &quot;</span>,res)<br></code></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>写完啦…</p><h3 id="Author-kkl"><a href="#Author-kkl" class="headerlink" title="Author: @kkl"></a>Author: @kkl</h3>]]></content>
    
    
    <categories>
      
      <category>Study Page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCU</tag>
      
      <tag>Lua</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
